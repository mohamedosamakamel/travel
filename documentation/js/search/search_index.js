var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.146,1,3.36]],["body/classes/AllExceptionsFilter.html",[0,0.152,1,4.744,2,1.056,3,0.123,4,0.111,5,0.111,6,5.226,7,3.874,8,2.81,9,6.741,10,0.298,11,1.508,12,4.014,13,5.226,14,4.635,15,4.133,16,6.33,17,0.526,18,4.417,19,1.087,20,0.011,21,1.027,22,0.5,23,0.793,24,6.181,25,1.087,26,2.35,27,0.246,28,4.744,29,2.859,30,0.682,31,5.958,32,3.25,33,5.958,34,4.417,35,0.123,36,1.934,37,3.874,38,4.417,39,5.226,40,4.417,41,2.707,42,4.417,43,3.25,44,4.417,45,3.037,46,2.425,47,6.741,48,5.958,49,5.958,50,2.707,51,4.417,52,4.417,53,3.25,54,4.417,55,4.417,56,4.417,57,2.35,58,4.417,59,6.741,60,4.417,61,4.417,62,5.958,63,4.417,64,4.417,65,3.25,66,4.417,67,4.417,68,0.007,69,0.007]],["title/controllers/AppController.html",[70,1.85,71,3.105]],["body/controllers/AppController.html",[0,0.129,3,0.104,4,0.094,5,0.168,10,0.252,11,1.344,15,2.292,17,0.8,19,1.306,20,0.011,21,1.234,22,0.278,23,0.953,25,1.653,26,1.989,27,0.276,30,0.577,35,0.104,46,1.345,68,0.007,69,0.007,70,2.327,71,3.906,72,1.639,73,3.279,74,1.962,75,5.893,76,6.172,77,5.308,78,5.308,79,1.855,80,3.739,81,3.739,82,2.079,83,3.739,84,3.739,85,3.739,86,0.652,87,3.739,88,6.719,89,3.739,90,3.739,91,3.739,92,5.308,93,3.739,94,3.739,95,2.571,96,2.292,97,3.739,98,2.977,99,3.996,100,3.279,101,2.613,102,3.739,103,3.996,104,2.571,105,3.279,106,4.656,107,2.805,108,2.292,109,2.751,110,3.739,111,3.279,112,1.157,113,2.526,114,2.221,115,2.027,116,3.739,117,2.751,118,3.279,119,3.279,120,1.279,121,3.279,122,3.739,123,3.739,124,3.739,125,4.656,126,1.345,127,3.739,128,5.308,129,3.739,130,3.739,131,3.739,132,3.739,133,2.179,134,1.699,135,3.739,136,1.388,137,3.279,138,3.739,139,3.739,140,3.739,141,3.739,142,3.739,143,3.739,144,3.739,145,3.739,146,3.279,147,2.977,148,3.279,149,1.48,150,3.739,151,3.279]],["title/modules/AppModule.html",[152,1.345,153,3.105]],["body/modules/AppModule.html",[0,0.132,3,0.107,4,0.096,5,0.096,20,0.011,27,0.307,30,0.591,35,0.107,46,1.377,68,0.007,69,0.007,71,4.599,72,2.366,98,3.047,99,4.809,100,3.356,104,2.631,152,1.992,153,6.332,154,1.678,155,1.739,156,1.875,157,1.875,158,1.739,159,3.064,160,1.875,161,3.356,162,3.356,163,3.356,164,4.809,165,5.107,166,4.809,167,5.107,168,4.809,169,4.809,170,5.107,171,3.952,172,2.645,173,1.805,174,1.875,175,3.826,176,2.871,177,3.047,178,3.826,179,2.036,180,1.739,181,1.466,182,3.826,183,3.826,184,1.678,185,2.345,186,3.356,187,3.826,188,3.826,189,3.71,190,3.047,191,3.826,192,2.631,193,3.826,194,3.493,195,3.826,196,3.826,197,3.71,198,2.815,199,2.815,200,3.826,201,3.826,202,3.047,203,2.631,204,3.826,205,2.815]],["title/injectables/AppService.html",[99,2.732,206,0.803]],["body/injectables/AppService.html",[0,0.209,3,0.169,4,0.152,5,0.152,10,0.41,11,1.847,17,0.723,20,0.011,25,1.493,27,0.221,30,0.937,35,0.169,68,0.009,69,0.009,75,7.121,86,1.272,99,4.724,120,1.155,206,1.389,207,2.252,208,5.322,209,6.067,210,6.067,211,6.067]],["title/controllers/AuthController.html",[70,1.85,212,3.105]],["body/controllers/AuthController.html",[0,0.093,3,0.075,4,0.067,5,0.067,10,0.182,11,1.052,17,0.778,19,1.608,20,0.011,21,1.519,22,0.485,23,1.173,25,1.608,27,0.298,29,1.741,30,0.415,35,0.075,41,1.649,68,0.005,69,0.005,70,1.179,72,1.179,74,2.357,79,1.964,96,1.649,101,2.885,107,2.31,108,1.649,112,0.833,113,2.34,114,2.057,115,2.311,120,1.244,173,1.961,184,2.865,185,1.649,212,3.059,213,2.359,214,1.741,215,2.69,216,5.082,217,3.647,218,4.457,219,4.457,220,3.647,221,5.082,222,2.69,223,4.207,224,2.69,225,4.41,226,2.69,227,2.922,228,2.359,229,4.493,230,2.69,231,2.69,232,2.359,233,3.931,234,2.69,235,4.157,236,2.69,237,2.69,238,3.931,239,2.69,240,4.157,241,2.69,242,4.157,243,2.69,244,4.493,245,2.69,246,2.69,247,2.69,248,4.207,249,2.69,250,2.802,251,2.69,252,2.71,253,2.142,254,2.359,255,1.568,256,2.962,257,2.359,258,2.359,259,2.359,260,2.359,261,3.115,262,1.568,263,2.142,264,3.647,265,2.359,266,2.359,267,1.979,268,2.69,269,1.741,270,1.72,271,1.365,272,1.031,273,2.69,274,2.69,275,1.269,276,1.649,277,2.549,278,1.979,279,1.979,280,2.69,281,2.142,282,1.979,283,2.359,284,2.038,285,0.938,286,1.979,287,1.849,288,1.372,289,1.849,290,2.359,291,2.69,292,2.69,293,2.359,294,1.979,295,1.849,296,2.69,297,2.69,298,2.69,299,2.359,300,2.69,301,4.046,302,5.082,303,2.69,304,2.69,305,2.69,306,2.69,307,3.31,308,2.69,309,2.69,310,4.157,311,2.69,312,2.142]],["title/modules/AuthModule.html",[152,1.345,164,2.732]],["body/modules/AuthModule.html",[0,0.144,3,0.116,4,0.105,5,0.105,20,0.011,27,0.301,30,0.646,35,0.116,68,0.007,69,0.007,72,2.516,74,1.221,152,2.089,154,1.833,155,1.9,156,2.049,157,2.049,158,1.9,159,3.212,160,3.212,164,5.427,168,4.944,171,4.064,172,2.813,173,1.972,174,2.049,176,3.487,179,3.487,180,3.206,181,1.602,185,2.563,186,3.667,212,4.822,255,2.437,256,4.853,257,3.667,262,2.437,269,2.707,313,3.667,314,3.667,315,4.181,316,3.667,317,5.251,318,4.181,319,4.181,320,2.875,321,6.554,322,4.223,323,4.181,324,4.223,325,4.181,326,4.181,327,3.667,328,2.875,329,3.667,330,3.329,331,3.667,332,3.667,333,5.739,334,4.57]],["title/injectables/AuthService.html",[206,0.803,256,2.46]],["body/injectables/AuthService.html",[0,0.086,3,0.069,4,0.062,5,0.062,10,0.168,11,0.99,12,1.383,17,0.753,19,1.556,20,0.011,21,1.594,22,0.469,23,1.135,25,1.466,27,0.288,28,1.979,29,1.609,30,0.384,35,0.069,36,1.971,57,2.915,68,0.005,69,0.005,74,2.267,86,0.842,95,1.709,107,2.874,108,1.524,112,1.21,113,1.978,114,1.738,115,2.369,118,4.805,120,1.304,126,1.971,134,2.707,149,1.548,180,3.007,181,0.953,184,2.119,206,0.744,207,0.923,217,3.429,218,4.238,219,3.429,220,3.429,227,2.765,228,3.429,229,4.348,232,2.18,233,3.767,238,1.709,244,3.767,256,2.279,258,2.18,259,2.18,264,3.429,265,2.18,266,2.18,270,2.73,271,1.799,272,0.953,275,1.172,276,1.524,282,1.829,283,2.18,284,2.92,285,0.867,289,1.709,290,2.18,307,1.979,328,1.709,335,2.18,336,4.832,337,1.979,338,5.803,339,2.486,340,2.486,341,2.486,342,3.909,343,2.486,344,3.909,345,2.486,346,4.832,347,2.486,348,2.486,349,2.773,350,1.979,351,2.486,352,2.18,353,3.767,354,2.18,355,4.238,356,2.877,357,2.486,358,2.962,359,2.486,360,2.486,361,1.979,362,3.909,363,3.128,364,2.571,365,2.486,366,2.486,367,2.486,368,2.486,369,3.429,370,2.486,371,2.18,372,2.486,373,2.397,374,2.877,375,3.909,376,3.358,377,3.909,378,3.909,379,2.486,380,2.486,381,2.486,382,2.687,383,2.877,384,3.113,385,1.383,386,1.449,387,2.18,388,2.18,389,3.429,390,1.449,391,1.323,392,1.709]],["title/classes/BaseAbstractRepository.html",[0,0.146,393,2.732]],["body/classes/BaseAbstractRepository.html",[0,0.079,2,0.546,3,0.064,4,0.057,5,0.057,10,0.154,11,0.924,14,3.589,17,0.856,19,1.73,20,0.011,21,1.635,22,0.543,23,1.262,25,1.687,27,0.19,30,0.352,32,1.679,35,0.064,36,1.632,57,1.214,68,0.005,69,0.005,74,2.374,86,0.796,101,3.486,112,0.706,113,1.869,115,2.183,120,1.16,126,1.643,149,1.446,227,2.951,284,4.035,285,0.796,358,3.2,376,4.805,393,2.364,394,1.816,395,0.656,396,3.995,397,2.129,398,2.687,399,3.36,400,3.36,401,3.14,402,3.36,403,3.36,404,3.36,405,3.14,406,3.652,407,3.652,408,3.652,409,2.687,410,2.281,411,2.687,412,2.281,413,1.679,414,2.281,415,1.679,416,3.841,417,3.841,418,3.927,419,2.281,420,2.337,421,2.799,422,2.957,423,3.36,424,5.467,425,4.571,426,2.281,427,1.679,428,5.502,429,2.281,430,1.679,431,2.281,432,1.679,433,2.281,434,1.679,435,3.14,436,3.841,437,2.281,438,2.687,439,2.129,440,3.14,441,1.679,442,1.569,443,1.477,444,2.239,445,2.001,446,1.816,447,3.203,448,2.001,449,5.22,450,5.22,451,3.652,452,4.202,453,3.652,454,3.652,455,2.281,456,2.281,457,1.816,458,1.679,459,3.841,460,2.281,461,2.281,462,2.281,463,2.281,464,2.281,465,2.001,466,2.281,467,2.281,468,2.281,469,2.281]],["title/interfaces/BaseMessageWithToken.html",[470,1.472,471,2.347]],["body/interfaces/BaseMessageWithToken.html",[3,0.128,4,0.077,5,0.077,10,0.208,20,0.011,22,0.557,23,1.44,26,1.639,27,0.201,35,0.192,36,1.48,46,1.658,68,0.006,69,0.006,86,1.452,120,0.586,133,2.687,134,1.4,149,2.972,252,2.688,271,1.514,272,1.181,349,2.878,373,1.888,395,0.827,470,2.29,471,3.409,472,1.572,473,1.888,474,3.831,475,4.459,476,5.088,477,4.054,478,4.459,479,4.513,480,4.513,481,3.392,482,4.513,483,1.713,484,2.118,485,2.118,486,2.095,487,1.572,488,2.453,489,3.492,490,3.758,491,3.573,492,2.826,493,1.453,494,2.826,495,3.219,496,2.118,497,2.826,498,1.994,499,1.713,500,1.994,501,2.118,502,2.118,503,2.118,504,1.713,505,1.994,506,2.984,507,3.576,508,3.576,509,2.984,510,1.994,511,4.249,512,1.994,513,3.576,514,2.984,515,1.994,516,1.994,517,1.994,518,1.994,519,1.994,520,1.994,521,1.796,522,1.994,523,1.994,524,1.994,525,1.994,526,1.994,527,2.984,528,1.888,529,1.994,530,1.994,531,1.994,532,1.351,533,1.796,534,1.825,535,2.118,536,1.796,537,1.796]],["title/interfaces/BaseMessageWithTokenTesting.html",[470,1.472,499,2.347]],["body/interfaces/BaseMessageWithTokenTesting.html",[3,0.129,4,0.077,5,0.077,10,0.209,20,0.011,22,0.558,23,1.412,26,1.645,27,0.202,35,0.192,36,1.483,46,1.663,68,0.006,69,0.006,86,1.452,120,0.588,133,2.694,134,1.405,149,2.975,252,2.692,271,1.517,272,1.185,349,2.882,373,1.895,395,0.83,470,2.293,471,3.078,472,1.577,473,1.895,474,3.836,475,4.465,476,5.092,477,4.057,478,4.465,479,4.52,480,4.52,481,3.4,482,4.52,483,1.719,484,2.125,485,2.125,486,2.1,487,1.577,488,2.459,489,3.498,490,3.764,491,3.58,492,2.833,493,1.458,494,2.833,495,3.226,496,2.125,497,2.833,498,2.001,499,2.57,500,2.001,501,2.125,502,2.125,503,2.125,504,1.719,505,2.001,506,2.992,507,3.583,508,3.583,509,2.992,510,2.001,511,4.255,512,2.001,513,3.583,514,2.992,515,2.001,516,2.001,517,2.001,518,2.001,519,2.001,520,2.001,521,1.802,522,2.001,523,2.001,524,2.001,525,2.001,526,2.001,527,2.992,528,1.895,529,2.001,530,2.001,531,2.001,532,1.355,533,1.802,534,1.83,535,2.125,536,1.802,537,1.802]],["title/classes/BaseModel.html",[0,0.146,538,3.36]],["body/classes/BaseModel.html",[0,0.179,2,1.242,3,0.145,4,0.13,5,0.13,10,0.351,17,0.869,20,0.011,22,0.542,27,0.189,35,0.145,68,0.008,69,0.008,86,1.272,120,0.988,136,2.709,295,3.571,382,4.058,391,2.763,395,1.189,442,3.571,448,4.555,452,4.875,538,5.276,539,4.555,540,5.81,541,7.296,542,7.686,543,5.193,544,5.193,545,5.193,546,3.183,547,3.381,548,3.183,549,2.199,550,3.571,551,4.135,552,4.135,553,4.135,554,3.362,555,4.289,556,4.135,557,4.135,558,5.193,559,5.812,560,6.625]],["title/injectables/CacheConfigService.html",[192,2.902,206,0.803]],["body/injectables/CacheConfigService.html",[0,0.182,3,0.147,4,0.132,5,0.132,8,2.492,10,0.357,11,1.696,15,3.239,17,0.798,19,1.3,20,0.011,21,1.229,22,0.392,23,0.949,25,1.3,27,0.268,30,0.816,35,0.147,68,0.008,69,0.008,112,1.636,114,1.901,120,1.006,180,3.707,181,2.025,192,4.606,206,1.275,207,1.962,561,4.635,562,7.735,563,3.633,564,5.284,565,5.284,566,7.356,567,6.699,568,6.699,569,3.888,570,3.633,571,4.208,572,5.876,573,2.402,574,5.284,575,4.208,576,5.284,577,5.284,578,3.239,579,4.208,580,5.284]],["title/classes/ChangePasswordDto.html",[0,0.146,581,2.902]],["body/classes/ChangePasswordDto.html",[0,0.243,2,1.373,3,0.16,4,0.144,5,0.144,10,0.387,17,0.84,20,0.011,22,0.524,27,0.209,35,0.16,68,0.009,69,0.009,79,2.12,86,1.388,395,1.266,581,4.85,582,5.619,583,4.569,584,6.081,585,6.081,586,3.753,587,5.738,588,5.738,589,3.896,590,3.602,591,2.272]],["title/modules/ChangeStreamsModule.html",[152,1.345,197,2.902]],["body/modules/ChangeStreamsModule.html",[0,0.179,3,0.145,4,0.13,5,0.13,20,0.011,27,0.289,30,0.802,35,0.145,68,0.008,69,0.008,152,2.326,154,2.277,155,2.36,156,2.545,157,2.545,158,2.36,159,3.577,160,2.545,166,5.256,171,4.32,172,3.248,173,2.449,174,2.545,176,3.525,179,2.763,181,1.99,197,5.846,198,3.821,199,3.821,205,3.821,320,3.571,592,4.555,593,5.193,594,4.555,595,5.582,596,3.821,597,5.193,598,5.193,599,5.193]],["title/injectables/ChangeStreamsService.html",[206,0.803,595,2.902]],["body/injectables/ChangeStreamsService.html",[0,0.137,3,0.111,4,0.099,5,0.099,8,1.872,10,0.268,11,1.402,12,3.079,17,0.759,19,0.977,20,0.011,21,0.923,22,0.295,23,0.713,25,1.362,27,0.264,30,0.613,32,4.074,35,0.111,36,1.708,68,0.007,69,0.007,74,2.194,107,3.416,108,2.433,112,1.229,114,1.428,115,1.818,198,4.692,199,5.076,206,1.054,207,1.474,227,2.644,337,3.161,349,3.025,386,2.314,390,2.314,392,4.743,440,4.989,573,1.804,595,3.807,596,5.076,600,3.482,601,6.899,602,5.984,603,3.969,604,3.969,605,3.969,606,2.729,607,3.482,608,3.482,609,3.969,610,3.482,611,3.969,612,3.482,613,3.969,614,3.482,615,3.969,616,2.57,617,3.969,618,3.969,619,3.969,620,3.969,621,3.969,622,3.969,623,3.969,624,3.969,625,3.969,626,3.969,627,3.969,628,3.969,629,3.969,630,5.537,631,3.969,632,3.969,633,3.969,634,3.969,635,3.969,636,2.921,637,3.969,638,5.537,639,3.969,640,3.969,641,3.969,642,3.969,643,3.482]],["title/classes/ChatGateway.html",[0,0.146,644,3.105]],["body/classes/ChatGateway.html",[0,0.111,2,0.771,3,0.09,4,0.081,5,0.081,8,2.249,10,0.218,11,1.207,15,1.976,17,0.797,19,1.543,20,0.011,21,1.458,22,0.497,23,1.125,24,4.518,25,1.396,26,1.715,27,0.277,30,0.498,35,0.09,36,0.864,46,1.16,57,1.715,68,0.006,69,0.006,74,2.045,79,1.433,82,1.793,106,4.182,112,0.998,114,1.16,115,1.059,120,1.08,121,4.182,126,1.16,134,1.465,149,2.649,254,2.828,256,4.083,270,2.121,271,1.566,272,1.236,349,2.09,386,1.879,395,0.856,488,1.715,532,1.414,559,4.182,573,1.465,636,2.372,644,3.508,645,2.828,646,5.673,647,5.673,648,5.577,649,4.768,650,4.768,651,4.768,652,2.828,653,4.768,654,5.673,655,3.224,656,6.357,657,3.224,658,5.868,659,3.224,660,3.224,661,3.224,662,3.224,663,3.224,664,4.768,665,3.224,666,2.567,667,3.224,668,3.224,669,4.768,670,2.828,671,2.372,672,2.372,673,3.224,674,3.278,675,2.567,676,3.508,677,3.224,678,3.224,679,3.508,680,3.224,681,3.224,682,3.224,683,3.224,684,3.224,685,3.224,686,2.567,687,4.977,688,4.768,689,5.673,690,3.224,691,3.224,692,3.224,693,3.224,694,3.224,695,3.224,696,2.828,697,3.224,698,2.567,699,3.224,700,3.224,701,3.224,702,3.224,703,3.224,704,3.224,705,3.224,706,3.224,707,3.224,708,3.224,709,3.224,710,3.224,711,3.224,712,3.224,713,3.224,714,3.224,715,2.828,716,3.224,717,3.224,718,4.768,719,3.224,720,3.224,721,3.224,722,2.828,723,3.224]],["title/modules/ChatModule.html",[152,1.345,165,2.902]],["body/modules/ChatModule.html",[0,0.181,3,0.146,4,0.131,5,0.131,20,0.011,27,0.29,30,0.809,35,0.146,68,0.008,69,0.008,74,1.53,152,2.335,154,2.297,155,2.381,156,2.568,157,2.568,158,2.381,159,3.266,160,2.568,164,5.268,165,5.595,172,3.266,173,2.471,174,2.568,176,3.898,179,3.545,180,3.504,181,2.008,255,3.053,327,4.595,328,3.602,329,4.595,330,4.171,331,4.595,332,4.595,644,4.902,724,5.238,725,5.238,726,5.238,727,5.238,728,5.238]],["title/classes/CheckCodeToResetDto.html",[0,0.146,223,3.105]],["body/classes/CheckCodeToResetDto.html",[0,0.235,2,1.302,3,0.152,4,0.136,5,0.136,10,0.368,17,0.813,20,0.011,22,0.507,27,0.249,35,0.152,46,2.456,68,0.009,69,0.009,79,2.052,86,1.363,184,3.531,223,5.023,225,5.32,395,1.225,586,2.897,589,3.483,590,3.518,591,2.155,729,6.541,730,4.775,731,5.444,732,3.524,733,3.979,734,5.444,735,3.524,736,2.474,737,3.743,738,3.524]],["title/classes/Constants.html",[0,0.146,736,1.918]],["body/classes/Constants.html",[0,0.162,2,1.122,3,0.131,4,0.118,5,0.118,10,0.317,17,0.881,20,0.011,22,0.461,35,0.131,68,0.008,69,0.008,86,0.818,101,3.131,114,3.05,117,5.441,147,5.888,395,1.114,420,3.026,421,3.624,578,3.803,698,3.737,736,2.82,739,4.116,740,7.437,741,6.949,742,6.949,743,6.949,744,6.949,745,6.204,746,7.899,747,6.204,748,7.394,749,6.204,750,6.204,751,6.204,752,4.693,753,6.204,754,4.693,755,4.693,756,6.204,757,4.693]],["title/injectables/ConsumerService.html",[206,0.803,758,3.105]],["body/injectables/ConsumerService.html",[0,0.131,3,0.106,4,0.095,5,0.095,8,1.793,10,0.257,11,1.36,12,2.114,17,0.806,19,0.936,20,0.011,21,0.884,22,0.399,23,0.683,25,1.322,27,0.27,30,0.587,35,0.106,46,1.368,68,0.007,69,0.007,74,2.225,86,0.663,101,2.638,112,1.177,114,1.368,115,2.345,117,4.981,119,3.335,120,1.022,126,1.368,147,4.96,149,1.505,206,1.022,207,1.411,227,2.594,275,3.193,276,2.331,386,2.216,392,2.614,395,0.964,420,1.556,421,1.864,570,2.614,573,1.728,602,5.902,636,2.798,643,3.335,686,3.027,722,3.335,736,1.728,758,3.953,759,4.91,760,6.264,761,3.335,762,6.769,763,3.802,764,5.372,765,5.464,766,3.802,767,3.802,768,4.96,769,3.953,770,5.39,771,3.027,772,2.461,773,3.335,774,3.335,775,3.802,776,3.802,777,3.802,778,3.802,779,3.802,780,3.335,781,3.802,782,4.712,783,3.335,784,3.802,785,3.335,786,3.464,787,3.802,788,3.802,789,3.335,790,3.802,791,3.335,792,3.335,793,3.802,794,3.802,795,3.802,796,3.802,797,3.802,798,3.802,799,3.802,800,3.802,801,5.372]],["title/classes/CreateNotificationDto.html",[0,0.146,802,2.902]],["body/classes/CreateNotificationDto.html",[0,0.235,2,1.298,3,0.151,4,0.136,5,0.136,10,0.366,17,0.887,20,0.011,22,0.553,23,1.223,27,0.198,35,0.151,68,0.009,69,0.009,79,2.239,86,1.431,133,4.341,252,3.265,395,1.223,489,3.963,586,3.625,589,3.8,590,3.684,591,2.149,802,4.685,803,6.851,804,3.994,805,5.427,806,4.761,807,5.427,808,5.427,809,3.34]],["title/classes/CreatePhoneConfirmationDto.html",[0,0.146,810,2.902]],["body/classes/CreatePhoneConfirmationDto.html",[0,0.242,2,1.36,3,0.158,4,0.142,5,0.142,10,0.384,17,0.677,20,0.011,22,0.422,27,0.256,35,0.158,46,2.523,68,0.009,69,0.009,79,1.709,86,1.222,184,3.69,262,4.087,395,1.259,590,3.307,591,2.25,732,3.68,733,4.087,735,3.68,736,2.583,737,3.908,738,3.68,809,2.786,810,4.821,811,6.151,812,4.986,813,5.684]],["title/classes/CreateRateDto.html",[0,0.146,814,2.732]],["body/classes/CreateRateDto.html",[0,0.241,2,1.355,3,0.158,4,0.142,5,0.142,10,0.383,17,0.834,20,0.011,22,0.52,23,1.256,27,0.206,35,0.158,68,0.009,69,0.009,79,2.104,86,1.22,395,1.256,589,3.571,590,3.301,591,2.243,806,4.97,809,3.431,814,4.531,815,6.046,816,4.512,817,6.661,818,5.221,819,5.666,820,3.181,821,5.666,822,5.666,823,6.139]],["title/modules/DatabaseModule.html",[152,1.345,166,2.732]],["body/modules/DatabaseModule.html",[0,0.202,3,0.163,4,0.147,5,0.147,20,0.011,27,0.281,30,0.904,35,0.163,68,0.009,69,0.009,120,1.114,152,2.275,154,2.565,166,4.621,176,3.113,179,3.113,181,2.242,205,4.305,549,2.477,769,5.252,824,5.85,825,4.305,826,5.85,827,5.85,828,7.137,829,4.658,830,5.132,831,5.132]],["title/classes/FilterQueryOptionsUser.html",[0,0.146,832,2.732]],["body/classes/FilterQueryOptionsUser.html",[0,0.281,2,1.264,3,0.147,4,0.132,5,0.132,20,0.011,27,0.291,35,0.215,68,0.008,69,0.008,86,1.168,120,1.006,126,1.901,288,2.696,385,2.939,443,3.421,486,3.343,487,2.696,534,2.652,554,4.337,591,2.092,809,3.284,832,4.337,833,4.208,834,4.93,835,3.888,836,4.635,837,6.452,838,5.413,839,4.208,840,4.635,841,4.635,842,4.208,843,4.635]],["title/classes/FilterQueryUser.html",[0,0.146,838,3.105]],["body/classes/FilterQueryUser.html",[0,0.278,2,1.204,3,0.14,4,0.126,5,0.126,10,0.34,17,0.599,20,0.011,22,0.374,23,1.166,27,0.287,35,0.212,68,0.008,69,0.008,79,1.513,86,1.253,120,0.958,126,1.811,288,2.568,385,3.999,395,1.166,443,3.259,486,3.268,487,2.568,534,2.571,554,4.204,591,1.993,809,3.183,832,3.259,833,4.008,834,4.779,835,3.704,836,4.415,837,6.307,838,5.59,839,4.008,840,4.415,841,4.415,842,4.008,843,4.415,844,4.415,845,5.033]],["title/injectables/GoogleOauthGuard.html",[206,0.803,267,3.105]],["body/injectables/GoogleOauthGuard.html",[0,0.218,3,0.176,4,0.158,5,0.158,20,0.011,27,0.272,30,0.977,35,0.176,68,0.009,69,0.009,206,1.423,207,2.347,267,5.502,534,2.503,846,5.546,847,6.322,848,5.034,849,6.322]],["title/injectables/GoogleOauthStrategy.html",[206,0.803,317,2.902]],["body/injectables/GoogleOauthStrategy.html",[0,0.147,3,0.119,4,0.107,5,0.107,10,0.288,11,1.474,17,0.693,19,1.433,20,0.011,21,1.354,22,0.432,23,1.045,25,1.051,27,0.287,30,0.66,35,0.119,36,1.144,68,0.007,69,0.007,74,1.935,112,1.322,114,1.536,115,1.912,136,2.162,206,1.108,207,1.585,270,2.52,271,1.402,272,1.637,275,3.625,276,2.618,284,2.854,285,1.49,294,4.285,317,4.004,349,1.872,358,3.569,363,2.765,364,2.272,382,3.685,383,3.142,385,2.375,534,1.691,573,1.941,848,3.4,850,3.746,851,6.626,852,4.27,853,4.27,854,4.27,855,4.607,856,6.626,857,6.626,858,6.242,859,5.812,860,4.27,861,4.27,862,4.27,863,3.746,864,5.108,865,3.746,866,4.27,867,4.27,868,4.27,869,4.27,870,4.27,871,4.27,872,4.27,873,5.823,874,4.27,875,4.27,876,3.746,877,4.637,878,4.27,879,4.27,880,2.936,881,4.27,882,2.936,883,5.823,884,4.27]],["title/guards/JwtAuthGuard.html",[322,3.105,885,3.105]],["body/guards/JwtAuthGuard.html",[0,0.122,3,0.098,4,0.089,5,0.089,8,1.667,10,0.239,11,1.291,12,1.965,17,0.607,19,1.255,20,0.011,21,1.185,22,0.378,23,0.915,25,0.869,27,0.288,28,5.214,29,2.288,30,0.546,35,0.098,36,1.754,41,2.166,50,2.166,57,3.694,68,0.006,69,0.006,74,1.746,112,1.578,113,2.448,114,2.152,115,1.674,120,1.138,126,2.498,134,1.606,136,2.22,198,2.6,206,0.97,227,1.954,260,3.099,269,2.288,270,2.448,271,1.16,272,1.354,275,3.088,276,2.166,284,2.499,285,1.233,322,3.751,328,2.43,338,6.541,349,3.044,350,2.814,353,3.505,354,3.099,369,3.099,371,3.099,386,2.06,387,3.099,388,3.099,389,4.472,390,2.06,391,1.88,392,2.43,532,1.549,733,2.972,765,5.246,855,3.301,858,3.099,865,3.099,886,2.6,887,3.099,888,5.214,889,3.099,890,6.345,891,3.533,892,4.059,893,4.818,894,3.533,895,2.814,896,3.099,897,3.533,898,2.814,899,2.814,900,4.472,901,3.533,902,3.099,903,2.814,904,5.981,905,3.533,906,3.533,907,2.166,908,5.098,909,5.981,910,3.533,911,5.098,912,3.533,913,3.533,914,3.533,915,4.472,916,3.533,917,3.533]],["title/interfaces/LocalFilesInterceptorOptions.html",[470,1.472,918,3.105]],["body/interfaces/LocalFilesInterceptorOptions.html",[0,0.152,3,0.122,4,0.11,5,0.149,8,2.073,10,0.297,19,1.082,20,0.011,22,0.535,23,1.392,27,0.274,30,0.679,35,0.122,36,1.802,53,5.299,68,0.007,69,0.007,86,1.351,109,3.234,120,1.13,126,1.581,137,6.598,180,2.699,181,1.684,206,1.13,395,1.066,420,1.799,470,1.533,472,2.243,563,3.022,606,3.022,786,3.302,918,4.948,919,2.845,920,3.5,921,7.202,922,7.522,923,5.938,924,3.64,925,2.694,926,4.395,927,6.725,928,7.202,929,4.395,930,4.395,931,5.938,932,3.234,933,4.395,934,4.395,935,3.855,936,4.395,937,4.395,938,4.395,939,5.938,940,4.395,941,3.234,942,4.395,943,3.855,944,4.395,945,4.395,946,3.855,947,3.855,948,4.395,949,4.395,950,4.395,951,4.395,952,4.395,953,4.395,954,4.395]],["title/classes/LoginDto.html",[0,0.146,229,2.902]],["body/classes/LoginDto.html",[0,0.238,2,1.322,3,0.154,4,0.138,5,0.138,10,0.373,17,0.821,20,0.011,22,0.512,27,0.251,35,0.154,46,2.479,68,0.009,69,0.009,79,2.072,86,1.37,184,3.547,229,4.738,250,3.681,395,1.237,586,2.941,589,3.516,590,3.542,591,2.188,732,3.578,733,4.017,735,3.578,736,2.512,738,3.578,772,3.578,809,2.709,955,4.848,956,5.527,957,5.527]],["title/classes/LoginFacebookDto.html",[0,0.146,233,2.902]],["body/classes/LoginFacebookDto.html",[0,0.251,2,1.441,3,0.168,4,0.151,5,0.151,10,0.407,17,0.718,20,0.011,22,0.447,27,0.22,35,0.168,68,0.009,69,0.009,79,1.811,86,1.267,233,4.996,307,6.212,395,1.305,586,3.207,589,3.708,590,3.427,591,2.386,958,5.786,959,5.286,960,6.026]],["title/classes/LoginGoogleDto.html",[0,0.146,238,2.902]],["body/classes/LoginGoogleDto.html",[0,0.251,2,1.441,3,0.168,4,0.151,5,0.151,10,0.407,17,0.718,20,0.011,22,0.447,27,0.22,35,0.168,68,0.009,69,0.009,79,1.811,86,1.267,238,4.996,395,1.305,586,3.207,589,3.708,590,3.427,591,2.386,958,5.786,961,5.286,962,7.802,963,6.026]],["title/interfaces/LoginResponse.html",[289,2.902,470,1.472]],["body/interfaces/LoginResponse.html",[3,0.168,4,0.151,5,0.151,10,0.407,20,0.011,22,0.539,27,0.22,35,0.168,68,0.009,69,0.009,86,1.36,270,2.741,271,2.66,272,2.31,289,4.996,349,3.552,395,1.305,470,2.102,472,3.075,964,5.286]],["title/interfaces/MessageBody.html",[470,1.472,488,2.246]],["body/interfaces/MessageBody.html",[3,0.126,4,0.075,5,0.075,10,0.202,20,0.011,22,0.587,23,1.433,26,1.596,27,0.198,35,0.19,36,1.456,46,1.625,68,0.006,69,0.006,86,1.493,120,0.571,133,2.633,134,1.363,149,2.95,252,3.103,271,1.483,272,1.149,349,1.98,373,1.838,395,0.811,470,2.263,471,3.022,472,1.53,473,1.838,474,3.022,475,3.518,476,4.581,477,3.716,478,3.518,479,3.736,480,3.736,481,4.45,482,3.736,483,1.668,484,2.062,485,2.062,486,2.053,487,1.53,488,2.891,489,3.875,490,4.338,491,4.125,492,3.977,493,2.563,494,3.977,495,3.168,496,4.159,497,3.977,498,1.941,499,1.668,500,1.941,501,2.062,502,2.062,503,2.062,504,1.668,505,1.941,506,2.924,507,3.518,508,3.518,509,2.924,510,1.941,511,4.2,512,1.941,513,3.518,514,2.924,515,1.941,516,1.941,517,1.941,518,1.941,519,1.941,520,1.941,521,1.748,522,1.941,523,1.941,524,1.941,525,1.941,526,1.941,527,2.924,528,1.838,529,1.941,530,1.941,531,1.941,532,1.315,533,1.748,534,1.788,535,2.062,536,1.748,537,1.748]],["title/modules/MessageQueueModule.html",[152,1.345,189,2.902]],["body/modules/MessageQueueModule.html",[0,0.192,3,0.155,4,0.139,5,0.139,20,0.011,27,0.252,30,0.859,35,0.155,46,2.001,68,0.009,69,0.009,103,5.621,104,3.824,105,4.878,152,2.4,154,2.438,155,2.528,156,2.726,157,2.726,158,2.528,159,3.691,160,3.691,172,3.391,173,2.623,174,2.726,189,5.76,190,4.428,759,3.824,965,4.878,966,4.878,967,4.878,968,5.561]],["title/injectables/MessageQueueService.html",[103,2.732,206,0.803]],["body/injectables/MessageQueueService.html",[0,0.12,3,0.097,4,0.087,5,0.087,8,1.644,10,0.235,11,1.278,17,0.822,19,1.242,20,0.011,21,1.174,22,0.441,23,0.906,25,1.46,27,0.252,30,0.538,35,0.097,36,0.934,46,1.254,68,0.006,69,0.006,74,2.263,86,1.134,103,3.268,104,4.95,113,2.947,115,2.137,120,1.13,126,1.816,136,1.874,146,4.428,148,4.428,149,1.38,151,3.058,190,2.776,206,0.961,207,1.294,227,2.759,392,3.471,395,0.906,397,2.032,439,2.032,570,3.471,614,3.058,636,3.715,686,2.776,736,1.584,759,4.95,768,5.181,769,3.715,770,4.726,771,2.776,772,2.257,773,3.058,774,3.058,780,4.428,782,3.058,783,4.428,785,3.058,786,3.619,789,3.058,791,3.058,792,3.058,969,3.058,970,5.935,971,5.935,972,6.506,973,7.2,974,6.506,975,5.048,976,3.486,977,3.486,978,3.486,979,3.486,980,3.486,981,3.486,982,3.486,983,5.048,984,3.486,985,5.935,986,3.486,987,3.486,988,3.486,989,3.486,990,3.486,991,3.486,992,3.486,993,3.486,994,3.486,995,3.486,996,3.486,997,3.058,998,3.486,999,3.486,1000,3.486,1001,3.486,1002,3.486,1003,3.486,1004,3.058,1005,3.486,1006,3.486,1007,3.486,1008,3.486,1009,3.486]],["title/classes/Notification.html",[0,0.146,477,2.153]],["body/classes/Notification.html",[0,0.113,2,0.785,3,0.091,4,0.082,5,0.082,10,0.222,17,0.891,20,0.011,22,0.623,23,1.43,27,0.209,35,0.16,36,0.88,68,0.006,69,0.006,79,2.248,86,1.48,96,2.012,120,0.625,134,1.492,136,2.617,252,2.773,271,2.213,272,1.258,285,1.145,390,3.686,395,0.867,420,2.347,444,2.962,477,3.227,489,3.365,491,3.342,493,2.279,537,3.342,546,4.758,547,2.465,548,2.012,549,1.39,550,2.257,786,1.826,820,2.196,842,2.614,907,4.132,1010,2.415,1011,5.734,1012,4.565,1013,4.219,1014,4.96,1015,5.804,1016,3.283,1017,4.832,1018,4.832,1019,4.832,1020,3.283,1021,4.832,1022,3.283,1023,3.283,1024,4.238,1025,3.283,1026,3.555,1027,3.283,1028,3.283,1029,3.283,1030,2.012,1031,2.415,1032,5.547,1033,4.565,1034,4.219,1035,2.415,1036,3.283,1037,3.283,1038,3.283,1039,3.283,1040,3.283,1041,3.283,1042,2.125,1043,2.415,1044,2.879,1045,3.283,1046,3.283,1047,3.283]],["title/controllers/NotificationController.html",[70,1.85,1048,3.105]],["body/controllers/NotificationController.html",[0,0.092,3,0.074,4,0.067,5,0.067,10,0.18,11,1.046,17,0.776,19,1.516,20,0.011,21,1.432,22,0.504,23,1.106,25,1.603,27,0.277,30,0.412,35,0.074,36,0.715,68,0.005,69,0.005,70,1.171,72,1.171,74,2.354,79,1.958,82,3.623,96,1.637,101,2.142,114,0.961,115,2.139,120,1.24,136,0.991,149,1.057,214,1.729,252,2.856,271,2.532,272,1.023,285,0.931,286,3.042,287,1.836,288,1.362,349,2.701,459,3.042,486,2.588,487,1.362,489,3.466,490,2.534,491,3.319,492,1.637,494,1.637,497,2.534,498,3.275,499,1.485,504,2.299,528,1.637,573,1.213,674,3.915,675,2.126,802,3.915,859,4.995,1030,1.637,1048,3.042,1049,2.342,1050,4.437,1051,4.134,1052,4.437,1053,5.058,1054,5.694,1055,5.058,1056,5.058,1057,2.67,1058,4.134,1059,2.67,1060,2.67,1061,4.134,1062,2.67,1063,4.437,1064,2.67,1065,2.67,1066,2.67,1067,4.134,1068,2.67,1069,4.134,1070,2.67,1071,2.67,1072,4.999,1073,4.134,1074,2.67,1075,2.67,1076,4.134,1077,2.67,1078,3.291,1079,1.836,1080,2.342,1081,1.421,1082,1.965,1083,3.626,1084,2.67,1085,3.275,1086,2.342,1087,1.965,1088,2.126,1089,2.67,1090,2.67,1091,2.67,1092,2.67,1093,2.342,1094,2.67,1095,6.16,1096,6.16,1097,6.16,1098,6.16,1099,6.16,1100,6.16,1101,6.16,1102,6.16,1103,6.16,1104,6.16,1105,2.67,1106,2.342,1107,2.67,1108,2.67,1109,2.67,1110,2.67,1111,2.67,1112,2.67,1113,2.67,1114,2.67,1115,4.134,1116,2.67,1117,2.67,1118,2.67,1119,2.67,1120,2.67,1121,2.67,1122,2.67]],["title/modules/NotificationModule.html",[152,1.345,167,2.902]],["body/modules/NotificationModule.html",[0,0.158,3,0.128,4,0.115,5,0.115,20,0.011,21,1.066,27,0.297,30,0.708,35,0.128,68,0.008,69,0.008,72,2.679,152,2.19,154,2.01,155,2.084,156,2.248,157,2.248,158,2.084,159,3.368,160,3.368,167,5.809,171,4.176,172,2.995,173,2.163,174,2.248,176,3.251,179,2.44,181,1.757,205,3.374,320,3.153,477,2.34,547,2.34,549,1.942,825,3.374,1043,4.495,1048,5.055,1085,5.47,1086,4.022,1123,4.022,1124,4.022,1125,4.585,1126,4.022,1127,5.47,1128,4.585,1129,3.651,1130,4.585,1131,4.022,1132,3.651,1133,4.585]],["title/injectables/NotificationRepository.html",[206,0.803,1127,2.732]],["body/injectables/NotificationRepository.html",[0,0.097,3,0.079,4,0.071,5,0.071,10,0.191,11,1.093,14,2.968,17,0.918,19,1.871,20,0.011,21,1.768,22,0.572,23,1.365,25,1.84,27,0.243,30,0.436,35,0.079,68,0.005,69,0.005,74,2.39,86,0.752,101,3.446,112,1.336,113,2.144,115,0.928,120,0.538,149,1.709,206,0.822,207,1.049,227,2.865,270,0.956,271,1.926,272,1.083,284,3.902,285,0.985,358,2.646,376,4.583,393,5.053,395,0.775,396,3.855,397,2.516,398,3.176,399,3.176,400,3.176,401,2.968,402,3.176,403,3.176,404,3.176,405,2.968,409,2.079,411,2.079,413,2.079,415,2.079,416,3.176,417,3.176,418,2.968,420,2.586,421,3.098,422,1.829,423,2.079,424,5.26,425,4.033,427,2.079,428,5.302,430,2.079,432,2.079,434,2.079,435,2.968,436,3.176,438,2.079,439,2.516,440,1.942,477,1.441,534,1.709,537,1.647,549,1.196,1012,2.249,1031,2.079,1127,2.795,1129,2.249,1134,2.478,1135,4.317,1136,2.825,1137,2.825,1138,4.317,1139,4.317,1140,2.825,1141,5.953,1142,2.249,1143,2.249,1144,2.249,1145,2.249,1146,2.249,1147,2.249,1148,2.249,1149,2.249,1150,2.249,1151,2.249,1152,2.079,1153,2.249,1154,2.825,1155,2.825,1156,2.825,1157,3.786,1158,2.825]],["title/injectables/NotificationService.html",[206,0.803,1085,2.732]],["body/injectables/NotificationService.html",[0,0.076,3,0.061,4,0.055,5,0.055,8,1.04,10,0.426,11,0.9,17,0.829,19,1.616,20,0.011,21,1.527,22,0.517,23,1.179,25,1.668,26,2.376,27,0.268,30,0.341,35,0.061,36,1.759,46,2.02,68,0.004,69,0.004,74,2.292,82,2.483,86,1.182,95,1.517,107,2.869,108,1.352,112,1.1,113,1.827,114,1.606,115,2.156,120,1.069,180,2.869,181,0.845,206,0.677,207,0.819,227,1.962,252,0.967,270,1.9,271,2.419,272,0.845,275,1.04,276,1.352,284,2.51,285,0.77,349,3.178,390,2.603,425,1.517,439,1.286,443,1.428,471,1.227,481,2.616,483,2.483,486,2.327,487,1.126,488,3.193,489,1.174,499,2.483,504,1.227,532,1.559,533,1.286,536,1.286,537,2.985,540,1.756,578,3.442,602,4.779,820,1.003,1012,2.831,1030,1.352,1031,1.623,1042,3.315,1050,3.118,1052,3.118,1063,4.925,1085,2.301,1127,3.315,1129,1.756,1131,1.935,1157,4.491,1159,1.935,1160,5.12,1161,3.555,1162,3.555,1163,4.465,1164,3.555,1165,4.465,1166,3.555,1167,2.206,1168,2.206,1169,3.555,1170,2.206,1171,3.555,1172,2.206,1173,3.555,1174,2.206,1175,2.206,1176,2.206,1177,3.555,1178,2.206,1179,2.206,1180,2.206,1181,2.831,1182,2.206,1183,2.206,1184,2.206,1185,4.661,1186,5.615,1187,2.206,1188,3.555,1189,2.206,1190,5.12,1191,2.206,1192,2.444,1193,3.555,1194,3.555,1195,2.206,1196,3.555,1197,2.206,1198,2.206,1199,2.206,1200,2.206,1201,2.206,1202,2.206,1203,2.206,1204,2.206,1205,2.206,1206,2.206,1207,1.935,1208,2.206,1209,2.206,1210,2.206,1211,2.206,1212,2.206,1213,2.206,1214,2.206,1215,2.206,1216,2.206,1217,1.935,1218,2.206,1219,2.206,1220,2.206,1221,2.206,1222,1.935,1223,2.206,1224,2.206,1225,2.206,1226,2.206,1227,3.555,1228,2.206,1229,2.206,1230,2.206,1231,2.206,1232,2.206,1233,1.756,1234,4.465,1235,4.465,1236,3.555,1237,3.555,1238,2.206,1239,1.623,1240,2.206,1241,2.206,1242,1.935,1243,2.206,1244,2.206,1245,3.07,1246,2.206]],["title/classes/PaginatedDto.html",[0,0.146,1247,3.36]],["body/classes/PaginatedDto.html",[0,0.169,2,1.171,3,0.136,4,0.123,5,0.123,10,0.331,17,0.994,20,0.011,22,0.619,35,0.178,50,4.608,68,0.008,69,0.008,395,1.145,420,2.004,457,5.65,458,5.221,493,3.546,820,3.916,1247,5.65,1248,4.295,1249,7.095,1250,7.095,1251,7.095,1252,7.095,1253,7.095,1254,7.095,1255,7.095,1256,4.897,1257,4.897,1258,4.897,1259,4.897,1260,4.897,1261,4.897,1262,4.897,1263,4.897,1264,4.897]],["title/classes/PaginationParams.html",[0,0.146,486,1.918]],["body/classes/PaginationParams.html",[0,0.242,2,1.143,3,0.133,4,0.12,5,0.12,10,0.323,17,0.835,20,0.011,22,0.589,23,1.425,27,0.229,35,0.133,68,0.008,69,0.008,79,2.108,120,0.91,136,2.603,395,1.127,420,2.87,421,3.437,457,5.584,458,5.16,486,2.854,493,2.962,532,3.075,554,4.065,591,1.892,809,3.651,820,3.609,823,6.151,835,3.517,839,3.806,844,4.193,1004,5.508,1265,4.193,1266,7.013,1267,4.78,1268,6.279,1269,4.78,1270,4.78,1271,4.78,1272,6.279,1273,4.78]],["title/classes/ParamsWithId.html",[0,0.146,1274,3.105]],["body/classes/ParamsWithId.html",[0,0.251,2,1.441,3,0.168,4,0.151,5,0.151,10,0.407,17,0.718,20,0.011,22,0.447,27,0.22,35,0.168,68,0.009,69,0.009,79,1.811,86,1.267,382,4.339,395,1.305,420,2.466,591,2.386,809,3.562,834,5.347,1274,5.741,1275,5.286,1276,6.026,1277,6.026]],["title/classes/Password.html",[0,0.146,250,2.069]],["body/classes/Password.html",[0,0.155,2,1.072,3,0.125,4,0.112,5,0.112,10,0.303,11,1.523,17,0.717,19,1.481,20,0.011,21,1.399,22,0.447,23,1.08,25,1.481,27,0.163,35,0.125,43,4.428,45,4.67,68,0.008,69,0.008,86,1.429,120,1.145,134,2.735,136,2.234,227,2.782,250,4.226,740,6.839,1278,3.932,1279,6.03,1280,6.792,1281,6.017,1282,4.483,1283,6.017,1284,6.017,1285,4.483,1286,7.26,1287,4.483,1288,7.26,1289,7.26,1290,6.017,1291,7.26,1292,6.017,1293,6.017,1294,3.569,1295,3.298,1296,4.483,1297,3.298,1298,4.483,1299,4.483]],["title/controllers/PhoneConfirmationController.html",[70,1.85,1300,3.105]],["body/controllers/PhoneConfirmationController.html",[0,0.134,3,0.109,4,0.098,5,0.098,10,0.263,11,1.385,17,0.651,19,1.346,20,0.011,21,1.272,22,0.406,23,0.982,25,1.346,27,0.3,29,2.525,30,0.602,35,0.109,45,2.682,68,0.007,69,0.007,70,1.71,72,1.71,74,2.182,79,1.644,96,3.353,101,2.674,107,2.871,108,2.391,112,1.207,113,2.239,114,1.968,115,2.074,120,1.041,136,1.448,184,3.002,185,3.872,214,2.525,227,2.624,252,2.769,253,3.106,261,3.872,262,3.682,263,3.106,270,1.32,271,1.281,272,1.495,275,1.84,276,2.391,277,3.353,278,2.87,279,2.87,284,2.681,285,1.361,286,4.025,287,2.682,288,1.99,299,3.421,301,4.355,312,3.106,555,2.525,810,5.277,882,2.682,1082,2.87,1087,2.87,1300,4.025,1301,3.421,1302,6.316,1303,5.54,1304,5.54,1305,3.421,1306,3.901,1307,3.901,1308,3.421,1309,4.707,1310,3.901,1311,3.901,1312,4.798,1313,3.106,1314,3.421,1315,3.421,1316,3.421,1317,3.421,1318,3.421,1319,3.901,1320,3.901,1321,3.901,1322,3.901,1323,3.421]],["title/modules/PhoneConfirmationModule.html",[152,1.345,168,2.732]],["body/modules/PhoneConfirmationModule.html",[0,0.164,3,0.132,4,0.119,5,0.119,20,0.011,27,0.289,30,0.732,35,0.132,68,0.008,69,0.008,72,2.739,74,1.385,152,2.227,154,2.079,155,2.155,156,2.324,157,2.324,158,2.155,159,3.424,160,3.424,168,5.369,171,4.216,172,3.062,173,2.237,174,2.324,176,3.717,179,3.324,180,3.374,181,1.817,184,2.739,185,2.907,255,2.764,261,5.206,262,2.764,263,3.776,320,3.261,330,3.776,1300,5.14,1324,4.16,1325,4.742,1326,4.16,1327,4.16,1328,4.742,1329,4.742,1330,4.742,1331,3.776,1332,3.776,1333,4.742,1334,4.742,1335,4.742,1336,4.16,1337,4.742]],["title/injectables/PhoneConfirmationService.html",[206,0.803,261,2.587]],["body/injectables/PhoneConfirmationService.html",[0,0.144,3,0.117,4,0.105,5,0.105,10,0.283,11,1.455,12,3.197,17,0.781,19,1.615,20,0.011,21,1.526,22,0.487,23,1.178,25,1.415,27,0.27,30,0.647,35,0.117,57,3.491,65,5.196,68,0.007,69,0.007,74,2.232,95,2.882,112,1.779,113,1.715,115,1.888,120,0.798,126,1.508,184,1.837,185,4.328,206,1.094,207,1.556,225,2.713,227,2.706,261,3.524,262,4.116,386,3.351,733,2.443,770,3.337,810,5.255,1082,3.084,1303,5.756,1304,5.042,1305,3.676,1308,5.042,1309,4.855,1312,3.676,1314,3.676,1315,3.676,1316,3.676,1317,3.676,1318,3.676,1323,3.676,1331,3.337,1332,3.337,1338,3.676,1339,4.191,1340,7.642,1341,4.191,1342,4.191,1343,4.191,1344,5.749,1345,5.749,1346,5.749,1347,4.191,1348,4.191,1349,4.191,1350,4.191,1351,4.191,1352,4.191,1353,4.191,1354,4.191,1355,4.191,1356,4.191]],["title/interfaces/PushToken.html",[470,1.472,1192,2.902]],["body/interfaces/PushToken.html",[0,0.091,3,0.073,4,0.066,5,0.066,10,0.438,12,1.468,20,0.011,22,0.563,27,0.247,30,0.408,35,0.181,36,1.516,46,0.949,57,1.404,65,1.942,68,0.005,69,0.005,74,1.466,86,1.42,115,2.012,120,1.234,126,0.949,134,2.282,136,3.039,184,1.796,250,2.461,270,1.915,271,1.345,285,0.92,295,1.814,361,4.506,363,2.652,364,2.179,382,1.468,383,3.014,384,3.261,385,2.792,386,1.538,391,1.404,395,0.735,396,1.468,420,1.676,421,2.008,442,1.814,444,2.511,452,3.014,470,0.92,472,1.346,474,2.792,483,1.468,493,1.932,521,1.538,532,1.157,546,4.652,547,2.09,548,1.617,549,1.117,550,1.814,551,2.101,552,2.101,553,2.101,554,1.708,555,3.25,556,2.101,557,2.101,578,1.617,616,2.652,736,1.199,772,1.708,786,2.792,818,1.814,820,1.862,877,3.261,880,1.814,882,1.814,907,3.469,1026,4.164,1042,3.664,1081,2.179,1088,2.101,1185,4.937,1192,3.452,1233,2.101,1239,4.978,1245,2.816,1279,3.261,1294,2.101,1295,1.942,1297,1.942,1357,1.708,1358,2.315,1359,3.261,1360,2.315,1361,3.261,1362,2.315,1363,2.388,1364,3.997,1365,3.997,1366,2.315,1367,2.315,1368,4.964,1369,2.315,1370,2.315,1371,2.315,1372,2.315,1373,2.315,1374,2.315,1375,2.101,1376,2.652,1377,2.101,1378,2.315,1379,2.315,1380,2.315,1381,2.315,1382,2.315,1383,2.315,1384,2.315,1385,2.315,1386,2.315,1387,5.934,1388,2.315,1389,2.315,1390,2.315,1391,2.315,1392,4.404,1393,3.593,1394,2.315,1395,2.315,1396,2.315,1397,2.315,1398,2.315,1399,2.315,1400,2.315,1401,2.315,1402,2.315]],["title/classes/Rate.html",[0,0.146,1403,2.732]],["body/classes/Rate.html",[0,0.143,2,0.989,3,0.115,4,0.104,5,0.104,10,0.279,17,0.877,20,0.011,22,0.606,23,1.26,27,0.237,35,0.181,36,1.107,68,0.007,69,0.007,79,2.213,86,1.422,136,3.059,270,2.375,271,2.139,272,1.584,285,1.442,390,4.092,395,1.022,444,3.491,546,4.513,547,2.905,548,2.534,549,1.75,550,2.842,817,5.714,818,4.479,820,3.19,829,4.534,907,4.87,1013,4.793,1014,5.418,1015,5.589,1024,4.995,1026,4.19,1030,2.534,1032,6.157,1033,4.534,1034,3.041,1403,4.217,1404,3.041,1405,5.694,1406,4.133,1407,4.133,1408,4.133,1409,4.133,1410,4.133,1411,3.041,1412,3.625,1413,3.041,1414,3.625]],["title/controllers/RateController.html",[70,1.85,1415,3.105]],["body/controllers/RateController.html",[0,0.213,3,0.172,4,0.155,5,0.155,20,0.011,27,0.269,30,0.956,35,0.172,68,0.009,69,0.009,70,2.715,72,2.715,114,2.228,214,4.009,573,2.814,1403,4.009,1415,5.435,1416,5.431,1417,4.838,1418,5.431,1419,6.192]],["title/modules/RateModule.html",[152,1.345,169,2.732]],["body/modules/RateModule.html",[0,0.164,3,0.132,4,0.119,5,0.119,20,0.011,21,1.106,27,0.295,30,0.734,35,0.132,68,0.008,69,0.008,72,2.744,152,2.23,154,2.085,155,2.161,156,2.331,157,2.331,158,2.161,159,3.429,160,3.429,169,5.422,171,3.33,172,3.067,173,2.243,174,2.331,176,2.53,320,3.269,547,2.426,549,2.013,825,3.499,1132,3.786,1403,3.078,1413,4.604,1415,5.147,1417,5.208,1418,4.171,1420,4.171,1421,4.171,1422,4.171,1423,5.5,1424,4.755,1425,5.489,1426,4.755,1427,4.171,1428,4.171,1429,4.755]],["title/injectables/RateRepository.html",[206,0.803,1423,2.732]],["body/injectables/RateRepository.html",[0,0.089,3,0.072,4,0.065,5,0.065,10,0.174,11,1.02,14,2.769,17,0.899,19,1.829,20,0.011,21,1.728,22,0.56,23,1.334,25,1.795,27,0.221,30,0.399,35,0.072,50,1.583,68,0.005,69,0.005,74,2.356,82,1.436,86,1.21,101,3.394,112,1.246,113,2.026,115,0.848,120,0.491,126,0.929,149,1.594,206,0.767,207,0.958,227,2.661,284,3.835,285,0.901,358,2.469,376,4.471,391,2.635,393,4.954,395,0.723,396,3.732,397,2.348,398,2.963,399,2.963,400,2.963,401,2.769,402,2.963,403,2.963,404,2.963,405,2.769,409,1.9,411,1.9,413,1.9,415,1.9,416,2.963,417,2.963,418,2.769,420,2.482,421,2.973,422,1.672,423,1.9,424,5.108,425,3.846,427,1.9,428,5.191,430,1.9,432,1.9,434,1.9,435,2.769,436,2.963,438,1.9,439,2.348,440,1.775,532,1.132,534,1.594,549,1.093,616,1.672,818,1.775,1013,1.9,1014,4.115,1030,1.583,1141,5.808,1142,2.056,1143,2.056,1144,2.056,1145,2.056,1146,2.056,1147,2.056,1148,2.056,1149,2.056,1150,2.056,1151,2.056,1152,1.9,1153,2.056,1245,3.404,1403,1.672,1411,1.9,1423,2.607,1428,2.265,1430,2.265,1431,4.027,1432,2.582,1433,2.582,1434,4.027,1435,4.027,1436,2.582,1437,2.582,1438,2.582,1439,2.582,1440,4.906,1441,2.582,1442,2.582,1443,3.533,1444,4.951,1445,4.027,1446,4.027,1447,2.582,1448,4.027,1449,4.027,1450,2.582,1451,2.582,1452,2.582]],["title/injectables/RateService.html",[206,0.803,1417,2.587]],["body/injectables/RateService.html",[0,0.125,3,0.101,4,0.091,5,0.091,10,0.244,11,1.313,17,0.722,19,1.492,20,0.011,21,1.409,22,0.45,23,1.088,25,1.276,27,0.266,30,0.559,35,0.101,39,4.549,57,1.925,68,0.007,69,0.007,74,2.129,82,2.884,86,1.447,107,3.009,108,2.218,112,1.605,113,2.123,114,1.866,115,2.466,120,0.987,126,2.181,206,0.987,207,1.343,270,1.755,285,1.262,374,5.156,382,4.177,391,1.925,397,3.533,441,3.816,486,3.413,487,1.846,540,2.881,814,4.862,1013,4.46,1014,5.911,1030,2.218,1082,2.663,1242,3.174,1417,3.179,1423,4.721,1427,3.174,1440,3.174,1453,3.174,1454,6.061,1455,3.619,1456,6.061,1457,3.619,1458,3.619,1459,3.619,1460,3.619,1461,3.619,1462,2.881,1463,3.619,1464,3.619,1465,5.186,1466,3.619,1467,6.061,1468,6.62,1469,3.619,1470,3.619,1471,3.619,1472,3.619,1473,3.619,1474,3.619,1475,3.619,1476,3.619,1477,3.619,1478,3.619,1479,3.619,1480,3.619,1481,3.619]],["title/classes/RedisIoAdapter.html",[0,0.146,1482,3.36]],["body/classes/RedisIoAdapter.html",[0,0.172,2,1.194,3,0.139,4,0.125,5,0.125,10,0.337,11,1.635,15,3.06,17,0.594,19,1.228,20,0.011,21,1.161,22,0.371,23,0.896,25,1.228,27,0.276,35,0.139,36,2.029,68,0.008,69,0.008,120,0.95,126,1.796,136,1.853,376,4.642,439,2.91,534,2.557,571,5.143,575,5.143,579,3.975,648,5.143,672,5.269,820,3.255,924,3.06,1482,5.143,1483,3.975,1484,7.161,1485,6.459,1486,6.459,1487,7.573,1488,4.992,1489,5.666,1490,5.666,1491,5.143,1492,4.378,1493,4.378,1494,4.378,1495,4.378,1496,5.143,1497,4.378,1498,3.975,1499,4.992,1500,4.992]],["title/classes/RegisterDto.html",[0,0.146,244,2.902]],["body/classes/RegisterDto.html",[0,0.231,2,1.264,3,0.147,4,0.132,5,0.132,10,0.357,17,0.876,20,0.011,22,0.546,27,0.244,35,0.147,46,2.41,68,0.008,69,0.008,79,2.211,86,1.421,184,3.5,244,4.606,250,3.606,385,4.091,395,1.203,586,3.565,589,3.753,590,3.648,591,2.092,732,3.421,733,3.905,735,3.421,736,2.402,738,3.421,772,3.421,809,2.59,1501,4.635,1502,5.284,1503,5.284,1504,5.284,1505,5.284]],["title/interfaces/RequestWithUser.html",[470,1.472,855,2.732]],["body/interfaces/RequestWithUser.html",[3,0.169,4,0.152,5,0.152,10,0.41,20,0.011,22,0.45,27,0.266,35,0.169,41,4.796,68,0.009,69,0.009,270,2.747,395,1.31,420,2.483,470,2.116,472,3.095,534,2.889,855,5.066,925,3.719,1506,5.322,1507,6.067]],["title/classes/ResetPasswordDto.html",[0,0.146,248,3.105]],["body/classes/ResetPasswordDto.html",[0,0.23,2,1.257,3,0.146,4,0.132,5,0.132,10,0.355,17,0.874,20,0.011,22,0.545,27,0.243,35,0.146,46,2.401,68,0.008,69,0.008,79,2.205,86,1.419,184,3.494,225,4.749,248,4.911,250,3.596,395,1.198,583,4.183,586,3.552,589,3.743,590,3.641,591,2.08,732,3.401,733,3.891,735,3.401,736,2.388,737,3.612,738,3.401,1508,6.77,1509,5.253,1510,5.253,1511,5.253]],["title/guards/RolesGuard.html",[324,3.105,885,3.105]],["body/guards/RolesGuard.html",[0,0.168,3,0.136,4,0.122,5,0.122,8,2.303,10,0.33,11,1.612,17,0.758,19,1.567,20,0.011,21,1.481,22,0.473,23,1.143,25,1.202,27,0.258,30,0.754,35,0.136,36,1.899,41,2.994,68,0.008,69,0.008,112,1.511,120,1.212,136,1.813,206,1.212,227,2.441,269,3.162,270,1.653,324,4.686,493,3.004,573,2.219,886,3.593,888,6.202,889,4.284,890,7.006,892,3.888,893,5.526,895,5.071,896,6.216,898,3.888,902,4.284,903,3.888,915,4.284,1079,4.379,1512,4.284,1513,4.883,1514,4.883,1515,4.883,1516,4.883,1517,4.883,1518,4.883,1519,4.883]],["title/interfaces/SendNotificationMethod.html",[470,1.472,533,2.46]],["body/interfaces/SendNotificationMethod.html",[3,0.138,4,0.085,5,0.085,10,0.23,20,0.011,22,0.253,26,1.813,27,0.213,35,0.199,36,1.57,46,1.786,68,0.006,69,0.006,86,1.458,120,0.648,133,2.894,134,1.548,149,2.828,252,2.822,271,1.924,272,1.306,349,2.177,373,2.088,395,0.891,470,2.387,471,3.258,472,1.738,473,2.088,474,3.258,475,3.792,476,4.774,477,3.856,478,3.792,479,4.028,480,4.028,482,4.028,483,1.895,484,2.342,485,2.342,486,2.256,487,1.738,488,2.642,489,3.641,490,3.946,491,3.752,492,3.043,493,1.607,494,3.043,495,3.415,496,2.342,497,3.043,498,2.206,499,1.895,500,2.206,501,2.342,502,2.342,503,2.342,504,1.895,505,2.206,506,3.214,507,3.792,508,3.792,509,3.214,510,2.206,511,4.43,512,2.206,513,3.792,514,3.214,515,2.206,516,2.206,517,2.206,518,2.206,519,2.206,520,2.206,521,1.986,522,2.206,523,2.206,524,2.206,525,2.206,526,2.206,527,3.214,528,2.088,529,2.206,530,2.206,531,2.206,532,1.494,533,2.894,534,2.319,535,4.426,536,1.986,537,1.986,786,2.761]],["title/classes/Student.html",[0,0.146,364,2.246]],["body/classes/Student.html",[0,0.195,2,1.351,3,0.157,4,0.142,5,0.142,10,0.381,17,0.673,20,0.011,22,0.519,27,0.276,35,0.211,36,1.514,68,0.009,69,0.009,270,1.911,282,4.156,285,1.971,363,4.909,364,4.035,395,1.254,444,4.282,546,3.463,547,3.564,548,3.463,549,2.392,1081,4.035,1520,4.156,1521,5.649,1522,4.955,1523,5.14,1524,4.955]],["title/classes/Teacher.html",[0,0.146,1363,2.46]],["body/classes/Teacher.html",[0,0.185,2,1.287,3,0.15,4,0.135,5,0.135,10,0.363,17,0.807,20,0.011,22,0.551,27,0.27,35,0.207,36,1.441,68,0.009,69,0.009,79,1.617,136,2.515,285,1.876,363,4.802,395,1.216,444,4.153,546,4.153,547,3.457,548,3.297,549,2.278,820,3.079,907,3.297,1081,3.946,1363,4.323,1522,4.718,1525,3.958,1526,7.416,1527,4.718,1528,5.379,1529,5.379,1530,4.718,1531,4.985,1532,4.718]],["title/interfaces/TokenPayload.html",[353,2.902,470,1.472]],["body/interfaces/TokenPayload.html",[3,0.175,4,0.157,5,0.157,10,0.424,20,0.011,22,0.466,35,0.175,68,0.009,69,0.009,86,1.384,353,5.459,374,6.042,395,1.337,420,2.57,470,2.19,472,3.203,1533,5.507]],["title/classes/UpdateNotificationDto.html",[0,0.146,1534,3.36]],["body/classes/UpdateNotificationDto.html",[0,0.217,2,1.507,3,0.175,4,0.158,5,0.158,20,0.011,27,0.272,35,0.175,68,0.009,69,0.009,288,3.215,397,3.672,534,2.494,802,4.332,804,4.636,1083,5.526,1534,5.942,1535,5.526,1536,5.526,1537,6.3]],["title/classes/UpdateRateDto.html",[0,0.146,1538,3.36]],["body/classes/UpdateRateDto.html",[0,0.217,2,1.507,3,0.175,4,0.158,5,0.158,20,0.011,27,0.272,35,0.175,68,0.009,69,0.009,288,3.215,397,3.672,534,2.494,814,4.079,816,5.017,1462,5.017,1536,5.526,1538,5.942,1539,5.526,1540,6.3]],["title/classes/UpdateUserDto.html",[0,0.146,277,2.587]],["body/classes/UpdateUserDto.html",[0,0.227,2,1.228,3,0.143,4,0.129,5,0.129,10,0.347,17,0.864,20,0.011,22,0.568,23,1.453,27,0.24,35,0.143,68,0.008,69,0.008,79,2.182,86,1.411,250,3.557,277,4.032,278,5.631,288,2.619,395,1.181,493,3.102,590,3.423,591,2.033,809,3.751,834,3.778,880,4.99,882,4.99,1541,4.503,1542,5.134,1543,5.134,1544,5.134,1545,5.134,1546,5.134,1547,5.769,1548,5.769,1549,5.134,1550,6.577,1551,6.577]],["title/injectables/UploadCloudinary.html",[206,0.803,1552,3.105]],["body/injectables/UploadCloudinary.html",[0,0.173,3,0.139,4,0.125,5,0.125,8,2.361,10,0.338,11,1.638,17,0.771,19,1.232,20,0.011,21,1.164,22,0.372,23,0.899,25,1.232,27,0.286,30,0.773,35,0.139,68,0.008,69,0.008,112,1.549,114,1.801,120,0.953,180,3.654,181,1.918,206,1.232,207,1.858,563,3.442,573,2.275,606,4.449,919,4.642,924,3.068,925,3.068,932,3.683,997,4.391,1552,4.761,1553,4.391,1554,6.649,1555,5.005,1556,5.005,1557,6.29,1558,5.676,1559,6.471,1560,6.402,1561,5.005,1562,5.005,1563,5.005,1564,5.005,1565,5.005,1566,5.005,1567,5.005,1568,5.005,1569,4.391]],["title/injectables/UploadDigitalOceanSpace.html",[206,0.803,1570,3.36]],["body/injectables/UploadDigitalOceanSpace.html",[0,0.16,3,0.129,4,0.116,5,0.154,8,2.191,10,0.314,11,1.56,17,0.734,19,1.143,20,0.011,21,1.08,22,0.345,23,0.834,25,1.143,27,0.293,30,0.717,35,0.129,36,1.244,50,2.847,68,0.008,69,0.008,101,1.967,112,1.437,114,1.671,120,0.884,126,1.671,180,3.58,181,1.78,206,1.173,207,1.724,294,3.417,495,2.707,563,3.193,573,2.111,606,3.193,919,4.476,924,2.847,925,2.847,932,3.417,943,5.404,947,4.074,1035,3.417,1359,3.698,1554,6.459,1557,6.065,1558,5.404,1570,4.906,1571,4.074,1572,4.644,1573,4.644,1574,6.161,1575,6.161,1576,4.906,1577,3.698,1578,6.161,1579,4.906,1580,4.074,1581,4.074,1582,4.074,1583,4.074,1584,4.074,1585,4.074,1586,4.074,1587,4.074,1588,4.074,1589,4.074,1590,4.074,1591,4.644,1592,4.644,1593,4.074,1594,4.644,1595,4.644]],["title/controllers/UploadFilesController.html",[70,1.85,1596,3.105]],["body/controllers/UploadFilesController.html",[0,0.167,3,0.135,4,0.121,5,0.121,10,0.326,11,1.601,17,0.575,20,0.011,25,1.189,27,0.29,30,0.746,35,0.135,36,2.004,45,3.322,53,4.653,68,0.008,69,0.008,70,2.118,72,2.118,79,1.452,96,3.876,101,2.677,113,1.977,114,2.275,120,0.92,180,3.204,181,1.852,202,5.035,203,4.348,214,3.128,252,2.118,287,3.322,288,2.465,555,3.128,573,2.196,941,4.653,946,4.238,1087,3.555,1313,3.847,1590,4.238,1596,4.653,1597,4.653,1598,4.238,1599,5.613,1600,6.56,1601,4.831,1602,4.831,1603,4.564,1604,4.238,1605,4.831,1606,4.831,1607,4.238,1608,4.831,1609,4.831,1610,4.831,1611,5.547,1612,4.831,1613,5.547,1614,4.831,1615,4.831]],["title/modules/UploadFilesModule.html",[152,1.345,170,2.902]],["body/modules/UploadFilesModule.html",[0,0.189,3,0.153,4,0.138,5,0.138,20,0.011,27,0.286,30,0.849,35,0.153,68,0.009,69,0.009,72,3.01,152,2.387,154,2.409,155,2.497,156,2.693,157,2.693,158,2.497,159,3.671,160,2.693,170,5.663,172,3.365,173,2.591,174,2.693,179,2.923,181,2.105,202,5.467,203,3.777,1596,5.51,1597,4.042,1603,5.332,1604,4.819,1616,4.819,1617,4.819,1618,5.494,1619,5.494,1620,5.494]],["title/injectables/UploadFilesService.html",[206,0.803,1603,2.732]],["body/injectables/UploadFilesService.html",[0,0.149,3,0.12,4,0.108,5,0.167,10,0.291,11,1.484,17,0.793,19,1.442,20,0.011,21,1.363,22,0.494,23,1.052,25,1.061,27,0.26,30,0.666,35,0.12,36,1.57,68,0.007,69,0.007,74,1.944,82,2.398,86,1.458,101,1.825,112,1.334,113,2.725,114,2.571,115,1.416,120,0.821,126,1.551,149,1.707,180,3.503,181,1.652,203,4.913,206,1.115,207,1.6,227,1.652,252,1.89,395,1.052,495,2.513,563,2.964,573,1.959,941,5.257,1035,3.172,1576,4.667,1577,3.433,1579,5.302,1580,5.841,1581,3.782,1582,3.782,1583,3.782,1584,3.782,1585,3.782,1586,3.782,1587,3.782,1588,3.782,1589,3.782,1593,3.782,1597,5.257,1600,5.141,1603,3.794,1607,3.782,1611,6.267,1613,6.267,1621,3.782,1622,5.861,1623,5.861,1624,4.311,1625,5.861,1626,4.311,1627,4.311,1628,4.311,1629,4.311]],["title/classes/User.html",[0,0.146,270,1.428]],["body/classes/User.html",[0,0.074,2,0.512,3,0.06,4,0.054,5,0.054,10,0.421,12,1.19,17,0.856,20,0.011,22,0.603,23,0.903,27,0.227,30,0.331,35,0.165,36,1.348,46,0.77,57,1.139,65,1.575,68,0.004,69,0.004,74,1.277,79,2.119,86,1.442,115,1.815,120,1.127,126,0.77,134,2.287,136,3.113,184,2.206,250,2.71,270,1.871,271,1.139,285,0.747,295,1.472,361,5.169,363,3.257,364,1.846,382,2.433,383,3.702,384,4.006,385,3.467,386,1.248,390,2.55,391,1.139,395,0.623,396,1.19,420,1.79,421,1.701,442,1.472,444,2.127,452,2.553,470,0.747,474,2.433,483,1.19,493,2.373,521,2.022,532,0.938,546,4.406,547,1.77,548,1.312,549,0.906,550,1.472,551,1.704,552,1.704,553,1.704,554,1.386,555,2.832,556,1.704,557,1.704,578,1.312,616,3.257,736,0.973,772,1.386,786,2.433,818,3.008,820,2.287,877,4.006,880,3.008,882,3.008,907,3.389,1015,3.483,1026,4.068,1042,3.257,1081,2.328,1088,1.704,1185,3.459,1192,3.008,1233,1.704,1239,3.702,1245,2.385,1279,2.762,1294,1.704,1295,1.575,1297,1.575,1357,1.386,1358,1.877,1359,2.762,1360,1.877,1361,2.762,1362,1.877,1363,2.022,1364,3.483,1365,3.483,1366,1.877,1367,1.877,1368,5.695,1369,1.877,1370,1.877,1371,1.877,1372,3.043,1373,1.877,1374,1.877,1375,3.483,1376,2.246,1377,1.704,1378,1.877,1379,1.877,1380,1.877,1381,1.877,1382,1.877,1383,1.877,1384,1.877,1385,1.877,1386,1.877,1387,5.468,1388,1.877,1389,1.877,1390,1.877,1391,1.877,1392,3.837,1393,3.043,1394,1.877,1395,1.877,1396,1.877,1397,1.877,1398,1.877,1399,1.877,1400,1.877,1401,1.877,1402,1.877,1527,1.877,1630,5.031,1631,2.14,1632,2.14,1633,2.14,1634,2.14,1635,2.14,1636,2.14,1637,2.14,1638,2.14,1639,2.14,1640,2.14,1641,2.14,1642,2.14,1643,2.14,1644,2.14,1645,2.14]],["title/classes/UserNotFoundException.html",[0,0.146,356,3.105]],["body/classes/UserNotFoundException.html",[0,0.205,2,1.422,3,0.166,4,0.149,5,0.149,17,0.708,19,1.463,20,0.011,21,1.383,22,0.441,23,1.068,27,0.217,30,0.919,35,0.166,68,0.009,69,0.009,112,1.841,356,5.304,374,5.304,382,3.307,439,3.466,441,5.708,465,5.216,534,2.854,820,3.526,1646,5.216,1647,7.208,1648,5.947,1649,5.947]],["title/injectables/UserRepository.html",[107,1.918,206,0.803]],["body/injectables/UserRepository.html",[0,0.072,3,0.058,4,0.052,5,0.052,10,0.14,11,0.858,14,2.329,17,0.888,19,1.785,20,0.011,21,1.686,22,0.546,23,1.302,25,1.785,27,0.198,30,0.321,35,0.058,36,0.908,50,1.274,53,1.53,68,0.004,69,0.004,74,2.382,82,1.156,86,0.59,101,3.258,107,1.54,112,0.643,113,1.755,115,1.624,120,0.941,136,0.772,149,1.341,206,0.645,207,0.772,227,2.821,270,0.703,271,0.683,284,3.948,285,0.725,358,2.077,376,4.185,385,1.156,391,2.897,393,4.695,395,0.608,396,3.425,397,1.975,398,2.493,399,2.493,400,2.493,401,2.329,402,2.493,403,2.493,404,2.493,405,2.329,409,1.53,411,1.53,413,1.53,415,1.53,416,2.493,417,2.493,418,2.329,420,2.52,421,3.018,422,1.346,423,1.53,424,4.724,425,3.4,427,1.53,428,4.902,430,1.53,432,1.53,434,1.53,435,2.329,436,2.493,438,1.53,439,1.975,440,1.429,458,1.53,459,1.53,532,2.387,534,1.341,549,0.88,578,3.338,616,2.776,820,2.475,1078,1.655,1141,5.436,1142,1.655,1143,1.655,1144,1.655,1145,1.655,1146,1.655,1147,1.655,1148,1.655,1149,1.655,1150,1.655,1151,1.655,1152,1.53,1153,1.655,1181,5.112,1217,2.972,1222,1.823,1239,1.53,1245,2.329,1375,3.414,1443,1.823,1650,2.079,1651,1.823,1652,4.288,1653,3.388,1654,4.945,1655,4.288,1656,2.079,1657,2.079,1658,3.388,1659,2.079,1660,6.64,1661,2.079,1662,3.388,1663,2.079,1664,2.079,1665,2.079,1666,2.079,1667,2.079,1668,3.388,1669,2.079,1670,2.079,1671,2.079,1672,2.079,1673,2.079,1674,2.079,1675,3.388,1676,2.079,1677,1.53,1678,2.079,1679,2.079,1680,2.079,1681,2.079,1682,2.079,1683,2.079,1684,2.079,1685,2.079,1686,2.079,1687,2.079,1688,3.388,1689,2.079,1690,2.079,1691,2.079,1692,2.079,1693,4.776,1694,2.079,1695,4.288,1696,2.079,1697,3.388,1698,3.388,1699,2.079,1700,2.079,1701,2.079]],["title/controllers/UsersController.html",[70,1.85,1702,3.105]],["body/controllers/UsersController.html",[0,0.081,3,0.066,4,0.059,5,0.059,10,0.159,11,0.949,17,0.772,19,1.521,20,0.011,21,1.507,22,0.459,23,1.109,25,1.595,27,0.299,29,1.525,30,0.364,35,0.066,41,2.297,45,3.208,68,0.005,69,0.005,70,1.033,72,1.033,74,2.349,79,1.948,96,1.444,98,1.876,101,1.975,107,2.12,112,0.729,113,2.176,114,1.913,115,2.128,120,1.233,149,1.483,214,1.525,227,2.908,250,1.837,252,2.331,253,1.876,255,1.373,269,1.525,270,0.797,271,2.275,275,2.2,277,3.259,279,1.733,281,1.876,284,2.287,285,0.822,286,2.757,287,1.62,288,1.202,293,2.066,294,1.733,295,1.62,301,1.876,364,1.254,382,3.437,390,1.373,391,1.994,422,3.02,446,1.876,486,2.945,487,1.202,532,1.033,555,2.426,581,3.656,582,1.733,584,2.984,585,2.984,666,1.876,674,3.208,675,1.876,736,1.071,737,1.62,814,4.001,815,1.876,832,3.757,876,2.066,880,1.62,924,1.444,925,1.444,1034,3.433,1078,3.715,1079,1.62,1080,2.066,1081,1.254,1087,1.733,1274,5.226,1313,1.876,1363,1.373,1411,2.757,1417,2.86,1462,1.876,1599,3.715,1677,1.733,1702,2.757,1703,2.066,1704,4.665,1705,4.092,1706,3.747,1707,4.092,1708,4.665,1709,4.664,1710,4.665,1711,2.356,1712,3.747,1713,2.356,1714,2.066,1715,2.356,1716,2.356,1717,2.356,1718,2.356,1719,2.356,1720,2.066,1721,2.356,1722,2.356,1723,2.356,1724,3.747,1725,2.356,1726,3.747,1727,2.356,1728,2.356,1729,4.664,1730,2.356,1731,2.356,1732,3.747,1733,2.066,1734,2.356,1735,2.356,1736,2.356,1737,2.356,1738,2.356,1739,2.066,1740,2.066,1741,2.356,1742,2.066,1743,2.356,1744,1.876,1745,2.356,1746,2.066,1747,2.066,1748,2.066,1749,1.876,1750,2.356,1751,2.356,1752,1.876,1753,1.876,1754,1.876,1755,2.356,1756,2.356,1757,2.356,1758,2.356,1759,2.356,1760,2.356,1761,2.356,1762,2.356,1763,2.356,1764,2.356,1765,2.356,1766,2.356,1767,2.356,1768,2.356,1769,2.356,1770,2.356,1771,2.356,1772,2.356,1773,2.356,1774,2.356,1775,2.356,1776,2.356,1777,2.356,1778,2.356,1779,2.066,1780,2.356]],["title/modules/UsersModule.html",[152,1.345,171,2.246]],["body/modules/UsersModule.html",[0,0.138,3,0.111,4,0.1,5,0.1,20,0.011,21,1.488,27,0.307,30,0.617,35,0.111,68,0.007,69,0.007,72,2.439,107,3.755,152,2.04,154,1.752,155,1.816,156,1.959,157,1.959,158,1.816,159,3.136,160,3.136,169,3.601,171,4.312,172,2.727,173,1.885,174,1.959,176,2.96,177,3.182,179,2.96,180,2.528,181,1.531,194,2.587,255,2.329,270,1.352,275,3.897,285,2.232,334,3.182,364,2.126,396,2.222,547,3.265,549,1.692,825,2.94,919,2.587,924,2.449,925,2.449,1081,2.126,1132,3.182,1361,3.182,1363,2.329,1376,3.601,1412,3.505,1425,4.879,1523,4.093,1531,4.093,1552,4.093,1560,3.182,1677,2.94,1702,4.708,1740,3.505,1746,3.505,1747,3.505,1749,3.182,1781,3.505,1782,3.505,1783,3.505,1784,3.996,1785,3.996,1786,3.996,1787,3.996,1788,3.996,1789,3.996,1790,3.996,1791,3.996,1792,3.996]],["title/injectables/UsersService.html",[206,0.803,275,1.991]],["body/injectables/UsersService.html",[0,0.106,3,0.086,4,0.077,5,0.077,10,0.207,11,1.164,17,0.849,19,1.755,20,0.011,21,1.658,22,0.529,23,1.28,25,1.693,27,0.278,30,0.474,35,0.086,36,1.477,57,1.634,68,0.006,69,0.006,74,2.407,95,2.111,107,3.127,112,0.95,114,1.105,115,2.259,120,1.357,126,1.105,206,0.875,207,1.14,227,3.01,250,1.505,270,2.218,271,2.408,275,2.169,277,3.752,279,2.259,281,2.445,284,3.595,285,1.071,312,2.445,337,2.445,350,2.445,358,3.752,385,1.707,391,1.634,396,1.707,401,3.161,418,2.111,422,3.568,428,3.161,441,2.259,442,2.111,443,1.988,445,2.693,446,2.445,549,1.3,573,1.395,581,4.208,582,2.259,584,3.661,585,2.445,616,1.988,666,2.445,786,1.707,820,2.09,832,3.962,1034,3.383,1081,1.634,1093,2.693,1152,2.259,1181,4.389,1376,1.988,1677,2.259,1705,4.835,1707,4.835,1709,4.033,1714,2.693,1720,2.693,1729,5.368,1733,2.693,1739,2.693,1748,2.693,1749,2.445,1779,2.693,1793,2.445,1794,5.511,1795,5.511,1796,3.07,1797,3.07,1798,3.07,1799,3.07,1800,4.597,1801,3.07,1802,4.597,1803,3.07,1804,4.597,1805,3.07,1806,3.07,1807,3.07,1808,1.988,1809,2.445,1810,2.693,1811,2.693,1812,3.07,1813,3.07,1814,3.07,1815,3.07,1816,3.07,1817,3.07,1818,3.07,1819,3.07,1820,3.07]],["title/classes/VerifyPhoneDto.html",[0,0.146,1309,2.902]],["body/classes/VerifyPhoneDto.html",[0,0.235,2,1.298,3,0.151,4,0.136,5,0.136,10,0.366,17,0.811,20,0.011,22,0.506,27,0.248,35,0.151,46,2.451,68,0.009,69,0.009,79,2.048,86,1.361,184,3.528,225,4.821,262,4.341,395,1.223,586,2.888,589,3.476,590,3.513,591,2.149,732,3.514,733,3.972,735,3.514,736,2.467,737,3.732,738,3.514,809,2.66,1309,4.685,1821,6.532,1822,4.761,1823,5.427,1824,5.427]],["title/classes/WebsocketsExceptionFilter.html",[0,0.146,679,3.105]],["body/classes/WebsocketsExceptionFilter.html",[0,0.194,2,1.347,3,0.157,4,0.141,5,0.141,10,0.38,11,1.765,12,4.401,13,6.115,15,4.851,16,6.941,17,0.671,19,1.386,20,0.011,21,1.309,22,0.418,23,1.011,24,4.484,25,1.386,26,2.996,27,0.254,30,0.87,35,0.157,68,0.009,69,0.009,82,3.132,534,2.76,671,4.143,679,5.13,1825,4.939,1826,7.572,1827,5.631,1828,5.631,1829,5.631]],["title/guards/WsJwtGuard.html",[676,3.105,885,3.105]],["body/guards/WsJwtGuard.html",[0,0.167,3,0.135,4,0.122,5,0.122,8,2.291,10,0.328,11,1.606,17,0.756,19,1.561,20,0.011,21,1.475,22,0.471,23,1.139,25,1.195,27,0.291,30,0.75,35,0.135,36,1.7,68,0.008,69,0.008,74,2.064,86,0.847,112,1.503,120,0.924,136,1.803,206,1.208,227,2.432,256,4.649,271,1.595,272,1.862,573,2.208,612,4.26,652,4.26,656,5.566,658,4.26,670,4.26,671,3.574,672,3.574,676,4.669,687,5.566,855,3.145,886,3.574,888,5.967,892,5.053,893,5.514,895,3.867,903,3.867,1336,4.26,1830,6.199,1831,4.26,1832,4.857,1833,4.857,1834,4.857,1835,4.857,1836,4.857,1837,4.857,1838,4.857]],["title/modules/cacheOperationsModule.html",[152,1.345,194,2.732]],["body/modules/cacheOperationsModule.html",[0,0.18,3,0.145,4,0.13,5,0.13,20,0.011,27,0.28,30,0.804,35,0.145,68,0.008,69,0.008,136,1.933,152,2.329,154,2.283,155,2.367,156,2.553,157,2.553,158,2.367,159,3.581,160,3.581,172,3.254,173,2.456,174,2.553,176,3.532,177,4.147,179,3.532,180,3.017,181,1.996,192,5.024,194,5.346,255,3.036,334,4.147,569,3.832,1808,5.572,1810,4.568,1839,4.568,1840,4.568,1841,4.568,1842,5.208,1843,5.208,1844,5.208]],["title/injectables/cacheOperationsService.html",[206,0.803,1808,2.732]],["body/injectables/cacheOperationsService.html",[0,0.186,3,0.15,4,0.135,5,0.135,10,0.364,11,1.718,17,0.808,19,1.67,20,0.011,21,1.578,22,0.504,23,1.219,25,1.328,27,0.247,30,0.833,35,0.15,68,0.009,69,0.009,74,2.169,86,1.294,112,1.67,113,2.208,115,1.772,206,1.292,207,2.003,255,3.145,495,3.145,569,5.91,570,3.709,1808,4.394,1809,5.914,1845,4.732,1846,6.788,1847,5.395,1848,5.395,1849,6.788,1850,6.788,1851,5.395,1852,5.395,1853,5.395,1854,5.395]],["title/coverage.html",[1855,4.599]],["body/coverage.html",[0,0.286,1,1.636,5,0.051,6,1.803,7,1.803,20,0.011,22,0.153,68,0.004,69,0.004,70,2.687,71,1.512,73,1.803,99,1.33,101,0.87,103,1.33,104,1.413,107,0.934,109,1.512,126,0.739,158,1.933,184,0.901,185,2.057,192,1.413,199,1.512,203,2.308,206,1.474,208,1.803,212,1.512,213,1.803,223,1.512,225,1.33,229,1.413,233,1.413,238,1.413,244,1.413,248,1.512,250,1.007,256,1.198,261,1.26,262,2.863,267,1.512,270,0.695,275,0.969,277,1.26,278,1.512,289,1.413,317,1.413,322,1.512,324,1.512,335,1.803,353,1.413,356,1.512,364,1.093,393,1.33,394,1.636,470,2.373,471,1.143,473,3.56,477,1.049,486,0.934,488,1.093,499,1.143,504,1.143,533,1.198,536,1.198,538,1.636,539,1.803,561,1.803,578,5.408,581,1.413,582,1.512,583,2.672,595,1.413,596,2.47,600,1.803,644,1.512,645,1.803,674,1.413,676,1.512,679,1.512,729,1.803,730,1.803,736,0.934,739,1.803,758,1.512,759,2.925,760,1.803,761,1.803,786,3.23,802,1.413,803,1.803,804,3.13,810,1.413,811,1.803,812,1.803,814,1.33,815,1.636,816,2.672,832,1.33,833,2.672,838,1.512,846,1.803,850,1.803,855,1.33,885,3.13,887,1.803,899,1.636,918,1.512,919,3.179,920,2.672,955,1.803,958,2.672,959,1.803,961,1.803,964,1.803,969,1.803,1010,2.47,1043,1.512,1048,1.512,1049,1.803,1072,1.512,1079,1.413,1085,1.33,1127,1.33,1134,1.803,1159,1.803,1192,1.413,1247,1.636,1248,1.803,1265,1.803,1274,1.512,1275,1.803,1278,1.803,1300,1.512,1301,1.803,1309,1.413,1338,1.803,1357,2.754,1363,1.198,1376,1.33,1403,1.33,1404,2.47,1413,1.512,1415,1.512,1416,1.803,1417,1.26,1423,1.33,1430,1.803,1453,1.803,1482,1.636,1483,3.91,1491,1.636,1496,1.636,1498,1.636,1501,1.803,1506,1.803,1508,1.803,1512,1.803,1520,2.47,1523,1.512,1525,2.47,1531,1.512,1533,1.803,1534,1.636,1535,1.803,1538,1.636,1539,1.803,1541,1.803,1552,1.512,1553,1.803,1570,1.636,1571,1.803,1596,1.512,1597,2.47,1598,1.803,1603,1.33,1621,1.803,1646,1.803,1651,1.803,1702,1.512,1703,1.803,1744,1.636,1752,1.636,1753,1.636,1754,1.636,1793,2.672,1808,1.33,1809,1.636,1821,1.803,1822,1.803,1825,1.803,1830,1.803,1831,1.803,1845,1.803,1855,1.636,1856,2.055,1857,2.055,1858,2.055,1859,4.911,1860,7.526,1861,4.254,1862,1.803,1863,7.438,1864,8.077,1865,2.944,1866,1.803,1867,7.677,1868,6.801,1869,2.055,1870,2.055,1871,1.803,1872,4.254,1873,1.803,1874,1.803,1875,4.911,1876,3.356,1877,1.803,1878,2.055,1879,2.055,1880,4.254,1881,2.055,1882,1.803,1883,2.055,1884,1.803,1885,1.803,1886,1.803,1887,1.803,1888,2.055,1889,2.055]],["title/dependencies.html",[155,2.309,1890,3.084]],["body/dependencies.html",[0,0.188,20,0.011,30,0.6,32,2.858,68,0.007,69,0.007,111,3.407,155,1.765,181,1.488,269,2.514,285,2.511,288,1.982,328,2.67,349,1.703,352,3.407,355,3.407,443,2.514,483,2.16,549,1.644,569,4.012,570,4.333,571,4.342,572,3.407,591,1.538,606,3.749,607,3.407,608,3.407,610,3.407,671,2.858,672,4.012,768,3.092,769,2.858,771,3.092,829,3.092,830,4.783,831,4.783,835,2.858,848,3.092,863,5.994,864,4.783,898,3.092,924,3.343,925,3.343,932,5.028,1030,2.381,1042,2.514,1295,2.858,1331,3.092,1332,4.342,1560,4.342,1569,3.407,1576,3.092,1577,3.092,1579,3.092,1891,6.833,1892,3.884,1893,3.884,1894,3.884,1895,3.884,1896,5.453,1897,3.884,1898,3.884,1899,3.884,1900,3.884,1901,3.884,1902,3.884,1903,3.884,1904,5.453,1905,3.884,1906,3.884,1907,3.884,1908,3.884,1909,3.884,1910,3.884,1911,3.884,1912,3.884,1913,3.884,1914,3.884,1915,3.884,1916,3.884,1917,3.884,1918,3.884,1919,3.884,1920,3.884,1921,3.884,1922,3.884,1923,3.884,1924,3.884,1925,3.884,1926,3.884,1927,3.884,1928,3.884,1929,5.453,1930,3.884,1931,3.884,1932,3.884,1933,3.884,1934,5.453,1935,3.884,1936,3.884,1937,3.884,1938,3.884,1939,3.884,1940,3.884,1941,3.884,1942,3.884,1943,3.884,1944,3.884,1945,3.884,1946,3.884,1947,3.884,1948,3.884,1949,3.884,1950,3.884,1951,3.884,1952,3.884,1953,3.884,1954,3.884,1955,3.884]],["title/miscellaneous/enumerations.html",[1956,2.05,1957,4.456]],["body/miscellaneous/enumerations.html",[10,0.411,20,0.011,68,0.009,69,0.009,364,3.89,421,4.138,474,4.066,1042,4.733,1081,3.89,1185,5.027,1357,3.941,1363,4.262,1364,5.821,1365,5.821,1956,3.548,1957,5.34,1958,5.821]],["title/miscellaneous/functions.html",[1956,2.05,1959,4.456]],["body/miscellaneous/functions.html",[10,0.372,19,1.845,20,0.01,21,1.744,22,0.612,23,1.346,25,1.356,68,0.009,69,0.009,109,5.061,158,3.874,376,3.378,596,4.055,759,3.789,820,3.569,918,5.061,919,3.568,920,5.477,935,4.834,1793,4.388,1811,4.834,1871,4.834,1873,4.834,1874,4.834,1882,6.033,1884,4.834,1885,6.033,1956,3.212,1959,4.834,1960,5.51,1961,6.878,1962,4.834,1963,5.51,1964,5.51,1965,5.51,1966,5.51]],["title/index.html",[10,0.237,1967,3.516,1968,3.516]],["body/index.html",[4,0.128,20,0.011,43,3.746,68,0.008,69,0.008,117,4.813,125,4.465,405,3.5,500,3.296,648,4.053,696,4.465,715,6.34,1035,3.746,1106,4.465,1207,4.465,1693,4.465,1855,4.053,1969,5.09,1970,5.09,1971,6.541,1972,5.09,1973,5.09,1974,5.09,1975,5.09,1976,5.09,1977,5.09,1978,5.09,1979,5.09,1980,5.09,1981,8.214,1982,5.09,1983,5.09,1984,8.076,1985,6.541,1986,5.09,1987,5.09,1988,5.09,1989,5.09,1990,6.541,1991,5.09,1992,5.09,1993,5.09,1994,6.541,1995,6.541,1996,5.09,1997,5.09,1998,5.09,1999,4.465,2000,5.09,2001,5.09,2002,5.09,2003,5.09,2004,5.09,2005,5.09,2006,5.09,2007,4.465,2008,5.09,2009,5.09,2010,5.09,2011,5.09,2012,5.09,2013,5.09,2014,4.465]],["title/modules.html",[154,2.533]],["body/modules.html",[20,0.009,68,0.009,69,0.009,153,4.055,154,2.416,164,3.568,165,3.789,166,3.568,167,3.789,168,3.568,169,3.568,170,3.789,171,2.932,189,4.729,194,3.568,197,3.789,1999,7.607,2015,8.672,2016,8.672,2017,8.707,2018,5.51,2019,5.51]],["title/overview.html",[2020,5.067]],["body/overview.html",[2,0.781,20,0.011,68,0.006,69,0.006,72,1.431,99,3.7,103,4.711,107,3.307,152,1.041,153,6.176,154,1.431,155,1.484,156,1.6,157,1.6,158,1.484,159,1.6,160,1.6,161,2.864,162,2.864,163,2.864,164,5.202,165,4.624,166,4.354,167,5.405,168,4.935,169,4.935,170,4.624,171,4.276,172,2.359,173,1.54,174,1.6,189,5.241,194,4.354,197,5.134,207,1.212,256,4.241,261,4.46,275,3.432,313,2.864,314,2.864,316,2.864,317,3.93,472,1.666,592,2.864,594,2.864,595,3.93,758,4.206,886,2.402,965,2.864,966,2.864,967,2.864,1085,4.711,1123,2.864,1124,2.864,1126,2.864,1127,4.711,1297,2.402,1324,2.864,1326,2.864,1327,2.864,1417,4.46,1420,2.864,1421,2.864,1422,2.864,1423,4.711,1603,3.7,1616,2.864,1617,2.864,1781,2.864,1782,2.864,1783,2.864,1808,4.711,1839,2.864,1840,2.864,1841,2.864,2020,2.864,2021,3.265,2022,3.265,2023,3.265,2024,3.265,2025,3.265]],["title/properties.html",[395,0.912,1890,3.084]],["body/properties.html",[20,0.011,43,4.857,68,0.01,69,0.01,395,1.185,2007,5.789,2014,5.789,2026,6.6,2027,6.6,2028,6.6]],["title/interfaces/queryParamsWithId.html",[470,1.472,536,2.46]],["body/interfaces/queryParamsWithId.html",[3,0.138,4,0.085,5,0.085,10,0.23,20,0.011,22,0.253,26,1.813,27,0.213,35,0.199,36,1.57,46,1.786,68,0.006,69,0.006,86,1.471,120,0.648,133,2.894,134,1.548,149,2.828,252,2.822,271,1.63,272,1.306,349,2.177,373,2.088,395,0.891,470,2.387,471,3.258,472,1.738,473,2.088,474,3.258,475,3.792,476,4.774,477,3.856,478,3.792,479,4.028,480,4.028,482,4.028,483,1.895,484,2.342,485,2.342,486,2.662,487,1.738,488,2.642,489,3.641,490,3.946,491,3.752,492,3.043,493,1.607,494,3.043,495,3.415,496,2.342,497,3.043,498,2.206,499,1.895,500,2.206,501,2.342,502,2.342,503,2.342,504,1.895,505,2.206,506,3.214,507,3.792,508,3.792,509,3.214,510,2.206,511,4.43,512,2.206,513,3.792,514,3.214,515,2.206,516,2.206,517,2.206,518,2.206,519,2.206,520,2.206,521,1.986,522,2.206,523,2.206,524,2.206,525,2.206,526,2.206,527,3.214,528,2.088,529,2.206,530,2.206,531,2.206,532,1.494,533,1.986,534,2.319,535,2.342,536,2.894,537,3.752]],["title/classes/subscribeNotificationDto.html",[0,0.146,1072,3.105]],["body/classes/subscribeNotificationDto.html",[0,0.237,2,1.314,3,0.153,4,0.138,5,0.138,10,0.371,17,0.818,20,0.011,22,0.599,27,0.25,35,0.153,68,0.009,69,0.009,79,2.064,86,1.197,272,2.105,349,3.283,395,1.232,420,2.248,421,2.693,586,2.923,589,3.503,590,3.532,591,2.175,804,4.042,809,3.365,1072,5.052,1185,5.149,1877,6.569,2029,5.494,2030,6.865,2031,5.494,2032,5.494,2033,5.494,2034,5.494]],["title/miscellaneous/typealiases.html",[1956,2.05,2035,5.08]],["body/miscellaneous/typealiases.html",[10,0.419,20,0.009,22,0.461,68,0.009,69,0.009,271,2.43,282,5.446,394,4.947,447,6.492,1010,4.572,1031,5.446,1357,4.023,1404,4.572,1411,5.446,1520,4.572,1525,4.572,1530,6.492,1956,3.622,1958,4.947,2036,6.213,2037,5.45,2038,5.45,2039,5.45,2040,6.213,2041,5.45]],["title/miscellaneous/variables.html",[1956,2.05,2042,4.456]],["body/miscellaneous/variables.html",[10,0.179,15,1.627,20,0.011,22,0.52,36,1.521,37,2.328,41,2.522,50,1.627,68,0.005,69,0.005,86,1.071,101,1.742,120,0.959,126,0.955,133,2.399,134,1.87,136,2.107,149,2.573,252,2.209,270,1.392,373,1.627,395,0.739,396,1.476,420,3.219,421,3.856,435,3.465,459,1.953,471,1.476,473,1.627,474,1.476,475,1.718,476,2.664,477,2.571,478,1.718,488,1.412,489,3.021,490,3.089,491,2.399,492,1.627,493,1.252,494,1.627,497,1.627,504,2.288,505,1.718,506,2.664,507,3.262,508,3.262,509,2.664,510,1.718,511,3.977,512,1.718,513,3.262,514,2.664,515,1.718,516,1.718,517,1.718,518,1.718,519,1.718,520,1.718,521,1.547,522,1.718,523,1.718,524,1.718,525,1.718,526,1.718,527,2.664,528,1.627,529,1.718,530,1.718,531,1.718,532,1.164,547,2.099,575,2.113,579,2.113,674,2.829,698,2.113,893,1.953,899,3.276,900,2.328,907,1.627,941,3.028,1010,1.953,1033,4.891,1043,3.028,1044,2.328,1079,3.903,1081,1.412,1357,1.718,1376,2.664,1377,2.113,1404,1.953,1413,3.028,1414,2.328,1483,2.113,1489,2.328,1490,2.328,1491,4.012,1492,2.328,1493,2.328,1494,2.328,1495,2.328,1496,4.012,1497,2.328,1498,3.276,1520,1.953,1523,3.028,1524,2.328,1525,1.953,1531,3.028,1532,2.328,1547,2.328,1548,2.328,1599,2.113,1742,2.328,1744,3.276,1752,3.276,1753,2.113,1754,3.276,1862,2.328,1865,2.328,1866,2.328,1886,2.328,1887,3.609,1956,1.547,1958,2.113,1962,2.328,2037,2.328,2038,2.328,2039,2.328,2041,2.328,2042,2.328,2043,2.654,2044,2.654,2045,2.654,2046,4.115,2047,5.039,2048,2.654,2049,2.654,2050,4.115,2051,4.115,2052,4.115,2053,2.654,2054,2.654,2055,5.039,2056,2.654,2057,5.039,2058,5.039,2059,2.654,2060,2.654,2061,2.654,2062,5.039,2063,2.654,2064,4.115,2065,4.115,2066,2.654,2067,2.654,2068,2.654,2069,2.654,2070,2.654,2071,2.654]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":578,"title":{},"body":{"injectables/CacheConfigService.html":{},"classes/Constants.html":{},"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1955,"title":{},"body":{"dependencies.html":{}}}],["0.0.1",{"_index":2027,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1943,"title":{},"body":{"dependencies.html":{}}}],["0.1.2",{"_index":1937,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1906,"title":{},"body":{"dependencies.html":{}}}],["0.16.0",{"_index":1923,"title":{},"body":{"dependencies.html":{}}}],["0.24.0",{"_index":1901,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1905,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":1935,"title":{},"body":{"dependencies.html":{}}}],["0.8.0",{"_index":1899,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1864,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1876,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1879,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1883,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1880,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1881,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1860,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1867,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1868,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1859,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1872,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1861,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1875,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1878,"title":{},"body":{"coverage.html":{}}}],["00ff00",{"_index":516,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":532,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"guards/JwtAuthGuard.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{},"classes/PaginationParams.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1929,"title":{},"body":{"dependencies.html":{}}}],["1.0.5",{"_index":1920,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1892,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1926,"title":{},"body":{"dependencies.html":{}}}],["1.16.0",{"_index":1915,"title":{},"body":{"dependencies.html":{}}}],["1.27.1",{"_index":1907,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1924,"title":{},"body":{"dependencies.html":{}}}],["1.4.3",{"_index":1927,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1297,"title":{},"body":{"classes/Password.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"overview.html":{}}}],["10.0.2",{"_index":1908,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":1217,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/UserRepository.html":{}}}],["13",{"_index":2021,"title":{},"body":{"overview.html":{}}}],["16.3.0",{"_index":1910,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2023,"title":{},"body":{"overview.html":{}}}],["1mb",{"_index":141,"title":{},"body":{"controllers/AppController.html":{}}}],["2",{"_index":140,"title":{},"body":{"controllers/AppController.html":{}}}],["2.0.0",{"_index":1904,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1934,"title":{},"body":{"dependencies.html":{}}}],["2.1.5",{"_index":1917,"title":{},"body":{"dependencies.html":{}}}],["2.10.0",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["2.1415.0",{"_index":1900,"title":{},"body":{"dependencies.html":{}}}],["2.2.1",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1902,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1870,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":2025,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1945,"title":{},"body":{"dependencies.html":{}}}],["3.4.0",{"_index":1940,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":1903,"title":{},"body":{"dependencies.html":{}}}],["3.71.2",{"_index":1953,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1228,"title":{},"body":{"injectables/NotificationService.html":{}}}],["34",{"_index":2024,"title":{},"body":{"overview.html":{}}}],["4.1.1",{"_index":1898,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1916,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1950,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1912,"title":{},"body":{"dependencies.html":{}}}],["406",{"_index":1674,"title":{},"body":{"injectables/UserRepository.html":{}}}],["409",{"_index":1676,"title":{},"body":{"injectables/UserRepository.html":{}}}],["5",{"_index":521,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/PushToken.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":1922,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":1897,"title":{},"body":{"dependencies.html":{}}}],["5.5.2",{"_index":1952,"title":{},"body":{"dependencies.html":{}}}],["6.0.13",{"_index":1918,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1947,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1869,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":2022,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1946,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1004,"title":{},"body":{"injectables/MessageQueueService.html":{},"classes/PaginationParams.html":{}}}],["8.0.0",{"_index":1891,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1895,"title":{},"body":{"dependencies.html":{}}}],["8.2.5",{"_index":1896,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1913,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1894,"title":{},"body":{"dependencies.html":{}}}],["9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\d{1,14",{"_index":756,"title":{},"body":{"classes/Constants.html":{}}}],["9]+\\.)+[a",{"_index":750,"title":{},"body":{"classes/Constants.html":{}}}],["9]{1,3}\\.[0",{"_index":746,"title":{},"body":{"classes/Constants.html":{}}}],["9]{1,3}])|(([a",{"_index":747,"title":{},"body":{"classes/Constants.html":{}}}],["_",{"_index":442,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["_.pick",{"_index":455,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["_.pick(queryfiltersandoptions",{"_index":456,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["__dirname.replace('dist",{"_index":1608,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["_accesstoken",{"_index":856,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["_connection",{"_index":970,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["_id",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseModel.html":{},"guards/JwtAuthGuard.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["_json",{"_index":875,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["_json.picture",{"_index":881,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["_logingoogledata",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["_operationschannelwrapper",{"_index":971,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["_refreshtoken",{"_index":857,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["_reject",{"_index":986,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["_req",{"_index":942,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["_updatequerydef",{"_index":1195,"title":{},"body":{"injectables/NotificationService.html":{}}}],["_user.model",{"_index":1522,"title":{},"body":{"classes/Student.html":{},"classes/Teacher.html":{}}}],["abstract",{"_index":448,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/BaseModel.html":{}}}],["acceptsdiscriminator",{"_index":1360,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["access",{"_index":908,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["access_token",{"_index":962,"title":{},"body":{"classes/LoginGoogleDto.html":{}}}],["access_token=${accesstoken",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":1581,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["accesstoken",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginFacebookDto.html":{}}}],["account",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["accounts",{"_index":914,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["accountsid",{"_index":1334,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["acl",{"_index":1593,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["action",{"_index":498,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["actions",{"_index":497,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["addfields",{"_index":1445,"title":{},"body":{"injectables/RateRepository.html":{}}}],["addrate",{"_index":1704,"title":{},"body":{"controllers/UsersController.html":{}}}],["addrate(createratedto",{"_index":1711,"title":{},"body":{"controllers/UsersController.html":{}}}],["addtoset",{"_index":1244,"title":{},"body":{"injectables/NotificationService.html":{}}}],["admin",{"_index":1042,"title":{},"body":{"classes/Notification.html":{},"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin.credential.cert(adminconfig",{"_index":1210,"title":{},"body":{"injectables/NotificationService.html":{}}}],["admin.initializeapp",{"_index":1208,"title":{},"body":{"injectables/NotificationService.html":{}}}],["admin.messaging().send(message",{"_index":1233,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["admin/lib/messaging/messaging",{"_index":484,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["adminconfig",{"_index":1198,"title":{},"body":{"injectables/NotificationService.html":{}}}],["aggregate",{"_index":1919,"title":{},"body":{"dependencies.html":{}}}],["aggregation",{"_index":1670,"title":{},"body":{"injectables/UserRepository.html":{}}}],["aliases",{"_index":2036,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allof",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowpagination",{"_index":1266,"title":{},"body":{"classes/PaginationParams.html":{}}}],["amazing",{"_index":2000,"title":{},"body":{"index.html":{}}}],["amqp",{"_index":768,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{},"dependencies.html":{}}}],["amqp.amqpconnectionmanager",{"_index":780,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["amqp.channelwrapper",{"_index":783,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["amqp.connect",{"_index":781,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["amqp.connect(connectionurl",{"_index":988,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["amqplib",{"_index":771,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{},"dependencies.html":{}}}],["android",{"_index":474,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/PushToken.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["androidconfig",{"_index":479,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["any).config",{"_index":1561,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["any).isvalidpassword(logindto.password",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["any).isvalidpassword(oldpassword",{"_index":1819,"title":{},"body":{"injectables/UsersService.html":{}}}],["any).me",{"_index":1838,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["anyobject",{"_index":1193,"title":{},"body":{"injectables/NotificationService.html":{}}}],["api",{"_index":485,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["api_key",{"_index":1564,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["api_secret",{"_index":1566,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["apibearerauth",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":1742,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["apiconsumes",{"_index":1743,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiconsumes('multipart/form",{"_index":1766,"title":{},"body":{"controllers/UsersController.html":{}}}],["apimultifile",{"_index":1752,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apimultifile('photo",{"_index":1767,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiokresponsegeneral",{"_index":1744,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiokresponsegeneral(user",{"_index":1760,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":1551,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["apitags",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('notifications",{"_index":1089,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apitags('phone",{"_index":1319,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["apitags('upload",{"_index":1605,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["apitags('users",{"_index":1756,"title":{},"body":{"controllers/UsersController.html":{}}}],["apns",{"_index":475,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["apnsconfig",{"_index":480,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["app",{"_index":1207,"title":{},"body":{"injectables/NotificationService.html":{},"index.html":{}}}],["app.controller",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":71,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1976,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":153,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1355,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["appservice",{"_index":99,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["aps",{"_index":529,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["argumentshost",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/WebsocketsExceptionFilter.html":{}}}],["array",{"_index":435,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["arrayoffilters",{"_index":416,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["arrayofobjects",{"_index":1697,"title":{},"body":{"injectables/UserRepository.html":{}}}],["arrayofusersids",{"_index":1695,"title":{},"body":{"injectables/UserRepository.html":{}}}],["arrayofusersids.usersids",{"_index":1700,"title":{},"body":{"injectables/UserRepository.html":{}}}],["async",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{}}}],["auth",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":1835,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["auth/decorators/public.decorator",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/utils/password",{"_index":1362,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["auth_pass",{"_index":579,"title":{},"body":{"injectables/CacheConfigService.html":{},"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":212,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":847,"title":{},"body":{"injectables/GoogleOauthGuard.html":{}}}],["authguard('google",{"_index":849,"title":{},"body":{"injectables/GoogleOauthGuard.html":{}}}],["authmodule",{"_index":164,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2007,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":256,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":1336,"title":{},"body":{"modules/PhoneConfirmationModule.html":{},"guards/WsJwtGuard.html":{}}}],["authuser",{"_index":674,"title":{},"body":{"classes/ChatGateway.html":{},"controllers/NotificationController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auto",{"_index":1569,"title":{},"body":{"injectables/UploadCloudinary.html":{},"dependencies.html":{}}}],["autopopulate",{"_index":829,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/Rate.html":{},"dependencies.html":{}}}],["available",{"_index":2019,"title":{},"body":{"modules.html":{}}}],["await",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/cacheOperationsService.html":{}}}],["aws",{"_index":1576,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"dependencies.html":{}}}],["aws.s3",{"_index":1580,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["axios",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["backers",{"_index":2001,"title":{},"body":{"index.html":{}}}],["backup/image/upload/v1555206853/deross",{"_index":1018,"title":{},"body":{"classes/Notification.html":{}}}],["badrequestexception",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/NotificationService.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('code",{"_index":1356,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["badrequestexception('phone",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('provide",{"_index":131,"title":{},"body":{"controllers/AppController.html":{}}}],["baseabstractrepository",{"_index":393,"title":{"classes/BaseAbstractRepository.html":{}},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["baseabstractrepository:105",{"_index":1150,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:18",{"_index":1151,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:24",{"_index":1142,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:29",{"_index":1143,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:34",{"_index":1146,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:45",{"_index":1145,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:70",{"_index":1144,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:76",{"_index":1148,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:90",{"_index":1149,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["baseabstractrepository:97",{"_index":1147,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["basemessagewithtoken",{"_index":471,"title":{"interfaces/BaseMessageWithToken.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["basemessagewithtokentesting",{"_index":499,"title":{"interfaces/BaseMessageWithTokenTesting.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{}}}],["basemodel",{"_index":538,"title":{"classes/BaseModel.html":{}},"body":{"classes/BaseModel.html":{},"coverage.html":{}}}],["basewsexceptionfilter",{"_index":1826,"title":{},"body":{"classes/WebsocketsExceptionFilter.html":{}}}],["bcryptjs",{"_index":1295,"title":{},"body":{"classes/Password.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"dependencies.html":{}}}],["binary",{"_index":1548,"title":{},"body":{"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["bio",{"_index":1526,"title":{},"body":{"classes/Teacher.html":{}}}],["body",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/CreateNotificationDto.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"interfaces/SendNotificationMethod.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"controllers/UsersController.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":493,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"interfaces/PushToken.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2017,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2015,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1589,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["bucketname",{"_index":1613,"title":{},"body":{"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{}}}],["buffer.from(json.stringify(data",{"_index":1002,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["building",{"_index":1972,"title":{},"body":{"index.html":{}}}],["cache",{"_index":569,"title":{},"body":{"injectables/CacheConfigService.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"dependencies.html":{}}}],["cache/cache.module",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["cache/cacheconfigservice",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["cache_manager",{"_index":1852,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["cacheconfigservice",{"_index":192,"title":{"injectables/CacheConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CacheConfigService.html":{},"modules/cacheOperationsModule.html":{},"coverage.html":{}}}],["cacheinterceptor",{"_index":1735,"title":{},"body":{"controllers/UsersController.html":{}}}],["cachekey",{"_index":1736,"title":{},"body":{"controllers/UsersController.html":{}}}],["cachekey(constants.get_posts_cache_key",{"_index":1759,"title":{},"body":{"controllers/UsersController.html":{}}}],["cachemanager",{"_index":1849,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["cachemodule",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{}}}],["cachemodule.registerasync",{"_index":1843,"title":{},"body":{"modules/cacheOperationsModule.html":{}}}],["cachemoduleoptions",{"_index":566,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["cacheoperationsmodule",{"_index":194,"title":{"modules/cacheOperationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"modules.html":{},"overview.html":{}}}],["cacheoperationsservice",{"_index":1808,"title":{"injectables/cacheOperationsService.html":{}},"body":{"injectables/UsersService.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cacheoptionsfactory",{"_index":567,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["call",{"_index":700,"title":{},"body":{"classes/ChatGateway.html":{}}}],["callback(new",{"_index":130,"title":{},"body":{"controllers/AppController.html":{}}}],["callback(null",{"_index":135,"title":{},"body":{"controllers/AppController.html":{}}}],["canactivate",{"_index":888,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["canactivate(context",{"_index":892,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["capture",{"_index":620,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"classes/WebsocketsExceptionFilter.html":{}}}],["catch(exception",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/WebsocketsExceptionFilter.html":{}}}],["cb",{"_index":943,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/UploadDigitalOceanSpace.html":{}}}],["cb(null",{"_index":945,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["change",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"guards/JwtAuthGuard.html":{}}}],["changed",{"_index":1392,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["changepassword",{"_index":1705,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(undefined",{"_index":1714,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":581,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changestream",{"_index":440,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/ChangeStreamsService.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["changestream.on('change",{"_index":635,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["changestreamoptions",{"_index":436,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["changestreamresumetoken",{"_index":623,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["changestreams",{"_index":601,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["changestreamsmodule",{"_index":197,"title":{"modules/ChangeStreamsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChangeStreamsModule.html":{},"modules.html":{},"overview.html":{}}}],["changestreamsservice",{"_index":595,"title":{"injectables/ChangeStreamsService.html":{}},"body":{"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"coverage.html":{},"overview.html":{}}}],["channel",{"_index":770,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{},"injectables/PhoneConfirmationService.html":{}}}],["channel.ack(msg",{"_index":801,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["channel.assertqueue(constants.messagequeues.test1",{"_index":992,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["channel.consume(constants.messagequeues.test1",{"_index":794,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["channelid",{"_index":524,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["chat",{"_index":684,"title":{},"body":{"classes/ChatGateway.html":{}}}],["chat.gateway",{"_index":728,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["chatgateway",{"_index":644,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":165,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["checkcodetoreset",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkcodetoreset(undefined",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkcodetoresetdto",{"_index":223,"title":{"classes/CheckCodeToResetDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CheckCodeToResetDto.html":{},"coverage.html":{}}}],["chuncklength",{"_index":1227,"title":{},"body":{"injectables/NotificationService.html":{}}}],["chunk",{"_index":1691,"title":{},"body":{"injectables/UserRepository.html":{}}}],["chunk[0",{"_index":1701,"title":{},"body":{"injectables/UserRepository.html":{}}}],["chunkcount",{"_index":1215,"title":{},"body":{"injectables/NotificationService.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/BaseAbstractRepository.html":{},"classes/BaseModel.html":{},"classes/ChangePasswordDto.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"classes/Notification.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"classes/Rate.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"classes/subscribeNotificationDto.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{},"dependencies.html":{},"classes/subscribeNotificationDto.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseAbstractRepository.html":{},"classes/BaseModel.html":{},"classes/ChangePasswordDto.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"classes/Notification.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"classes/Rate.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"overview.html":{},"classes/subscribeNotificationDto.html":{}}}],["classtointercept",{"_index":1966,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clearcache",{"_index":1846,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["clearcache(key",{"_index":1850,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["clickaction",{"_index":522,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":658,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["client.data.user",{"_index":695,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.disconnect",{"_index":689,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.handshake.headers.authorization",{"_index":687,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["client.handshake.headers.authorization.split",{"_index":692,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.join(`${client.handshake.headers.authorization",{"_index":690,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.join(`user_${user._id",{"_index":694,"title":{},"body":{"classes/ChatGateway.html":{}}}],["clientemail",{"_index":1204,"title":{},"body":{"injectables/NotificationService.html":{}}}],["clientid",{"_index":868,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["clientsecret",{"_index":870,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["closed",{"_index":1009,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["cloud_name",{"_index":1562,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["cloudinary",{"_index":1560,"title":{},"body":{"injectables/UploadCloudinary.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["cloudinary.ts",{"_index":1553,"title":{},"body":{"injectables/UploadCloudinary.html":{},"coverage.html":{}}}],["cloudinary.ts:11",{"_index":1555,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["cloudinary.ts:13",{"_index":1556,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["cloudinarystorage",{"_index":1559,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["cluster_appmodule",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cacheoperationsmodule",{"_index":1839,"title":{},"body":{"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["cluster_cacheoperationsmodule_exports",{"_index":1841,"title":{},"body":{"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["cluster_cacheoperationsmodule_providers",{"_index":1840,"title":{},"body":{"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["cluster_changestreamsmodule",{"_index":592,"title":{},"body":{"modules/ChangeStreamsModule.html":{},"overview.html":{}}}],["cluster_changestreamsmodule_imports",{"_index":593,"title":{},"body":{"modules/ChangeStreamsModule.html":{}}}],["cluster_changestreamsmodule_providers",{"_index":594,"title":{},"body":{"modules/ChangeStreamsModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":724,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_imports",{"_index":725,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_messagequeuemodule",{"_index":965,"title":{},"body":{"modules/MessageQueueModule.html":{},"overview.html":{}}}],["cluster_messagequeuemodule_exports",{"_index":966,"title":{},"body":{"modules/MessageQueueModule.html":{},"overview.html":{}}}],["cluster_messagequeuemodule_providers",{"_index":967,"title":{},"body":{"modules/MessageQueueModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":1123,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_exports",{"_index":1124,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_imports",{"_index":1125,"title":{},"body":{"modules/NotificationModule.html":{}}}],["cluster_notificationmodule_providers",{"_index":1126,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_phoneconfirmationmodule",{"_index":1324,"title":{},"body":{"modules/PhoneConfirmationModule.html":{},"overview.html":{}}}],["cluster_phoneconfirmationmodule_exports",{"_index":1326,"title":{},"body":{"modules/PhoneConfirmationModule.html":{},"overview.html":{}}}],["cluster_phoneconfirmationmodule_imports",{"_index":1325,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["cluster_phoneconfirmationmodule_providers",{"_index":1327,"title":{},"body":{"modules/PhoneConfirmationModule.html":{},"overview.html":{}}}],["cluster_ratemodule",{"_index":1420,"title":{},"body":{"modules/RateModule.html":{},"overview.html":{}}}],["cluster_ratemodule_exports",{"_index":1422,"title":{},"body":{"modules/RateModule.html":{},"overview.html":{}}}],["cluster_ratemodule_providers",{"_index":1421,"title":{},"body":{"modules/RateModule.html":{},"overview.html":{}}}],["cluster_uploadfilesmodule",{"_index":1616,"title":{},"body":{"modules/UploadFilesModule.html":{},"overview.html":{}}}],["cluster_uploadfilesmodule_providers",{"_index":1617,"title":{},"body":{"modules/UploadFilesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1781,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1782,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1783,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"classes/CheckCodeToResetDto.html":{},"injectables/PhoneConfirmationService.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyPhoneDto.html":{},"coverage.html":{}}}],["color",{"_index":515,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["colorful",{"_index":1100,"title":{},"body":{"controllers/NotificationController.html":{}}}],["come",{"_index":1117,"title":{},"body":{"controllers/NotificationController.html":{}}}],["comment",{"_index":1036,"title":{},"body":{"classes/Notification.html":{}}}],["compare",{"_index":1294,"title":{},"body":{"classes/Password.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["compare(password",{"_index":1401,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["compare(password.tostring",{"_index":1298,"title":{},"body":{"classes/Password.html":{}}}],["configmodule",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{}}}],["configmodule.forroot",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{}}}],["configservice",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheConfigService.html":{},"modules/ChatModule.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/NotificationService.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{}}}],["configservice.get('jwt_secret",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["configservice.get('twilio_account_sid",{"_index":1335,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["configservice.get('twilio_auth_token",{"_index":1337,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["configservice.get('uploaded_files_destination",{"_index":938,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["configurationhandler",{"_index":1160,"title":{},"body":{"injectables/NotificationService.html":{}}}],["confirmation",{"_index":1302,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["confirmation.controller",{"_index":1329,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["confirmation.controller.ts",{"_index":1301,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"coverage.html":{}}}],["confirmation.controller.ts:36",{"_index":1307,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["confirmation.controller.ts:47",{"_index":1311,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["confirmation.dto",{"_index":1314,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["confirmation.dto.ts",{"_index":812,"title":{},"body":{"classes/CreatePhoneConfirmationDto.html":{},"coverage.html":{}}}],["confirmation.dto.ts:7",{"_index":813,"title":{},"body":{"classes/CreatePhoneConfirmationDto.html":{}}}],["confirmation.module",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["confirmation.module.ts",{"_index":1328,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["confirmation.service",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{}}}],["confirmation.service.ts",{"_index":1338,"title":{},"body":{"injectables/PhoneConfirmationService.html":{},"coverage.html":{}}}],["confirmation.service.ts:14",{"_index":1342,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["confirmation.service.ts:30",{"_index":1343,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["confirmation.service.ts:8",{"_index":1341,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["confirmation/dto/create",{"_index":811,"title":{},"body":{"classes/CreatePhoneConfirmationDto.html":{},"coverage.html":{}}}],["confirmation/dto/verify",{"_index":1821,"title":{},"body":{"classes/VerifyPhoneDto.html":{},"coverage.html":{}}}],["confirmation/phone",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"coverage.html":{}}}],["connected",{"_index":686,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["connectedsocket",{"_index":667,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connection",{"_index":769,"title":{},"body":{"injectables/ConsumerService.html":{},"modules/DatabaseModule.html":{},"injectables/MessageQueueService.html":{},"dependencies.html":{}}}],["connection.createchannel",{"_index":784,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["connection.on('connect",{"_index":788,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["connection.plugin(require('mongoose",{"_index":828,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connectionfactory",{"_index":827,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connectionurl",{"_index":983,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["console.log",{"_index":636,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["console.log('\\x1b[32m%s\\x1b[0m",{"_index":995,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["console.log('disconnected",{"_index":706,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log('error",{"_index":641,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["console.log('exception",{"_index":1828,"title":{},"body":{"classes/WebsocketsExceptionFilter.html":{}}}],["console.log('fetch",{"_index":1452,"title":{},"body":{"injectables/RateRepository.html":{}}}],["console.log('from",{"_index":612,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"guards/WsJwtGuard.html":{}}}],["console.log('here",{"_index":779,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["console.log('no",{"_index":688,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log('polling",{"_index":633,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["console.log('successfully",{"_index":1397,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["console.log(`using",{"_index":628,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["console.log(change",{"_index":637,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["console.log(data",{"_index":711,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log(err",{"_index":643,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{}}}],["console.log(error",{"_index":1350,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["console.log(exception",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["console.log(file",{"_index":944,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["console.log(msgbody",{"_index":800,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["console.log(test",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"injectables/ConsumerService.html":{}}}],["console.log(user",{"_index":693,"title":{},"body":{"classes/ChatGateway.html":{}}}],["const",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":736,"title":{"classes/Constants.html":{}},"body":{"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/LoginDto.html":{},"injectables/MessageQueueService.html":{},"interfaces/PushToken.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/VerifyPhoneDto.html":{},"coverage.html":{}}}],["constants.email_regx",{"_index":1369,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["constants.phone_regx",{"_index":1370,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["constructor",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{}}}],["constructor(@inject(cache_manager",{"_index":1853,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1678,"title":{},"body":{"injectables/UserRepository.html":{}}}],["constructor(authservice",{"_index":652,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(cachemanager",{"_index":1847,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["constructor(configservice",{"_index":563,"title":{},"body":{"injectables/CacheConfigService.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["constructor(model",{"_index":407,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["constructor(notificationmodel",{"_index":1136,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["constructor(notificationrepositary",{"_index":1167,"title":{},"body":{"injectables/NotificationService.html":{}}}],["constructor(private",{"_index":573,"title":{},"body":{"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"controllers/NotificationController.html":{},"controllers/RateController.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(ratemodel",{"_index":1432,"title":{},"body":{"injectables/RateRepository.html":{}}}],["constructor(raterepository",{"_index":1455,"title":{},"body":{"injectables/RateService.html":{}}}],["constructor(reflector",{"_index":889,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(twilioclient",{"_index":1339,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["constructor(userid",{"_index":1647,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(usermodel",{"_index":1656,"title":{},"body":{"injectables/UserRepository.html":{}}}],["constructor(userrepository",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":763,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["constructor(usersservice",{"_index":852,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["consume",{"_index":776,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["consumer",{"_index":790,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["consumer.service.ts",{"_index":761,"title":{},"body":{"injectables/ConsumerService.html":{},"coverage.html":{}}}],["consumer.service.ts:10",{"_index":766,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["consumer.service.ts:14",{"_index":764,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["consumer.service.ts:19",{"_index":767,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["consumerservice",{"_index":758,"title":{"injectables/ConsumerService.html":{}},"body":{"injectables/ConsumerService.html":{},"coverage.html":{},"overview.html":{}}}],["content",{"_index":531,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1591,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["context",{"_index":895,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["context.gethandler",{"_index":902,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":903,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["context.switchtows().getclient",{"_index":1837,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["controller",{"_index":70,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/RateController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/RateController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('notifications",{"_index":1090,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('phone",{"_index":1320,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["controller('rate",{"_index":1419,"title":{},"body":{"controllers/RateController.html":{}}}],["controller('upload",{"_index":1606,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["controller('users",{"_index":1757,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cors",{"_index":681,"title":{},"body":{"classes/ChatGateway.html":{}}}],["count",{"_index":1245,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["count[0].userscount",{"_index":1690,"title":{},"body":{"injectables/UserRepository.html":{}}}],["countnotification",{"_index":1051,"title":{},"body":{"controllers/NotificationController.html":{}}}],["countnotification(@authuser",{"_index":1111,"title":{},"body":{"controllers/NotificationController.html":{}}}],["countnotification(me",{"_index":1057,"title":{},"body":{"controllers/NotificationController.html":{}}}],["countnotifications",{"_index":1135,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["countnotifications(user",{"_index":1139,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["coverage",{"_index":1855,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":397,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"injectables/UserRepository.html":{}}}],["create(createratedto",{"_index":1458,"title":{},"body":{"injectables/RateService.html":{}}}],["create(data",{"_index":409,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["createadapter",{"_index":1490,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["createcacheoptions",{"_index":562,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["createdat",{"_index":540,"title":{},"body":{"classes/BaseModel.html":{},"injectables/NotificationService.html":{},"injectables/RateService.html":{}}}],["createdoc",{"_index":398,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["createdoc(data",{"_index":411,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["createioserver",{"_index":1485,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createioserver(port",{"_index":1486,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createmulteroptions",{"_index":1554,"title":{},"body":{"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{}}}],["createnotificationdto",{"_index":802,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createphoneconfirmationdto",{"_index":810,"title":{"classes/CreatePhoneConfirmationDto.html":{}},"body":{"classes/CreatePhoneConfirmationDto.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"coverage.html":{}}}],["createphoneconfirmationdto.phone",{"_index":1348,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["createquery",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/GoogleOauthStrategy.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["createratedto",{"_index":814,"title":{"classes/CreateRateDto.html":{}},"body":{"classes/CreateRateDto.html":{},"injectables/RateService.html":{},"classes/UpdateRateDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuser",{"_index":1794,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdata",{"_index":1798,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdata",{"_index":1800,"title":{},"body":{"injectables/UsersService.html":{}}}],["credential",{"_index":1209,"title":{},"body":{"injectables/NotificationService.html":{}}}],["credentials",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto",{"_index":1574,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["crypto.pseudorandombytes(8",{"_index":1594,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["cs_token_key",{"_index":622,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["ctx",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":1668,"title":{},"body":{"injectables/UserRepository.html":{}}}],["custumize",{"_index":501,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["data",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"interfaces/SendNotificationMethod.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["database.module",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":166,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseurl",{"_index":1211,"title":{},"body":{"injectables/NotificationService.html":{}}}],["date",{"_index":542,"title":{},"body":{"classes/BaseModel.html":{}}}],["date().gettime",{"_index":127,"title":{},"body":{"controllers/AppController.html":{}}}],["date.now",{"_index":946,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UploadFilesController.html":{}}}],["de8bjn9lhl6au0zubvnjzn:apa91bhdogd00by4nlft7lkm5xjkjdopj2weick82z9moux0mcr81hbe4ceshae4i2zhpcaaphk816lorvfe6orqwdl27ngsmvstdu5gv6lf0ziebff7qscs5wmgtn_e9ry0db35ht2n",{"_index":1122,"title":{},"body":{"controllers/NotificationController.html":{}}}],["deactivated",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["decoded",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["decoded.userid",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["decorators",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryUser.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"controllers/PhoneConfirmationController.html":{},"classes/Rate.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Teacher.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadFilesController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/VerifyPhoneDto.html":{},"classes/subscribeNotificationDto.html":{}}}],["decorators/public.decorator",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{}}}],["default",{"_index":420,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/Notification.html":{},"injectables/NotificationRepository.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"classes/subscribeNotificationDto.html":{}}}],["definition",{"_index":1669,"title":{},"body":{"injectables/UserRepository.html":{}}}],["delete",{"_index":555,"title":{},"body":{"classes/BaseModel.html":{},"controllers/PhoneConfirmationController.html":{},"interfaces/PushToken.html":{},"controllers/UploadFilesController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["deleteone",{"_index":399,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["deleteone(filterquery",{"_index":413,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["denominator",{"_index":1449,"title":{},"body":{"injectables/RateRepository.html":{}}}],["dependencies",{"_index":155,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":525,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/Password.html":{},"index.html":{},"properties.html":{}}}],["descriptor",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destination",{"_index":939,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["development",{"_index":1983,"title":{},"body":{"index.html":{}}}],["devicedata.devicetoken",{"_index":1226,"title":{},"body":{"injectables/NotificationService.html":{}}}],["devices",{"_index":1177,"title":{},"body":{"injectables/NotificationService.html":{}}}],["devices.map((devicedata",{"_index":1224,"title":{},"body":{"injectables/NotificationService.html":{}}}],["devicetoken",{"_index":1239,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["devicetype",{"_index":1185,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"classes/subscribeNotificationDto.html":{}}}],["devicetype.web",{"_index":2030,"title":{},"body":{"classes/subscribeNotificationDto.html":{}}}],["dir",{"_index":625,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["disabled",{"_index":916,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["disconnected",{"_index":999,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["discriminatorkey",{"_index":1366,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["discriminatoroptions",{"_index":1358,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["discriminators",{"_index":1789,"title":{},"body":{"modules/UsersModule.html":{}}}],["diskstorage",{"_index":931,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["displayname",{"_index":873,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["divide",{"_index":1451,"title":{},"body":{"injectables/RateRepository.html":{}}}],["doc",{"_index":452,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["doc.__v",{"_index":556,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["doc._id",{"_index":557,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["doc.password",{"_index":1367,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["doc.set(updatequery).save",{"_index":466,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["docs",{"_index":459,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"controllers/NotificationController.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":444,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/Notification.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{}}}],["documentation",{"_index":1856,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":859,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"controllers/NotificationController.html":{}}}],["done(null",{"_index":884,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["dospace.ts",{"_index":1571,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"coverage.html":{}}}],["dospace.ts:12",{"_index":1572,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["dospace.ts:14",{"_index":1573,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["dto/check",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":1082,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateService.html":{}}}],["dto/filterqueryoptions.dto",{"_index":1748,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login.dto",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register.dto",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/reset",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/subscribe",{"_index":1084,"title":{},"body":{"controllers/NotificationController.html":{}}}],["dto/update",{"_index":1739,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/verify",{"_index":1315,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["durable",{"_index":993,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["e2e",{"_index":1991,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1973,"title":{},"body":{"index.html":{}}}],["ejson",{"_index":609,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["ejson.parse(token",{"_index":632,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["ejson.stringify(change._id",{"_index":639,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["email",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleOauthStrategy.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["email_regx",{"_index":741,"title":{},"body":{"classes/Constants.html":{}}}],["emails",{"_index":874,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["emails[0].value",{"_index":879,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["emit",{"_index":718,"title":{},"body":{"classes/ChatGateway.html":{}}}],["emit('test",{"_index":721,"title":{},"body":{"classes/ChatGateway.html":{}}}],["enabled",{"_index":882,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"controllers/PhoneConfirmationController.html":{},"interfaces/PushToken.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["encodingdataforalldevices",{"_index":504,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["encodingdataforalldevices(message",{"_index":1225,"title":{},"body":{"injectables/NotificationService.html":{}}}],["end",{"_index":128,"title":{},"body":{"controllers/AppController.html":{}}}],["endpoint",{"_index":1585,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["enhance",{"_index":1671,"title":{},"body":{"injectables/UserRepository.html":{}}}],["enum",{"_index":1026,"title":{},"body":{"classes/Notification.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1957,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{}}}],["error",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["errormessage",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errorobject",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errortype",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["escaperegexp",{"_index":836,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{}}}],["event",{"_index":714,"title":{},"body":{"classes/ChatGateway.html":{}}}],["exam",{"_index":1040,"title":{},"body":{"classes/Notification.html":{}}}],["exception",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ChatGateway.html":{},"classes/WebsocketsExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:14",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.name",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exchangename",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"injectables/MessageQueueService.html":{}}}],["executioncontext",{"_index":893,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":1687,"title":{},"body":{"injectables/UserRepository.html":{}}}],["export",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{}}}],["exports",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["express",{"_index":925,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/RequestWithUser.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["express/multer/interfaces/multer",{"_index":929,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["extends",{"_index":534,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"classes/RedisIoAdapter.html":{},"interfaces/RequestWithUser.html":{},"interfaces/SendNotificationMethod.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"classes/WebsocketsExceptionFilter.html":{},"interfaces/queryParamsWithId.html":{}}}],["extjson",{"_index":610,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"dependencies.html":{}}}],["extramodel",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extraoptions",{"_index":417,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["facebook",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebook.dto",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["facebook.dto.ts",{"_index":959,"title":{},"body":{"classes/LoginFacebookDto.html":{},"coverage.html":{}}}],["facebook.dto.ts:5",{"_index":960,"title":{},"body":{"classes/LoginFacebookDto.html":{}}}],["facebookid",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["facebookurl",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["facet",{"_index":1694,"title":{},"body":{"injectables/UserRepository.html":{}}}],["false",{"_index":134,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"guards/JwtAuthGuard.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"classes/Password.html":{},"interfaces/PushToken.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["fcmoptions",{"_index":476,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["feedback",{"_index":817,"title":{},"body":{"classes/CreateRateDto.html":{},"classes/Rate.html":{}}}],["fetchall",{"_index":1052,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["fetchall(queryparams",{"_index":1060,"title":{},"body":{"controllers/NotificationController.html":{}}}],["fetchall(user",{"_index":1171,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fetchallrates",{"_index":1454,"title":{},"body":{"injectables/RateService.html":{}}}],["fetchallrates(paginationparams",{"_index":1460,"title":{},"body":{"injectables/RateService.html":{}}}],["fetchalltokenschunks",{"_index":1652,"title":{},"body":{"injectables/UserRepository.html":{}}}],["fetchalltokenschunks(filter",{"_index":1659,"title":{},"body":{"injectables/UserRepository.html":{}}}],["fetchcount",{"_index":1161,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fetchcount(user",{"_index":1173,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fetchcounts",{"_index":1653,"title":{},"body":{"injectables/UserRepository.html":{}}}],["fetchcounts(filter",{"_index":1662,"title":{},"body":{"injectables/UserRepository.html":{}}}],["fetchrates",{"_index":1431,"title":{},"body":{"injectables/RateRepository.html":{}}}],["fetchrates(ratedobjectid",{"_index":1435,"title":{},"body":{"injectables/RateRepository.html":{}}}],["fetchshouldsend",{"_index":1654,"title":{},"body":{"injectables/UserRepository.html":{}}}],["fetchuserbyid",{"_index":1706,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetchuserbyid(@param",{"_index":1777,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetchuserbyid(undefined",{"_index":1717,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetchusersbyfilter",{"_index":1655,"title":{},"body":{"injectables/UserRepository.html":{}}}],["fetchusersbyfilter(filter",{"_index":1665,"title":{},"body":{"injectables/UserRepository.html":{}}}],["fieldname",{"_index":921,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{}}}],["file.mimetype.includes('image",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["file.originalname",{"_index":947,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/UploadDigitalOceanSpace.html":{}}}],["filefieldsinterceptor",{"_index":1737,"title":{},"body":{"controllers/UsersController.html":{}}}],["filefilter",{"_index":922,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["fileinterceptor",{"_index":923,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["fileinterceptor(options.fieldname",{"_index":951,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filename",{"_index":941,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"miscellaneous/variables.html":{}}}],["filepath",{"_index":1607,"title":{},"body":{"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{}}}],["files",{"_index":1599,"title":{},"body":{"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":1619,"title":{},"body":{"modules/UploadFilesModule.html":{}}}],["files.controller.ts",{"_index":1598,"title":{},"body":{"controllers/UploadFilesController.html":{},"coverage.html":{}}}],["files.controller.ts:15",{"_index":1602,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["files.decorator",{"_index":1755,"title":{},"body":{"controllers/UsersController.html":{}}}],["files.decorator.ts",{"_index":1887,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["files.module",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["files.module.ts",{"_index":1618,"title":{},"body":{"modules/UploadFilesModule.html":{}}}],["files.photo",{"_index":1768,"title":{},"body":{"controllers/UsersController.html":{}}}],["files.photo[0].secure_url",{"_index":1770,"title":{},"body":{"controllers/UsersController.html":{}}}],["files.service",{"_index":1604,"title":{},"body":{"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{}}}],["files.service.ts",{"_index":1621,"title":{},"body":{"injectables/UploadFilesService.html":{},"coverage.html":{}}}],["files.service.ts:18",{"_index":1624,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["files.service.ts:7",{"_index":1622,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["files/upload",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"coverage.html":{}}}],["filesdestination",{"_index":937,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesdestination}${options.path",{"_index":940,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["filesize",{"_index":138,"title":{},"body":{"controllers/AppController.html":{}}}],["filter",{"_index":1181,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["filterquery",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filterquerynotification",{"_index":841,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{}}}],["filterqueryoptionsnotification",{"_index":843,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{}}}],["filterqueryoptionsuser",{"_index":832,"title":{"classes/FilterQueryOptionsUser.html":{}},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filterqueryuser",{"_index":838,"title":{"classes/FilterQueryUser.html":{}},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"coverage.html":{}}}],["filters",{"_index":454,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["filters/websocketsexception.filter",{"_index":680,"title":{},"body":{"classes/ChatGateway.html":{}}}],["final",{"_index":1450,"title":{},"body":{"injectables/RateRepository.html":{}}}],["find(filter",{"_index":1681,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findall",{"_index":1707,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(queryfiltersandoptions",{"_index":1720,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findallwithpaginationoption",{"_index":400,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["findallwithpaginationoption(queryfiltersandoptions",{"_index":415,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["findkey",{"_index":1190,"title":{},"body":{"injectables/NotificationService.html":{}}}],["findone",{"_index":401,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["findone(filter",{"_index":1802,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(filterquery",{"_index":423,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["firebase",{"_index":483,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"dependencies.html":{},"interfaces/queryParamsWithId.html":{}}}],["flags",{"_index":1673,"title":{},"body":{"injectables/UserRepository.html":{}}}],["foldername",{"_index":1611,"title":{},"body":{"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{}}}],["format",{"_index":1547,"title":{},"body":{"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["forwardref",{"_index":1425,"title":{},"body":{"modules/RateModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":465,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/UserNotFoundException.html":{}}}],["framework",{"_index":1971,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1625,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["fs.readfilesync(filepath",{"_index":1627,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["fulldocument.name",{"_index":617,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["function",{"_index":786,"title":{},"body":{"injectables/ConsumerService.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"interfaces/PushToken.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["functions",{"_index":1959,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/count",{"_index":1058,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('/fetchall",{"_index":1061,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('/rates/:id",{"_index":1724,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/send",{"_index":1091,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get(':id",{"_index":1776,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":1726,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('publisher",{"_index":143,"title":{},"body":{"controllers/AppController.html":{}}}],["get_posts_cache",{"_index":753,"title":{},"body":{"classes/Constants.html":{}}}],["get_posts_cache_key",{"_index":742,"title":{},"body":{"classes/Constants.html":{}}}],["getallrates",{"_index":1708,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallrates(undefined",{"_index":1723,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":1709,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprofile(me",{"_index":1804,"title":{},"body":{"injectables/UsersService.html":{}}}],["getschemapath(extramodel",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(model",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(paginateddto",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getter",{"_index":558,"title":{},"body":{"classes/BaseModel.html":{}}}],["getters",{"_index":552,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["getting",{"_index":1967,"title":{"index.html":{}},"body":{}}],["googel",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["google",{"_index":864,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"dependencies.html":{}}}],["google.dto",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["google.dto.ts",{"_index":961,"title":{},"body":{"classes/LoginGoogleDto.html":{},"coverage.html":{}}}],["google.dto.ts:5",{"_index":963,"title":{},"body":{"classes/LoginGoogleDto.html":{}}}],["googleid",{"_index":877,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["googleoauthguard",{"_index":267,"title":{"injectables/GoogleOauthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["googleoauthstrategy",{"_index":317,"title":{"injectables/GoogleOauthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleOauthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":2018,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1909,"title":{},"body":{"dependencies.html":{}}}],["group",{"_index":1443,"title":{},"body":{"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["grow",{"_index":1996,"title":{},"body":{"index.html":{}}}],["guard",{"_index":885,"title":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"guards/WsJwtGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":886,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"guards/WsJwtGuard.html":{},"overview.html":{}}}],["guards/googletoken.guard",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/jwtauth.guard",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/roles.guard",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/ws",{"_index":677,"title":{},"body":{"classes/ChatGateway.html":{}}}],["gurad",{"_index":1836,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["handle",{"_index":716,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection",{"_index":649,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(@connectedsocket",{"_index":685,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(client",{"_index":655,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handledisconnect",{"_index":650,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handledisconnect(@connectedsocket",{"_index":705,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handledisconnect(client",{"_index":659,"title":{},"body":{"classes/ChatGateway.html":{}}}],["hash",{"_index":1279,"title":{},"body":{"classes/Password.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["hash(password",{"_index":1281,"title":{},"body":{"classes/Password.html":{}}}],["hash(password.tostring",{"_index":1296,"title":{},"body":{"classes/Password.html":{}}}],["hashed",{"_index":1291,"title":{},"body":{"classes/Password.html":{}}}],["hashed_password",{"_index":1286,"title":{},"body":{"classes/Password.html":{}}}],["hashed_password.tostring",{"_index":1299,"title":{},"body":{"classes/Password.html":{}}}],["hashes",{"_index":1283,"title":{},"body":{"classes/Password.html":{}}}],["hasnextpage",{"_index":1249,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["hasprevpage",{"_index":1250,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["headers",{"_index":526,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["healthstatus",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":210,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1911,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":696,"title":{},"body":{"classes/ChatGateway.html":{},"index.html":{}}}],["hexa",{"_index":519,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["hi",{"_index":1105,"title":{},"body":{"controllers/NotificationController.html":{}}}],["hi2",{"_index":1107,"title":{},"body":{"controllers/NotificationController.html":{}}}],["hii",{"_index":1119,"title":{},"body":{"controllers/NotificationController.html":{}}}],["host",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/CacheConfigService.html":{},"classes/ChatGateway.html":{},"classes/RedisIoAdapter.html":{},"classes/WebsocketsExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hse",{"_index":1612,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["http",{"_index":1738,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok)@post('/change",{"_index":1715,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["https://${bucketname}.fra1.digitaloceanspaces.com/${foldername}/${filename",{"_index":1629,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["https://firebase.google.com/docs/cloud",{"_index":502,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["https://media.istockphoto.com/photos/picturesque",{"_index":1095,"title":{},"body":{"controllers/NotificationController.html":{}}}],["https://nestjs.com",{"_index":2011,"title":{},"body":{"index.html":{}}}],["https://res.cloudinary.com/derossy",{"_index":1017,"title":{},"body":{"classes/Notification.html":{}}}],["https://www.google.com/?hl=ar",{"_index":1108,"title":{},"body":{"controllers/NotificationController.html":{}}}],["https://xxxxx.firebaseio.com",{"_index":1212,"title":{},"body":{"injectables/NotificationService.html":{}}}],["httpstatus",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.unauthorized",{"_index":909,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["httpstatus.unprocessable_entity",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["icon",{"_index":491,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/GoogleOauthStrategy.html":{},"classes/ParamsWithId.html":{},"interfaces/PushToken.html":{},"injectables/RateService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"controllers/UsersController.html":{}}}],["id1093110112?k=20&m=1093110112&s=612x612&w=0&h=3ohkopvzosjgwthqmghshfonztvmexzx2r91jnnstby",{"_index":1104,"title":{},"body":{"controllers/NotificationController.html":{}}}],["identifier",{"_index":1857,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":133,"title":{},"body":{"controllers/AppController.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/CreateNotificationDto.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["imageurl",{"_index":490,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["imessagequeueservice",{"_index":774,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationService.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"guards/WsJwtGuard.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{}}}],["imports",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{}}}],["imports:[configmodule",{"_index":1620,"title":{},"body":{"modules/UploadFilesModule.html":{}}}],["increment",{"_index":1921,"title":{},"body":{"dependencies.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{}}}],["inherited",{"_index":1141,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["initialize",{"_index":1206,"title":{},"body":{"injectables/NotificationService.html":{}}}],["initiator",{"_index":1011,"title":{},"body":{"classes/Notification.html":{}}}],["inject",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/PhoneConfirmationModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{}}}],["inject(request",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":206,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"injectables/cacheOperationsService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{}}}],["injectables",{"_index":207,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"injectables/cacheOperationsService.html":{},"overview.html":{}}}],["injectmodel",{"_index":1152,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["injectmodel(notification.name",{"_index":1154,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["injectmodel(rate.name",{"_index":1438,"title":{},"body":{"injectables/RateRepository.html":{}}}],["injecttwilio",{"_index":1344,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["inserts",{"_index":621,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["installation",{"_index":1980,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1982,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["instead",{"_index":699,"title":{},"body":{"classes/ChatGateway.html":{}}}],["intercept(...args",{"_index":952,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["interceptor",{"_index":936,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["interface",{"_index":470,"title":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"interfaces/PushToken.html":{},"interfaces/RequestWithUser.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/TokenPayload.html":{},"interfaces/queryParamsWithId.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"interfaces/PushToken.html":{},"interfaces/RequestWithUser.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/TokenPayload.html":{},"classes/User.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{}}}],["interfaces",{"_index":472,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"interfaces/PushToken.html":{},"interfaces/RequestWithUser.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/TokenPayload.html":{},"overview.html":{},"interfaces/queryParamsWithId.html":{}}}],["interfaces/requestwithiuser.interface",{"_index":865,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{}}}],["interfaces/tokenpayload.interface",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["intersectiontype",{"_index":837,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{}}}],["invalid",{"_index":733,"title":{},"body":{"classes/CheckCodeToResetDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"guards/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"injectables/PhoneConfirmationService.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyPhoneDto.html":{}}}],["ioadapter",{"_index":1484,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["ios",{"_index":1364,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["is_public_key",{"_index":899,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":1550,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":1542,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["iscorrectpassword",{"_index":1280,"title":{},"body":{"classes/Password.html":{}}}],["iscorrectpassword(password",{"_index":1285,"title":{},"body":{"classes/Password.html":{}}}],["isemail",{"_index":1505,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isenum",{"_index":2033,"title":{},"body":{"classes/subscribeNotificationDto.html":{}}}],["isenum(devicetype",{"_index":2034,"title":{},"body":{"classes/subscribeNotificationDto.html":{}}}],["isglobal",{"_index":1844,"title":{},"body":{"modules/cacheOperationsModule.html":{}}}],["ismongoid",{"_index":834,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/ParamsWithId.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty",{"_index":589,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CheckCodeToResetDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRateDto.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyPhoneDto.html":{},"classes/subscribeNotificationDto.html":{}}}],["isnumber",{"_index":823,"title":{},"body":{"classes/CreateRateDto.html":{},"classes/PaginationParams.html":{}}}],["isnumber()@isnotempty",{"_index":821,"title":{},"body":{"classes/CreateRateDto.html":{}}}],["isoptional",{"_index":809,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/LoginDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyPhoneDto.html":{},"classes/subscribeNotificationDto.html":{}}}],["isoptional()@ismongoid",{"_index":1276,"title":{},"body":{"classes/ParamsWithId.html":{}}}],["isoptional()@isstring",{"_index":806,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/CreateRateDto.html":{}}}],["isoptional()@isstring()@isenum(devicetype",{"_index":2031,"title":{},"body":{"classes/subscribeNotificationDto.html":{}}}],["isoptional()@transform",{"_index":844,"title":{},"body":{"classes/FilterQueryUser.html":{},"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1268,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispaginated",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ispublic",{"_index":900,"title":{},"body":{"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":590,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CheckCodeToResetDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyPhoneDto.html":{},"classes/subscribeNotificationDto.html":{}}}],["isstring()@isnotempty",{"_index":586,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CheckCodeToResetDto.html":{},"classes/CreateNotificationDto.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyPhoneDto.html":{},"classes/subscribeNotificationDto.html":{}}}],["isstring()@isoptional",{"_index":1544,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1546,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@matches(constants.phone_regx",{"_index":732,"title":{},"body":{"classes/CheckCodeToResetDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyPhoneDto.html":{}}}],["item",{"_index":1518,"title":{},"body":{"guards/RolesGuard.html":{}}}],["items",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jnnjn",{"_index":1094,"title":{},"body":{"controllers/NotificationController.html":{}}}],["join",{"_index":2003,"title":{},"body":{"index.html":{}}}],["js",{"_index":1939,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["json.parse(msgbody",{"_index":798,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["jsonwebtoken",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt.guard",{"_index":678,"title":{},"body":{"classes/ChatGateway.html":{}}}],["jwt.guard.ts",{"_index":1831,"title":{},"body":{"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["jwt.guard.ts:37",{"_index":1832,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwt.guard.ts:40",{"_index":1833,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwt.sign(payload",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtauthguard",{"_index":322,"title":{"guards/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["jwtmodule.registerasync",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["jwtservice",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["kafkajs",{"_index":1914,"title":{},"body":{"dependencies.html":{}}}],["kamil",{"_index":2008,"title":{},"body":{"index.html":{}}}],["key",{"_index":495,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"injectables/cacheOperationsService.html":{},"interfaces/queryParamsWithId.html":{}}}],["legend",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["len",{"_index":1393,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["lesson",{"_index":1039,"title":{},"body":{"classes/Notification.html":{}}}],["license",{"_index":2014,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1995,"title":{},"body":{"index.html":{}}}],["limit",{"_index":458,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"injectables/UserRepository.html":{}}}],["limit(5000",{"_index":1683,"title":{},"body":{"injectables/UserRepository.html":{}}}],["limits",{"_index":137,"title":{},"body":{"controllers/AppController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{}}}],["link",{"_index":494,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["listen",{"_index":664,"title":{},"body":{"classes/ChatGateway.html":{}}}],["literal",{"_index":481,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{}}}],["local",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["local')@useinterceptors(undefined",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["local.ts",{"_index":920,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesinterceptor",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["localfilesinterceptor(options",{"_index":935,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"miscellaneous/functions.html":{}}}],["localfilesinterceptoroptions",{"_index":918,"title":{"interfaces/LocalFilesInterceptorOptions.html":{}},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lodash",{"_index":443,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["login",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":229,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["loginfacebook",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginfacebook(undefined",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginfacebookdto",{"_index":233,"title":{"classes/LoginFacebookDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginFacebookDto.html":{},"coverage.html":{}}}],["logingoogle",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logingoogle(_logingoogledata",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["logingoogle(user",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["logingoogledto",{"_index":238,"title":{"classes/LoginGoogleDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginGoogleDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":289,"title":{"interfaces/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["loootaa",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["make",{"_index":702,"title":{},"body":{"classes/ChatGateway.html":{}}}],["manager",{"_index":570,"title":{},"body":{"injectables/CacheConfigService.html":{},"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{},"injectables/cacheOperationsService.html":{},"dependencies.html":{}}}],["many",{"_index":1069,"title":{},"body":{"controllers/NotificationController.html":{}}}],["match",{"_index":616,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":735,"title":{},"body":{"classes/CheckCodeToResetDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyPhoneDto.html":{}}}],["matches(constants.phone_regx",{"_index":738,"title":{},"body":{"classes/CheckCodeToResetDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyPhoneDto.html":{}}}],["matchesproperty",{"_index":1191,"title":{},"body":{"injectables/NotificationService.html":{}}}],["matchesproperty('devicetoken",{"_index":1235,"title":{},"body":{"injectables/NotificationService.html":{}}}],["matching",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchstages",{"_index":615,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["materila",{"_index":1038,"title":{},"body":{"classes/Notification.html":{}}}],["math.ceil(messageswithtokens.length",{"_index":1230,"title":{},"body":{"injectables/NotificationService.html":{}}}],["math.ceil(usercounts",{"_index":1216,"title":{},"body":{"injectables/NotificationService.html":{}}}],["math.floor(r",{"_index":1814,"title":{},"body":{"injectables/UsersService.html":{}}}],["math.pow(1024",{"_index":139,"title":{},"body":{"controllers/AppController.html":{}}}],["math.random",{"_index":1813,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxcount",{"_index":1765,"title":{},"body":{"controllers/UsersController.html":{}}}],["me._id",{"_index":1779,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["me.role",{"_index":712,"title":{},"body":{"classes/ChatGateway.html":{}}}],["merge",{"_index":913,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["message",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"injectables/ConsumerService.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/LoginDto.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"classes/VerifyPhoneDto.html":{},"interfaces/queryParamsWithId.html":{}}}],["message.body",{"_index":1221,"title":{},"body":{"injectables/NotificationService.html":{}}}],["message.title",{"_index":1220,"title":{},"body":{"injectables/NotificationService.html":{}}}],["message.token",{"_index":1396,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["messagebody",{"_index":488,"title":{"interfaces/MessageBody.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata",{"_index":505,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.actions",{"_index":512,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.body",{"_index":507,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.data",{"_index":513,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.icon",{"_index":509,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.imageurl",{"_index":511,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.link",{"_index":527,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.mobilelink",{"_index":523,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagedata.title",{"_index":508,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["messagequeuemodule",{"_index":189,"title":{"modules/MessageQueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessageQueueModule.html":{},"modules.html":{},"overview.html":{}}}],["messagequeues",{"_index":743,"title":{},"body":{"classes/Constants.html":{}}}],["messagequeueservice",{"_index":103,"title":{"injectables/MessageQueueService.html":{}},"body":{"controllers/AppController.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"coverage.html":{},"overview.html":{}}}],["messages",{"_index":777,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["messageswithtokens",{"_index":1223,"title":{},"body":{"injectables/NotificationService.html":{}}}],["messaging/send",{"_index":503,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["metadata",{"_index":1942,"title":{},"body":{"dependencies.html":{}}}],["methoddecorator",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{}}}],["mime",{"_index":1575,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["min",{"_index":1271,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1272,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minio",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["miscellaneous",{"_index":1956,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1994,"title":{},"body":{"index.html":{}}}],["mixin",{"_index":926,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mixin(interceptor",{"_index":954,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["mobilelink",{"_index":496,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["mode",{"_index":1985,"title":{},"body":{"index.html":{}}}],["model",{"_index":396,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["model.countdocuments(filter",{"_index":1384,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["models/_user.model",{"_index":1677,"title":{},"body":{"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["models/student.model",{"_index":1746,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["models/teacher.model",{"_index":1747,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["module",{"_index":152,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/DatabaseModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/DatabaseModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["modules",{"_index":154,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/DatabaseModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo_error",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["mongodb",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseAbstractRepository.html":{},"injectables/ChangeStreamsService.html":{},"dependencies.html":{}}}],["mongoerror",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["mongoose",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose/lib/error",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["mongooseclassserializerinterceptor",{"_index":1885,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["mongooseclassserializerinterceptor(classtointercept",{"_index":1965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongooseerror",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["mongoosemodule",{"_index":825,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/NotificationModule.html":{},"modules/RateModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":1132,"title":{},"body":{"modules/NotificationModule.html":{},"modules/RateModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.mongodb_uri",{"_index":826,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["more",{"_index":500,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"index.html":{},"interfaces/queryParamsWithId.html":{}}}],["morgan",{"_index":1925,"title":{},"body":{"dependencies.html":{}}}],["morning",{"_index":1096,"title":{},"body":{"controllers/NotificationController.html":{}}}],["ms",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["msg",{"_index":722,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{}}}],["msg.content.tostring",{"_index":797,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["msg.requireinteraction",{"_index":510,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["msgbody",{"_index":796,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["multer",{"_index":932,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"dependencies.html":{}}}],["multermodule",{"_index":1786,"title":{},"body":{"modules/UsersModule.html":{}}}],["multermodule.registerasync",{"_index":1792,"title":{},"body":{"modules/UsersModule.html":{}}}],["multermoduleoptions",{"_index":1557,"title":{},"body":{"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{}}}],["multeroptions",{"_index":928,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['filefilter",{"_index":933,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptions['limits",{"_index":934,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["multeroptionsfactory",{"_index":1558,"title":{},"body":{"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{}}}],["multers3",{"_index":1578,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["multers3.auto_content_type",{"_index":1592,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["multi",{"_index":1754,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multipart/form",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multiplication",{"_index":1446,"title":{},"body":{"injectables/RateRepository.html":{}}}],["multiply",{"_index":1447,"title":{},"body":{"injectables/RateRepository.html":{}}}],["mussssssst",{"_index":518,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["mutable",{"_index":530,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["mutexify",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2009,"title":{},"body":{"index.html":{}}}],["n",{"_index":1203,"title":{},"body":{"injectables/NotificationService.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":683,"title":{},"body":{"classes/ChatGateway.html":{}}}],["national",{"_index":1098,"title":{},"body":{"controllers/NotificationController.html":{}}}],["ne",{"_index":1158,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["necessary",{"_index":619,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["nest",{"_index":715,"title":{},"body":{"classes/ChatGateway.html":{},"index.html":{}}}],["nestframework",{"_index":2013,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":927,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["nestjs",{"_index":1331,"title":{},"body":{"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/CacheConfigService.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ConsumerService.html":{},"modules/DatabaseModule.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheConfigService.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/DatabaseModule.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"guards/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1893,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":549,"title":{},"body":{"classes/BaseModel.html":{},"modules/DatabaseModule.html":{},"classes/Notification.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":848,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":924,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"classes/RedisIoAdapter.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":671,"title":{},"body":{"classes/ChatGateway.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["new",{"_index":126,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/MessageQueueService.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newdocument",{"_index":450,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["newpassword",{"_index":584,"title":{},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newrate",{"_index":1467,"title":{},"body":{"injectables/RateService.html":{}}}],["nextpage",{"_index":1251,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["no_ready_check",{"_index":1494,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":607,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"dependencies.html":{}}}],["node.js",{"_index":1970,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":441,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/RateService.html":{},"classes/UserNotFoundException.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`${this.model.modelname",{"_index":464,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["notification",{"_index":477,"title":{"classes/Notification.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["notification.dto",{"_index":1083,"title":{},"body":{"controllers/NotificationController.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":804,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{},"classes/subscribeNotificationDto.html":{}}}],["notification.dto.ts:10",{"_index":805,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:12",{"_index":2032,"title":{},"body":{"classes/subscribeNotificationDto.html":{}}}],["notification.dto.ts:14",{"_index":807,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:6",{"_index":808,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:7",{"_index":2029,"title":{},"body":{"classes/subscribeNotificationDto.html":{}}}],["notification.model",{"_index":1129,"title":{},"body":{"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{}}}],["notification.name",{"_index":1133,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.service",{"_index":1086,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notification/notification.module",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["notificationbody",{"_index":1067,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationbody.body",{"_index":1116,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationbody.image",{"_index":1120,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationbody.title",{"_index":1118,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationcontroller",{"_index":1048,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"coverage.html":{}}}],["notificationcount",{"_index":520,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["notificationdata",{"_index":1115,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationdocument",{"_index":1031,"title":{},"body":{"classes/Notification.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"miscellaneous/typealiases.html":{}}}],["notificationmobile",{"_index":514,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["notificationmodel",{"_index":1138,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["notificationmodule",{"_index":167,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationrepositary",{"_index":1169,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationrepository",{"_index":1127,"title":{"injectables/NotificationRepository.html":{}},"body":{"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["notifications",{"_index":1050,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notifications.controller",{"_index":1130,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notifications.repository",{"_index":1131,"title":{},"body":{"modules/NotificationModule.html":{},"injectables/NotificationService.html":{}}}],["notificationschema",{"_index":1043,"title":{},"body":{"classes/Notification.html":{},"modules/NotificationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notificationschema.methods.tofirebasenotification",{"_index":1045,"title":{},"body":{"classes/Notification.html":{}}}],["notificationservice",{"_index":1085,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationweb",{"_index":506,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["notificiation",{"_index":1390,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["now",{"_index":1008,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["npm",{"_index":1981,"title":{},"body":{"index.html":{}}}],["null",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"guards/JwtAuthGuard.html":{},"classes/PaginatedDto.html":{},"injectables/RateRepository.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["nullablefields",{"_index":1382,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["number",{"_index":820,"title":{},"body":{"classes/CreateRateDto.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/RedisIoAdapter.html":{},"classes/Teacher.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["numerator",{"_index":1448,"title":{},"body":{"injectables/RateRepository.html":{}}}],["oauth20",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["obj",{"_index":839,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/PaginationParams.html":{}}}],["object",{"_index":698,"title":{},"body":{"classes/ChatGateway.html":{},"classes/Constants.html":{},"miscellaneous/variables.html":{}}}],["object.values(userrole",{"_index":1374,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["objectid",{"_index":1088,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["observable",{"_index":896,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["ok",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"injectables/MessageQueueService.html":{}}}],["oldpassword",{"_index":585,"title":{},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["oldtoken",{"_index":1186,"title":{},"body":{"injectables/NotificationService.html":{}}}],["onapplicationbootstrap",{"_index":602,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{},"injectables/NotificationService.html":{}}}],["onapplicationshutdown",{"_index":972,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["onapplicationshutdown(signal",{"_index":975,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["one",{"_index":1292,"title":{},"body":{"classes/Password.html":{}}}],["ongatewayconnection",{"_index":646,"title":{},"body":{"classes/ChatGateway.html":{}}}],["ongatewaydisconnect",{"_index":647,"title":{},"body":{"classes/ChatGateway.html":{}}}],["onlyfieldsoftype",{"_index":1194,"title":{},"body":{"injectables/NotificationService.html":{}}}],["onmoduleinit",{"_index":973,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["open",{"_index":1106,"title":{},"body":{"controllers/NotificationController.html":{},"index.html":{}}}],["operations.service",{"_index":1810,"title":{},"body":{"injectables/UsersService.html":{},"modules/cacheOperationsModule.html":{}}}],["operations.service.ts",{"_index":1845,"title":{},"body":{"injectables/cacheOperationsService.html":{},"coverage.html":{}}}],["operations.service.ts:4",{"_index":1848,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["operations.service.ts:7",{"_index":1851,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginationParams.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"classes/RedisIoAdapter.html":{},"injectables/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["options.filefilter",{"_index":948,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.interface",{"_index":930,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["options.limits",{"_index":949,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["origin",{"_index":682,"title":{},"body":{"classes/ChatGateway.html":{}}}],["os",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"classes/ChatGateway.html":{}}}],["os.hostname",{"_index":121,"title":{},"body":{"controllers/AppController.html":{},"classes/ChatGateway.html":{}}}],["otherwise",{"_index":1293,"title":{},"body":{"classes/Password.html":{}}}],["out",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["overview",{"_index":2020,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1890,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":457,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{}}}],["paginate",{"_index":830,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["paginateddto",{"_index":1247,"title":{"classes/PaginatedDto.html":{}},"body":{"classes/PaginatedDto.html":{},"coverage.html":{}}}],["paginatemodel",{"_index":445,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/UsersService.html":{}}}],["paginatemodel>).paginate",{"_index":461,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["paginateoptions",{"_index":418,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["paginateresult",{"_index":446,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["paginationparams",{"_index":486,"title":{"classes/PaginationParams.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PaginationParams.html":{},"injectables/RateService.html":{},"interfaces/SendNotificationMethod.html":{},"controllers/UsersController.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{}}}],["paginationparams['subject",{"_index":1479,"title":{},"body":{"injectables/RateService.html":{}}}],["paginationparams['subjecttype",{"_index":1478,"title":{},"body":{"injectables/RateService.html":{}}}],["pagingcounter",{"_index":1252,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["param",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":997,"title":{},"body":{"injectables/MessageQueueService.html":{},"injectables/UploadCloudinary.html":{}}}],["params.err.stack",{"_index":1000,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["paramswithid",{"_index":1274,"title":{"classes/ParamsWithId.html":{}},"body":{"classes/ParamsWithId.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["park",{"_index":1099,"title":{},"body":{"controllers/NotificationController.html":{}}}],["parse",{"_index":795,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["partialtype",{"_index":1536,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{}}}],["partialtype(createnotificationdto",{"_index":1537,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createratedto",{"_index":1540,"title":{},"body":{"classes/UpdateRateDto.html":{}}}],["passport",{"_index":863,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":861,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":866,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["passreqtocallback",{"_index":872,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["password",{"_index":250,"title":{"classes/Password.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/Password.html":{},"interfaces/PushToken.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["password.dto",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":583,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:10",{"_index":1509,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:14",{"_index":1510,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:5",{"_index":588,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:6",{"_index":1511,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:9",{"_index":587,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.hash",{"_index":1389,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["password.iscorrectpassword(password",{"_index":1402,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["patch",{"_index":1313,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{}}}],["patch('profile",{"_index":1763,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1730,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"controllers/UploadFilesController.html":{},"injectables/UserRepository.html":{}}}],["path.extname(filepath",{"_index":1614,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["payload",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["persist",{"_index":608,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"dependencies.html":{}}}],["persistent",{"_index":1005,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["phone",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CheckCodeToResetDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/LoginDto.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/User.html":{},"classes/VerifyPhoneDto.html":{},"coverage.html":{}}}],["phone.dto",{"_index":1316,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["phone.dto.ts",{"_index":1822,"title":{},"body":{"classes/VerifyPhoneDto.html":{},"coverage.html":{}}}],["phone.dto.ts:11",{"_index":1823,"title":{},"body":{"classes/VerifyPhoneDto.html":{}}}],["phone.dto.ts:7",{"_index":1824,"title":{},"body":{"classes/VerifyPhoneDto.html":{}}}],["phone_regx",{"_index":744,"title":{},"body":{"classes/Constants.html":{}}}],["phoneconfirmationcontroller",{"_index":1300,"title":{"controllers/PhoneConfirmationController.html":{}},"body":{"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"coverage.html":{}}}],["phoneconfirmationmodule",{"_index":168,"title":{"modules/PhoneConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["phoneconfirmationservice",{"_index":261,"title":{"injectables/PhoneConfirmationService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["photo",{"_index":880,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"interfaces/PushToken.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["picture",{"_index":1103,"title":{},"body":{"controllers/NotificationController.html":{}}}],["pipeline",{"_index":438,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["plain",{"_index":1288,"title":{},"body":{"classes/Password.html":{}}}],["please",{"_index":2004,"title":{},"body":{"index.html":{}}}],["plitvice",{"_index":1097,"title":{},"body":{"controllers/NotificationController.html":{}}}],["port",{"_index":575,"title":{},"body":{"injectables/CacheConfigService.html":{},"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{}}}],["post('/change",{"_index":1774,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/check",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/rate/:id",{"_index":1712,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/sendtestfcmwithencodeing",{"_index":1114,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('/signup",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/subscribe",{"_index":1073,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('/unsubscribe",{"_index":1076,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('reset",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('verify",{"_index":1321,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["prefix",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/RateController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{}}}],["prevpage",{"_index":1253,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["prevrate",{"_index":1468,"title":{},"body":{"injectables/RateService.html":{}}}],["prevrate.set(createratedto).save",{"_index":1471,"title":{},"body":{"injectables/RateService.html":{}}}],["private",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/cacheOperationsService.html":{}}}],["privatekey",{"_index":1201,"title":{},"body":{"injectables/NotificationService.html":{}}}],["prmoises",{"_index":1218,"title":{},"body":{"injectables/NotificationService.html":{}}}],["process.env.amqp_url",{"_index":782,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["process.env.clientid",{"_index":869,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["process.env.clientsecret",{"_index":871,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["process.env.jwt_secret",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.redis_host",{"_index":1492,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["process.env.redis_pass",{"_index":1495,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["process.env.redis_port",{"_index":1493,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1987,"title":{},"body":{"index.html":{}}}],["profile",{"_index":858,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{}}}],["progressive",{"_index":1969,"title":{},"body":{"index.html":{}}}],["project",{"_index":1693,"title":{},"body":{"injectables/UserRepository.html":{},"index.html":{}}}],["projectid",{"_index":1199,"title":{},"body":{"injectables/NotificationService.html":{}}}],["projection",{"_index":425,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["promise",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/ChangeStreamsService.html":{},"injectables/ConsumerService.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"guards/RolesGuard.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["promise((resolve",{"_index":791,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["promise(async",{"_index":984,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["promise.all",{"_index":991,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["promise.all([channel.prefetch(2",{"_index":787,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["promises",{"_index":1232,"title":{},"body":{"injectables/NotificationService.html":{}}}],["prop",{"_index":546,"title":{},"body":{"classes/BaseModel.html":{},"classes/Notification.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{}}}],["prop(number",{"_index":1021,"title":{},"body":{"classes/Notification.html":{}}}],["prop(string",{"_index":1405,"title":{},"body":{"classes/Rate.html":{}}}],["prop(undefined",{"_index":1640,"title":{},"body":{"classes/User.html":{}}}],["prop({default",{"_index":1632,"title":{},"body":{"classes/User.html":{}}}],["prop({get",{"_index":1644,"title":{},"body":{"classes/User.html":{}}}],["prop({index",{"_index":1630,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":1527,"title":{},"body":{"classes/Teacher.html":{},"classes/User.html":{}}}],["prop({type",{"_index":1015,"title":{},"body":{"classes/Notification.html":{},"classes/Rate.html":{},"classes/User.html":{}}}],["properties",{"_index":395,"title":{"properties.html":{}},"body":{"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"classes/ChangePasswordDto.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryUser.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"injectables/NotificationRepository.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/VerifyPhoneDto.html":{},"properties.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/variables.html":{}}}],["propertydescriptor",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["propertykey",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protected",{"_index":406,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["provide",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{}}}],["provided",{"_index":559,"title":{},"body":{"classes/BaseModel.html":{},"classes/ChatGateway.html":{}}}],["providers",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["pubclient",{"_index":1491,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pubclient.duplicate",{"_index":1497,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseAbstractRepository.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/RateRepository.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apiokresponsegeneral(user)@get",{"_index":1721,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@get('/send",{"_index":1068,"title":{},"body":{"controllers/NotificationController.html":{}}}],["public()@get(':id",{"_index":1718,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('health",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@httpcode(httpstatus.ok)@post",{"_index":1306,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["public()@httpcode(httpstatus.ok)@post('/check",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@httpcode(httpstatus.ok)@post('/login",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@httpcode(httpstatus.ok)@post('reset",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@httpcode(httpstatus.ok)@post('verify",{"_index":1310,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["public()@post",{"_index":1601,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["public()@post('/login",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('/sendtestfcmwithencodeing",{"_index":1065,"title":{},"body":{"controllers/NotificationController.html":{}}}],["public()@post('/signup",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('upload",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@useguards(googleoauthguard)@post('/login",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["publish",{"_index":144,"title":{},"body":{"controllers/AppController.html":{}}}],["publisher.module",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["publisher.module.ts",{"_index":968,"title":{},"body":{"modules/MessageQueueModule.html":{}}}],["publishtochannel",{"_index":974,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["publishtochannel(undefined",{"_index":979,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["push",{"_index":1696,"title":{},"body":{"injectables/UserRepository.html":{}}}],["pushtoken",{"_index":1192,"title":{"interfaces/PushToken.html":{}},"body":{"injectables/NotificationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"coverage.html":{}}}],["pushtokens",{"_index":1375,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["pushtokens.0",{"_index":1686,"title":{},"body":{"injectables/UserRepository.html":{}}}],["pushtokens.devicetoken",{"_index":1699,"title":{},"body":{"injectables/UserRepository.html":{}}}],["q",{"_index":150,"title":{},"body":{"controllers/AppController.html":{}}}],["qiniu",{"_index":1938,"title":{},"body":{"dependencies.html":{}}}],["query",{"_index":1078,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{}}}],["queryfiltersandoptions",{"_index":422,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["queryfiltersandoptions.allowpagination",{"_index":460,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["queryoptions",{"_index":424,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["queryparams",{"_index":1063,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["queryparamswithid",{"_index":536,"title":{"interfaces/queryParamsWithId.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{}}}],["queryparamswithid).targetusers",{"_index":1240,"title":{},"body":{"injectables/NotificationService.html":{}}}],["queue",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{}}}],["queue.service",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"modules/MessageQueueModule.html":{}}}],["queue.service.ts",{"_index":969,"title":{},"body":{"injectables/MessageQueueService.html":{},"coverage.html":{}}}],["queue.service.ts:15",{"_index":981,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["queue.service.ts:16",{"_index":982,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["queue.service.ts:18",{"_index":978,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["queue.service.ts:50",{"_index":980,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["queue.service.ts:67",{"_index":976,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["queue/message",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"coverage.html":{}}}],["queue/test1",{"_index":760,"title":{},"body":{"injectables/ConsumerService.html":{},"coverage.html":{}}}],["queue/worker.ts",{"_index":1874,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["r",{"_index":1093,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/UsersService.html":{}}}],["rabbitmq",{"_index":778,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["randominrange",{"_index":1882,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randominrange(from",{"_index":1811,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rate",{"_index":1403,"title":{"classes/Rate.html":{}},"body":{"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"coverage.html":{}}}],["rate.controller",{"_index":1426,"title":{},"body":{"modules/RateModule.html":{}}}],["rate.dto",{"_index":1462,"title":{},"body":{"injectables/RateService.html":{},"classes/UpdateRateDto.html":{},"controllers/UsersController.html":{}}}],["rate.dto.ts",{"_index":816,"title":{},"body":{"classes/CreateRateDto.html":{},"classes/UpdateRateDto.html":{},"coverage.html":{}}}],["rate.dto.ts:10",{"_index":819,"title":{},"body":{"classes/CreateRateDto.html":{}}}],["rate.dto.ts:6",{"_index":822,"title":{},"body":{"classes/CreateRateDto.html":{}}}],["rate.model",{"_index":1428,"title":{},"body":{"modules/RateModule.html":{},"injectables/RateRepository.html":{}}}],["rate.name",{"_index":1429,"title":{},"body":{"modules/RateModule.html":{}}}],["rate.repository",{"_index":1427,"title":{},"body":{"modules/RateModule.html":{},"injectables/RateService.html":{}}}],["rate.service",{"_index":1418,"title":{},"body":{"controllers/RateController.html":{},"modules/RateModule.html":{}}}],["rate/rate.module",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["ratecontroller",{"_index":1415,"title":{"controllers/RateController.html":{}},"body":{"controllers/RateController.html":{},"modules/RateModule.html":{},"coverage.html":{}}}],["ratedobjectid",{"_index":1437,"title":{},"body":{"injectables/RateRepository.html":{}}}],["ratedocument",{"_index":1411,"title":{},"body":{"classes/Rate.html":{},"injectables/RateRepository.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["ratedone",{"_index":1465,"title":{},"body":{"injectables/RateService.html":{}}}],["ratedone._id",{"_index":1470,"title":{},"body":{"injectables/RateService.html":{}}}],["ratedone.save",{"_index":1477,"title":{},"body":{"injectables/RateService.html":{}}}],["ratedone['rating",{"_index":1475,"title":{},"body":{"injectables/RateService.html":{}}}],["ratedrepository",{"_index":1463,"title":{},"body":{"injectables/RateService.html":{}}}],["ratedrepository.findone",{"_index":1466,"title":{},"body":{"injectables/RateService.html":{}}}],["ratemodel",{"_index":1434,"title":{},"body":{"injectables/RateRepository.html":{}}}],["ratemodule",{"_index":169,"title":{"modules/RateModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RateModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["raterepository",{"_index":1423,"title":{"injectables/RateRepository.html":{}},"body":{"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"coverage.html":{},"overview.html":{}}}],["rates",{"_index":1440,"title":{},"body":{"injectables/RateRepository.html":{},"injectables/RateService.html":{}}}],["rates[0]['final",{"_index":1476,"title":{},"body":{"injectables/RateService.html":{}}}],["rateschema",{"_index":1413,"title":{},"body":{"classes/Rate.html":{},"modules/RateModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rateservice",{"_index":1417,"title":{"injectables/RateService.html":{}},"body":{"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["rating",{"_index":818,"title":{},"body":{"classes/CreateRateDto.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"classes/User.html":{}}}],["raw",{"_index":1359,"title":{},"body":{"interfaces/PushToken.html":{},"injectables/UploadDigitalOceanSpace.html":{},"classes/User.html":{}}}],["raw.tostring('hex')}_${date.now().tostring",{"_index":1595,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{}}}],["read",{"_index":1035,"title":{},"body":{"classes/Notification.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"index.html":{}}}],["readby",{"_index":1012,"title":{},"body":{"classes/Notification.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{}}}],["readme",{"_index":1650,"title":{},"body":{"injectables/UserRepository.html":{}}}],["readonly",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/RateController.html":{},"injectables/RateService.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["receiver",{"_index":842,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/Notification.html":{}}}],["recieveroperationmessage",{"_index":773,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["record",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["redis",{"_index":571,"title":{},"body":{"injectables/CacheConfigService.html":{},"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["redisadapter",{"_index":1498,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisclient",{"_index":1489,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["redisioadapter",{"_index":1482,"title":{"classes/RedisIoAdapter.html":{}},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["redisstore",{"_index":568,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["ref",{"_index":1033,"title":{},"body":{"classes/Notification.html":{},"classes/Rate.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":1941,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":890,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refpath",{"_index":1024,"title":{},"body":{"classes/Notification.html":{},"classes/Rate.html":{}}}],["regexp(escaperegexp(obj.username",{"_index":840,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{}}}],["register",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerationdata",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(registerdto",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerationdata",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerationdata.phone",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":244,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registerdto.phone",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["reject",{"_index":792,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["reject(err",{"_index":1006,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["remah",{"_index":618,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["remah.png",{"_index":1610,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["remah:'remah",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["repository",{"_index":1979,"title":{},"body":{"index.html":{}}}],["req",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleOauthStrategy.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UsersController.html":{}}}],["req.me",{"_index":883,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["request",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.header('authorization",{"_index":904,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.header('authorization').split",{"_index":905,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.me",{"_index":915,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["request.path.split('/')[3",{"_index":911,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.url",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["requestwithuser",{"_index":855,"title":{"interfaces/RequestWithUser.html":{}},"body":{"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["requestwithuser).me",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":907,"title":{},"body":{"guards/JwtAuthGuard.html":{},"classes/Notification.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/Teacher.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["requireinteraction",{"_index":492,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}],["reset.dto",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset.dto.ts",{"_index":730,"title":{},"body":{"classes/CheckCodeToResetDto.html":{},"coverage.html":{}}}],["reset.dto.ts:10",{"_index":731,"title":{},"body":{"classes/CheckCodeToResetDto.html":{}}}],["reset.dto.ts:6",{"_index":734,"title":{},"body":{"classes/CheckCodeToResetDto.html":{}}}],["resetpassword",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(undefined",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassworddto",{"_index":248,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resolve",{"_index":985,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["resource_type",{"_index":1568,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["response",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/RateService.html":{}}}],["response.status(statuscode).json",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsemessage",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responseof${model.name",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resume",{"_index":629,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["resumeafter",{"_index":631,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["resumetoken",{"_index":638,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["return",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginationParams.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"injectables/CacheConfigService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1944,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleOauthStrategy.html":{},"interfaces/PushToken.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{}}}],["roles",{"_index":1079,"title":{},"body":{"controllers/NotificationController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(userrole.student",{"_index":1758,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.find((item",{"_index":1517,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.length",{"_index":1516,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":324,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["routingkey",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"injectables/MessageQueueService.html":{}}}],["run",{"_index":1984,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":898,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["s3",{"_index":1579,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"dependencies.html":{}}}],["s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0",{"_index":745,"title":{},"body":{"classes/Constants.html":{}}}],["same",{"_index":1290,"title":{},"body":{"classes/Password.html":{}}}],["samples/notifications/bell.png",{"_index":1019,"title":{},"body":{"classes/Notification.html":{}}}],["save",{"_index":697,"title":{},"body":{"classes/ChatGateway.html":{}}}],["scalable",{"_index":1974,"title":{},"body":{"index.html":{}}}],["scene",{"_index":1102,"title":{},"body":{"controllers/NotificationController.html":{}}}],["schema",{"_index":547,"title":{},"body":{"classes/BaseModel.html":{},"classes/Notification.html":{},"modules/NotificationModule.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"modules/RateModule.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemafactory",{"_index":548,"title":{},"body":{"classes/BaseModel.html":{},"classes/Notification.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(notification",{"_index":1044,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(rate",{"_index":1414,"title":{},"body":{"classes/Rate.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(student",{"_index":1524,"title":{},"body":{"classes/Student.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(teacher",{"_index":1532,"title":{},"body":{"classes/Teacher.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1377,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemaoptions.timestamps",{"_index":560,"title":{},"body":{"classes/BaseModel.html":{}}}],["sdk",{"_index":1577,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"dependencies.html":{}}}],["secret",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["secretaccesskey",{"_index":1583,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["section",{"_index":642,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["security",{"_index":704,"title":{},"body":{"classes/ChatGateway.html":{}}}],["select('_id",{"_index":1684,"title":{},"body":{"injectables/UserRepository.html":{}}}],["sender",{"_index":723,"title":{},"body":{"classes/ChatGateway.html":{}}}],["sendmany",{"_index":1162,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendmany(message",{"_index":1176,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendmanynotificationswithuserfilter",{"_index":1163,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendmanynotificationswithuserfilter(filter",{"_index":1179,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotification",{"_index":535,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["sendnotificationmethod",{"_index":533,"title":{"interfaces/SendNotificationMethod.html":{}},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{}}}],["sendsms",{"_index":1303,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["sendsms(createphoneconfirmationdto",{"_index":1305,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["sendtest",{"_index":1164,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendtest(message",{"_index":1182,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendtestfcmwithencodeing",{"_index":1053,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendtestfcmwithencodeing(notificationbody",{"_index":1064,"title":{},"body":{"controllers/NotificationController.html":{}}}],["server",{"_index":648,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RedisIoAdapter.html":{},"index.html":{}}}],["server.adapter(redisadapter",{"_index":1500,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["serveroptions",{"_index":1487,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["service",{"_index":614,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"injectables/MessageQueueService.html":{}}}],["serviceaccount",{"_index":1196,"title":{},"body":{"injectables/NotificationService.html":{}}}],["services(process.env.twilio_account_verify_sid",{"_index":1346,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["session",{"_index":1041,"title":{},"body":{"classes/Notification.html":{}}}],["set",{"_index":1372,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["setmetadata('roles",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnmanydocs",{"_index":1054,"title":{},"body":{"controllers/NotificationController.html":{}}}],["setoptions(options",{"_index":453,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["setup",{"_index":785,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["side",{"_index":1975,"title":{},"body":{"index.html":{}}}],["signal",{"_index":977,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["signatureversion",{"_index":1587,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["skip",{"_index":1692,"title":{},"body":{"injectables/UserRepository.html":{}}}],["skip(5000",{"_index":1682,"title":{},"body":{"injectables/UserRepository.html":{}}}],["slices",{"_index":1231,"title":{},"body":{"injectables/NotificationService.html":{}}}],["slicesnumber",{"_index":1229,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sms",{"_index":1349,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["socket",{"_index":656,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["socket.io",{"_index":672,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RedisIoAdapter.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["solution",{"_index":1037,"title":{},"body":{"classes/Notification.html":{}}}],["sort",{"_index":1242,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/RateService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"modules/DatabaseModule.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"controllers/RateController.html":{},"modules/RateModule.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRateDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"injectables/cacheOperationsService.html":{},"index.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{}}}],["sparse",{"_index":1368,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["sponsors",{"_index":1998,"title":{},"body":{"index.html":{}}}],["spring",{"_index":1101,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src",{"_index":1609,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["src/.../_user.model.ts",{"_index":1958,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../apiokresponsegeneral.ts",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../base.abstract.repository.ts",{"_index":2040,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1960,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../me.decorator.ts",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mongooseclassserializer.interceptor.ts",{"_index":1963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notification.model.ts",{"_index":2037,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate.model.ts",{"_index":2038,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../redisioadapter.ts",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../student.model.ts",{"_index":2039,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../teacher.model.ts",{"_index":2041,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload",{"_index":1962,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.service.ts",{"_index":1964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../worker.ts",{"_index":1961,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:17",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:24",{"_index":93,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:34",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:54",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":208,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:42",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:53",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:77",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:89",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":727,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/auth/auth.module.ts",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":673,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/auth/auth.service.ts",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:101",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:78",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/me.decorator",{"_index":675,"title":{},"body":{"classes/ChatGateway.html":{},"controllers/NotificationController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/me.decorator.ts",{"_index":1862,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator",{"_index":1087,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UploadFilesController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1865,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":1080,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1866,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/check",{"_index":729,"title":{},"body":{"classes/CheckCodeToResetDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":958,"title":{},"body":{"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":955,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":957,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:6",{"_index":956,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":1501,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:12",{"_index":1504,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:16",{"_index":1502,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:20",{"_index":1503,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/reset",{"_index":1508,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/guards/googletoken.guard.ts",{"_index":846,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/jwtauth.guard.ts",{"_index":887,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/jwtauth.guard.ts:19",{"_index":891,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["src/auth/guards/jwtauth.guard.ts:25",{"_index":894,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1512,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:6",{"_index":1513,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":1514,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/requestwithiuser.interface",{"_index":1834,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["src/auth/interfaces/requestwithiuser.interface.ts",{"_index":1506,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/interfaces/tokenpayload.interface.ts",{"_index":1533,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/googlestrategy.passport.ts",{"_index":850,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/googlestrategy.passport.ts:10",{"_index":853,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["src/auth/strategies/googlestrategy.passport.ts:19",{"_index":860,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["src/auth/utils/password.ts",{"_index":1278,"title":{},"body":{"classes/Password.html":{},"coverage.html":{}}}],["src/auth/utils/password.ts:20",{"_index":1287,"title":{},"body":{"classes/Password.html":{}}}],["src/auth/utils/password.ts:8",{"_index":1282,"title":{},"body":{"classes/Password.html":{}}}],["src/auth/utils/responses.model.ts",{"_index":964,"title":{},"body":{"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["src/cache/cache",{"_index":1809,"title":{},"body":{"injectables/UsersService.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{}}}],["src/cache/cache.module",{"_index":1787,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/cache/cache.module.ts",{"_index":1842,"title":{},"body":{"modules/cacheOperationsModule.html":{}}}],["src/cache/cacheconfigservice.ts",{"_index":561,"title":{},"body":{"injectables/CacheConfigService.html":{},"coverage.html":{}}}],["src/cache/cacheconfigservice.ts:10",{"_index":564,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["src/cache/cacheconfigservice.ts:12",{"_index":565,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["src/change",{"_index":596,"title":{},"body":{"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/chat/chat.gateway.ts",{"_index":645,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:28",{"_index":653,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:31",{"_index":657,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:60",{"_index":660,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:67",{"_index":665,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":726,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/filters/websocketsexception.filter.ts",{"_index":1825,"title":{},"body":{"classes/WebsocketsExceptionFilter.html":{},"coverage.html":{}}}],["src/chat/filters/websocketsexception.filter.ts:6",{"_index":1827,"title":{},"body":{"classes/WebsocketsExceptionFilter.html":{}}}],["src/chat/guards/ws",{"_index":1830,"title":{},"body":{"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["src/chat/redisioadapter.ts",{"_index":1483,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/chat/redisioadapter.ts:16",{"_index":1488,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/database.module",{"_index":598,"title":{},"body":{"modules/ChangeStreamsModule.html":{}}}],["src/database.module.ts",{"_index":824,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/main.ts",{"_index":1873,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/message",{"_index":759,"title":{},"body":{"injectables/ConsumerService.html":{},"modules/MessageQueueModule.html":{},"injectables/MessageQueueService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notification/dto/create",{"_index":803,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/dto/subscribe",{"_index":1877,"title":{},"body":{"coverage.html":{},"classes/subscribeNotificationDto.html":{}}}],["src/notification/dto/update",{"_index":1535,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/notification.model.ts",{"_index":1010,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/notification/notification.model.ts:10",{"_index":1029,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.model.ts:13",{"_index":1016,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.model.ts:23",{"_index":1020,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.model.ts:26",{"_index":1022,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.model.ts:39",{"_index":1028,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.model.ts:49",{"_index":1023,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.model.ts:64",{"_index":1027,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.model.ts:67",{"_index":1025,"title":{},"body":{"classes/Notification.html":{}}}],["src/notification/notification.module.ts",{"_index":1128,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/notification/notification.service.ts",{"_index":1159,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/notification/notification.service.ts:119",{"_index":1183,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:123",{"_index":1189,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:136",{"_index":1187,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:168",{"_index":1172,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:192",{"_index":1174,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:37",{"_index":1175,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:39",{"_index":1168,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:47",{"_index":1170,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:59",{"_index":1180,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:88",{"_index":1178,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notifications.controller.ts",{"_index":1049,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/notification/notifications.controller.ts:24",{"_index":1070,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notifications.controller.ts:52",{"_index":1062,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notifications.controller.ts:60",{"_index":1074,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notifications.controller.ts:69",{"_index":1059,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notifications.controller.ts:74",{"_index":1077,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notifications.controller.ts:84",{"_index":1066,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notifications.repository.ts",{"_index":1134,"title":{},"body":{"injectables/NotificationRepository.html":{},"coverage.html":{}}}],["src/notification/notifications.repository.ts:12",{"_index":1137,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["src/notification/notifications.repository.ts:19",{"_index":1140,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["src/notification/types.ts",{"_index":473,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"coverage.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["src/phone",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreatePhoneConfirmationDto.html":{},"controllers/PhoneConfirmationController.html":{},"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"classes/VerifyPhoneDto.html":{},"coverage.html":{}}}],["src/rate/dto/create",{"_index":815,"title":{},"body":{"classes/CreateRateDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/rate/dto/update",{"_index":1539,"title":{},"body":{"classes/UpdateRateDto.html":{},"coverage.html":{}}}],["src/rate/rate.controller.ts",{"_index":1416,"title":{},"body":{"controllers/RateController.html":{},"coverage.html":{}}}],["src/rate/rate.model",{"_index":1751,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/rate/rate.model.ts",{"_index":1404,"title":{},"body":{"classes/Rate.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/rate/rate.model.ts:12",{"_index":1408,"title":{},"body":{"classes/Rate.html":{}}}],["src/rate/rate.model.ts:15",{"_index":1409,"title":{},"body":{"classes/Rate.html":{}}}],["src/rate/rate.model.ts:23",{"_index":1410,"title":{},"body":{"classes/Rate.html":{}}}],["src/rate/rate.model.ts:26",{"_index":1407,"title":{},"body":{"classes/Rate.html":{}}}],["src/rate/rate.model.ts:29",{"_index":1406,"title":{},"body":{"classes/Rate.html":{}}}],["src/rate/rate.module",{"_index":1788,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/rate/rate.module.ts",{"_index":1424,"title":{},"body":{"modules/RateModule.html":{}}}],["src/rate/rate.repository.ts",{"_index":1430,"title":{},"body":{"injectables/RateRepository.html":{},"coverage.html":{}}}],["src/rate/rate.repository.ts:15",{"_index":1436,"title":{},"body":{"injectables/RateRepository.html":{}}}],["src/rate/rate.repository.ts:8",{"_index":1433,"title":{},"body":{"injectables/RateRepository.html":{}}}],["src/rate/rate.service",{"_index":1750,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/rate/rate.service.ts",{"_index":1453,"title":{},"body":{"injectables/RateService.html":{},"coverage.html":{}}}],["src/rate/rate.service.ts:15",{"_index":1459,"title":{},"body":{"injectables/RateService.html":{}}}],["src/rate/rate.service.ts:52",{"_index":1461,"title":{},"body":{"injectables/RateService.html":{}}}],["src/rate/rate.service.ts:9",{"_index":1457,"title":{},"body":{"injectables/RateService.html":{}}}],["src/upload",{"_index":1597,"title":{},"body":{"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"coverage.html":{}}}],["src/users/dto/change",{"_index":582,"title":{},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/dto/filterqueryoptions.dto.ts",{"_index":833,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"coverage.html":{}}}],["src/users/dto/filterqueryoptions.dto.ts:12",{"_index":845,"title":{},"body":{"classes/FilterQueryUser.html":{}}}],["src/users/dto/update",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/exceptions/usernotfound.exception",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/exceptions/usernotfound.exception.ts",{"_index":1646,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/users/exceptions/usernotfound.exception.ts:3",{"_index":1648,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["src/users/models/_user.model",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"classes/Rate.html":{},"interfaces/SendNotificationMethod.html":{},"guards/WsJwtGuard.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{}}}],["src/users/models/_user.model.ts",{"_index":1357,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/models/_user.model.ts:117",{"_index":1641,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:51",{"_index":1636,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:58",{"_index":1631,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:66",{"_index":1638,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:78",{"_index":1645,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:81",{"_index":1637,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:84",{"_index":1633,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:87",{"_index":1639,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:90",{"_index":1634,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:93",{"_index":1635,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:96",{"_index":1643,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/_user.model.ts:99",{"_index":1642,"title":{},"body":{"classes/User.html":{}}}],["src/users/models/student.model",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/users/models/student.model.ts",{"_index":1520,"title":{},"body":{"classes/Student.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/models/student.model.ts:9",{"_index":1521,"title":{},"body":{"classes/Student.html":{}}}],["src/users/models/teacher.model.ts",{"_index":1525,"title":{},"body":{"classes/Teacher.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/models/teacher.model.ts:12",{"_index":1528,"title":{},"body":{"classes/Teacher.html":{}}}],["src/users/models/teacher.model.ts:9",{"_index":1529,"title":{},"body":{"classes/Teacher.html":{}}}],["src/users/users.controller.ts",{"_index":1703,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:110",{"_index":1719,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:117",{"_index":1713,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:126",{"_index":1725,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":1722,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":1727,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:81",{"_index":1731,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:98",{"_index":1716,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{}}}],["src/users/users.module.ts",{"_index":1784,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/RateService.html":{}}}],["src/users/users.repository.ts",{"_index":1651,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/users/users.repository.ts:14",{"_index":1666,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/users.repository.ts:25",{"_index":1664,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/users.repository.ts:31",{"_index":1663,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/users.repository.ts:38",{"_index":1661,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/users.repository.ts:8",{"_index":1657,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/users.service",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{}}}],["src/users/users.service.ts",{"_index":1793,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/users.service.ts:33",{"_index":1796,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1801,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":1803,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":1807,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:59",{"_index":1805,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":1799,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:69",{"_index":1797,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/base.abstract.repository",{"_index":1153,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["src/utils/base.abstract.repository.ts",{"_index":394,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/base.abstract.repository.ts:105",{"_index":437,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:18",{"_index":408,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:24",{"_index":410,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:29",{"_index":412,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:34",{"_index":426,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:45",{"_index":419,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:70",{"_index":414,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:76",{"_index":431,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:90",{"_index":433,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.abstract.repository.ts:97",{"_index":429,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["src/utils/base.model.ts",{"_index":539,"title":{},"body":{"classes/BaseModel.html":{},"coverage.html":{}}}],["src/utils/base.model.ts:18",{"_index":544,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/utils/base.model.ts:19",{"_index":543,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/utils/base.model.ts:20",{"_index":545,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/utils/constants",{"_index":737,"title":{},"body":{"classes/CheckCodeToResetDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/ResetPasswordDto.html":{},"controllers/UsersController.html":{},"classes/VerifyPhoneDto.html":{}}}],["src/utils/constants.ts",{"_index":739,"title":{},"body":{"classes/Constants.html":{},"coverage.html":{}}}],["src/utils/constants.ts:11",{"_index":754,"title":{},"body":{"classes/Constants.html":{}}}],["src/utils/constants.ts:2",{"_index":752,"title":{},"body":{"classes/Constants.html":{}}}],["src/utils/constants.ts:4",{"_index":757,"title":{},"body":{"classes/Constants.html":{}}}],["src/utils/constants.ts:6",{"_index":755,"title":{},"body":{"classes/Constants.html":{}}}],["src/utils/filters/http",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/utils/mongooseclassserializer.interceptor.ts",{"_index":1884,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/pagination/apiokresponsegeneral",{"_index":1745,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/utils/pagination/apiokresponsegeneral.ts",{"_index":1886,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/pagination/paginated.dto.ts",{"_index":1248,"title":{},"body":{"classes/PaginatedDto.html":{},"coverage.html":{}}}],["src/utils/pagination/paginated.dto.ts:10",{"_index":1261,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:12",{"_index":1257,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:14",{"_index":1256,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:16",{"_index":1262,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:18",{"_index":1259,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:2",{"_index":1263,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:4",{"_index":1258,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:6",{"_index":1264,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginated.dto.ts:8",{"_index":1260,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["src/utils/pagination/paginationparams.dto",{"_index":487,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/RateService.html":{},"interfaces/SendNotificationMethod.html":{},"controllers/UsersController.html":{},"interfaces/queryParamsWithId.html":{}}}],["src/utils/pagination/paginationparams.dto.ts",{"_index":1265,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["src/utils/pagination/paginationparams.dto.ts:15",{"_index":1269,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/pagination/paginationparams.dto.ts:21",{"_index":1267,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/pagination/paginationparams.dto.ts:9",{"_index":1270,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/paramswithid.dto",{"_index":1741,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/utils/paramswithid.dto.ts",{"_index":1275,"title":{},"body":{"classes/ParamsWithId.html":{},"coverage.html":{}}}],["src/utils/paramswithid.dto.ts:6",{"_index":1277,"title":{},"body":{"classes/ParamsWithId.html":{}}}],["src/utils/services/upload",{"_index":919,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/upload",{"_index":1753,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stage",{"_index":1660,"title":{},"body":{"injectables/UserRepository.html":{}}}],["start",{"_index":125,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["start:dev",{"_index":1986,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1988,"title":{},"body":{"index.html":{}}}],["started",{"_index":1968,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1978,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1858,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":740,"title":{},"body":{"classes/Constants.html":{},"classes/Password.html":{}}}],["statuscode",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stay",{"_index":2005,"title":{},"body":{"index.html":{}}}],["storage",{"_index":606,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"dependencies.html":{}}}],["storage.getitem(cs_token_key",{"_index":627,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["storage.init",{"_index":624,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["storage.setitem(cs_token_key",{"_index":640,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["storageforresumetoken",{"_index":626,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["store",{"_index":572,"title":{},"body":{"injectables/CacheConfigService.html":{},"dependencies.html":{}}}],["strategies/googlestrategy.passport",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":862,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["stream",{"_index":634,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["streams",{"_index":613,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["streams.module",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["streams.module.ts",{"_index":597,"title":{},"body":{"modules/ChangeStreamsModule.html":{}}}],["streams.service",{"_index":599,"title":{},"body":{"modules/ChangeStreamsModule.html":{}}}],["streams.service.ts",{"_index":600,"title":{},"body":{"injectables/ChangeStreamsService.html":{},"coverage.html":{}}}],["streams.service.ts:11",{"_index":603,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["streams.service.ts:15",{"_index":604,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["streams.service.ts:9",{"_index":605,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["streams/change",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/ChangeStreamsModule.html":{},"injectables/ChangeStreamsService.html":{},"coverage.html":{}}}],["streams/worker.ts",{"_index":1871,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["string",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"classes/ChangePasswordDto.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/VerifyPhoneDto.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":364,"title":{"classes/Student.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleOauthStrategy.html":{},"interfaces/PushToken.html":{},"classes/Student.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["studentdocument",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Student.html":{},"miscellaneous/typealiases.html":{}}}],["studentschema",{"_index":1523,"title":{},"body":{"classes/Student.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subclient",{"_index":1496,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":1013,"title":{},"body":{"classes/Notification.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{}}}],["subjecttype",{"_index":1014,"title":{},"body":{"classes/Notification.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{}}}],["subscribe",{"_index":1165,"title":{},"body":{"injectables/NotificationService.html":{}}}],["subscribe(user",{"_index":1184,"title":{},"body":{"injectables/NotificationService.html":{}}}],["subscribemessage",{"_index":668,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('test",{"_index":709,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribenotificationdto",{"_index":1072,"title":{"classes/subscribeNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"coverage.html":{},"classes/subscribeNotificationDto.html":{}}}],["subscribetoken",{"_index":1055,"title":{},"body":{"controllers/NotificationController.html":{}}}],["subscribetoken(undefined",{"_index":1071,"title":{},"body":{"controllers/NotificationController.html":{}}}],["successfully",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["sum",{"_index":1444,"title":{},"body":{"injectables/RateRepository.html":{}}}],["super",{"_index":867,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["super(`user",{"_index":1649,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(notificationmodel",{"_index":1155,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["super(ratemodel",{"_index":1439,"title":{},"body":{"injectables/RateRepository.html":{}}}],["super(usermodel",{"_index":1679,"title":{},"body":{"injectables/UserRepository.html":{}}}],["super.catch(exception",{"_index":1829,"title":{},"body":{"classes/WebsocketsExceptionFilter.html":{}}}],["super.createioserver(port",{"_index":1499,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["support",{"_index":1999,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":703,"title":{},"body":{"classes/ChatGateway.html":{}}}],["svg",{"_index":2016,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1948,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["table",{"_index":1889,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1888,"title":{},"body":{"coverage.html":{}}}],["tape",{"_index":1951,"title":{},"body":{"dependencies.html":{}}}],["target",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["targetusers",{"_index":537,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["tdocument",{"_index":447,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"miscellaneous/typealiases.html":{}}}],["teacher",{"_index":1363,"title":{"classes/Teacher.html":{}},"body":{"interfaces/PushToken.html":{},"classes/Teacher.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["teacherdocument",{"_index":1530,"title":{},"body":{"classes/Teacher.html":{},"miscellaneous/typealiases.html":{}}}],["teacherschema",{"_index":1531,"title":{},"body":{"classes/Teacher.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"index.html":{}}}],["test1",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{}}}],["test:covsupport",{"_index":1993,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1992,"title":{},"body":{"index.html":{}}}],["testconsumer",{"_index":762,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["testing",{"_index":517,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["testlisten",{"_index":651,"title":{},"body":{"classes/ChatGateway.html":{}}}],["testlisten(@messagebody",{"_index":710,"title":{},"body":{"classes/ChatGateway.html":{}}}],["testlisten(data",{"_index":661,"title":{},"body":{"classes/ChatGateway.html":{}}}],["tests",{"_index":1990,"title":{},"body":{"index.html":{}}}],["text",{"_index":1289,"title":{},"body":{"classes/Password.html":{}}}],["thanks",{"_index":1997,"title":{},"body":{"index.html":{}}}],["this._connection",{"_index":987,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["this._connection.close",{"_index":1007,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["this._connection.createchannel",{"_index":990,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["this._connection.on('connect",{"_index":994,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["this._connection.on('disconnect",{"_index":996,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["this._operationschannelwrapper",{"_index":989,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["this._operationschannelwrapper.publish",{"_index":1001,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["this.authservice.login(logindto",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginfacebook",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logingoogle(this.req.me",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyuserbytokenfromsocket",{"_index":691,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.body",{"_index":1047,"title":{},"body":{"classes/Notification.html":{}}}],["this.cachemanager.del(key",{"_index":1854,"title":{},"body":{"injectables/cacheOperationsService.html":{}}}],["this.changestreams",{"_index":611,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["this.configservice.get",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('api_key",{"_index":1565,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["this.configservice.get('api_secret",{"_index":1567,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["this.configservice.get('clientemail",{"_index":1205,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.configservice.get('cloud_name",{"_index":1563,"title":{},"body":{"injectables/UploadCloudinary.html":{}}}],["this.configservice.get('do_space_access_key",{"_index":1582,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["this.configservice.get('do_space_bucket_name",{"_index":1590,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"controllers/UploadFilesController.html":{}}}],["this.configservice.get('do_space_end_point",{"_index":1586,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["this.configservice.get('do_space_secret_key",{"_index":1584,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["this.configservice.get('privatekey').replace(/\\\\n/g",{"_index":1202,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.configservice.get('projectid",{"_index":1200,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.configservice.get('redis_host",{"_index":574,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["this.configservice.get('redis_pass",{"_index":580,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["this.configservice.get('redis_port",{"_index":576,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["this.configurationhandler",{"_index":1197,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.constructor",{"_index":1383,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["this.email",{"_index":1379,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["this.fileinterceptor",{"_index":950,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.fileinterceptor.intercept(...args",{"_index":953,"title":{},"body":{"interfaces/LocalFilesInterceptorOptions.html":{}}}],["this.ismodified('password",{"_index":1388,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["this.jwtservice.verify(token",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["this.messagequeueservice.publishtochannel",{"_index":145,"title":{},"body":{"controllers/AppController.html":{}}}],["this.model",{"_index":449,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["this.model(data).save",{"_index":451,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["this.model.deleteone(filterquery",{"_index":463,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["this.model.find(filters).setoptions(options",{"_index":462,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["this.model.updatemany(filterquery",{"_index":468,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["this.model.updateone(filterquery",{"_index":467,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["this.model.watch(pipeline",{"_index":469,"title":{},"body":{"classes/BaseAbstractRepository.html":{}}}],["this.notificationmodel.countdocuments",{"_index":1156,"title":{},"body":{"injectables/NotificationRepository.html":{}}}],["this.notificationrepositary.countnotifications(user",{"_index":1246,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationrepositary.create",{"_index":1219,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationrepositary.findallwithpaginationoption",{"_index":1241,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationrepositary.updateallvoid",{"_index":1243,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationservice.fetchall(me",{"_index":1109,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.fetchcount(me",{"_index":1112,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.sendmanynotificationswithuserfilter",{"_index":1092,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.sendtest",{"_index":1121,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.subscribe(me",{"_index":1110,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.unsubscribe(me",{"_index":1113,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.phoneconfirmationservice.sendsms",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{}}}],["this.phoneconfirmationservice.verificationcode",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.phoneconfirmationservice.verificationcode(verifydata",{"_index":1322,"title":{},"body":{"controllers/PhoneConfirmationController.html":{}}}],["this.ratemodel.aggregate",{"_index":1441,"title":{},"body":{"injectables/RateRepository.html":{}}}],["this.raterepository.create",{"_index":1472,"title":{},"body":{"injectables/RateService.html":{}}}],["this.raterepository.fetchrates(ratedone.id",{"_index":1474,"title":{},"body":{"injectables/RateService.html":{}}}],["this.raterepository.findallwithpaginationoption",{"_index":1481,"title":{},"body":{"injectables/RateService.html":{}}}],["this.raterepository.findone",{"_index":1469,"title":{},"body":{"injectables/RateService.html":{}}}],["this.rateservice.create(createratedto",{"_index":1778,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.rateservice.fetchallrates(paginationparams",{"_index":1780,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.reflector.get('roles",{"_index":1515,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.get(is_public_key",{"_index":901,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.req.me",{"_index":1773,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.s3",{"_index":1626,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["this.s3.putobject",{"_index":1628,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["this.save",{"_index":1399,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["this.server",{"_index":719,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.testconsumer",{"_index":775,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["this.title",{"_index":1046,"title":{},"body":{"classes/Notification.html":{}}}],["this.twilioclient.verify",{"_index":1345,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["this.uploadfilesservice.uploadfilestodo(filepath",{"_index":1615,"title":{},"body":{"controllers/UploadFilesController.html":{}}}],["this.usermodel",{"_index":1680,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.usermodel.aggregate",{"_index":1688,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.usermodel.countdocuments",{"_index":1685,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.username",{"_index":1380,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["this.userrepository.create",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create(createuserdata",{"_index":1818,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.createdoc",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.fetchcounts(filter",{"_index":1214,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.userrepository.findallwithpaginationoption",{"_index":1815,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["this.userrepository.findone(filter",{"_index":1816,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.updateone",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.updateone(filter",{"_index":1817,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.watch(matchstages",{"_index":630,"title":{},"body":{"injectables/ChangeStreamsService.html":{}}}],["this.userservice",{"_index":793,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["this.userservice.findone",{"_index":910,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.usersrepositary",{"_index":1464,"title":{},"body":{"injectables/RateService.html":{}}}],["this.usersservice.changepassword",{"_index":1775,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":878,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["this.usersservice.findall",{"_index":1761,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":876,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getprofile(this.req.me",{"_index":1762,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update",{"_index":1772,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.wait(10000",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["throw",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"classes/ChatGateway.html":{},"guards/JwtAuthGuard.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"injectables/RateService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["throwerror",{"_index":897,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["thrown",{"_index":717,"title":{},"body":{"classes/ChatGateway.html":{}}}],["time",{"_index":701,"title":{},"body":{"classes/ChatGateway.html":{}}}],["timestamps",{"_index":550,"title":{},"body":{"classes/BaseModel.html":{},"classes/Notification.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/User.html":{}}}],["title",{"_index":489,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/CreateNotificationDto.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["tmodel",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to(`${data.to",{"_index":720,"title":{},"body":{"classes/ChatGateway.html":{}}}],["tojson",{"_index":551,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["token",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"dependencies.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{}}}],["tokenpayload",{"_index":353,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["totaldocs",{"_index":1254,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["totalpages",{"_index":1255,"title":{},"body":{"classes/PaginatedDto.html":{}}}],["touch",{"_index":2006,"title":{},"body":{"index.html":{}}}],["transform",{"_index":554,"title":{},"body":{"classes/BaseModel.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/PaginationParams.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["transformer",{"_index":835,"title":{},"body":{"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/PaginationParams.html":{},"dependencies.html":{}}}],["true",{"_index":136,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseModel.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"classes/PaginationParams.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"classes/RedisIoAdapter.html":{},"guards/RolesGuard.html":{},"classes/Teacher.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"guards/WsJwtGuard.html":{},"modules/cacheOperationsModule.html":{},"miscellaneous/variables.html":{}}}],["true'].indexof(obj.allowpagination",{"_index":1273,"title":{},"body":{"classes/PaginationParams.html":{}}}],["try",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"injectables/ConsumerService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["ttl",{"_index":577,"title":{},"body":{"injectables/CacheConfigService.html":{}}}],["twilio",{"_index":1332,"title":{},"body":{"modules/PhoneConfirmationModule.html":{},"injectables/PhoneConfirmationService.html":{},"dependencies.html":{}}}],["twilio/lib/rest/verify/v2/service/verification",{"_index":1318,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["twilioclient",{"_index":1340,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["twiliomodule",{"_index":1330,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["twiliomodule.forrootasync",{"_index":1333,"title":{},"body":{"modules/PhoneConfirmationModule.html":{}}}],["twitter",{"_index":2012,"title":{},"body":{"index.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepository.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/BaseModel.html":{},"injectables/CacheConfigService.html":{},"classes/ChangePasswordDto.html":{},"injectables/ChangeStreamsService.html":{},"classes/ChatGateway.html":{},"classes/CheckCodeToResetDto.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LocalFilesInterceptorOptions.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"injectables/MessageQueueService.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"classes/PaginatedDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/Password.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"interfaces/SendNotificationMethod.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadCloudinary.html":{},"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{},"classes/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyPhoneDto.html":{},"classes/WebsocketsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"injectables/cacheOperationsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/queryParamsWithId.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2035,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1030,"title":{},"body":{"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/Rate.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":1032,"title":{},"body":{"classes/Notification.html":{},"classes/Rate.html":{}}}],["types.objectid(id",{"_index":1480,"title":{},"body":{"injectables/RateService.html":{}}}],["types.objectid(ratedobjectid",{"_index":1442,"title":{},"body":{"injectables/RateRepository.html":{}}}],["types.objectid(ratedone.id",{"_index":1473,"title":{},"body":{"injectables/RateService.html":{}}}],["typescript",{"_index":1977,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1949,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":912,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('access",{"_index":906,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('password",{"_index":1820,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorizedexception('your",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(err",{"_index":917,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["undefined",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChangeStreamsService.html":{},"guards/JwtAuthGuard.html":{},"classes/Notification.html":{},"injectables/NotificationService.html":{},"classes/Rate.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["uninstall",{"_index":1954,"title":{},"body":{"dependencies.html":{}}}],["uniqu",{"_index":1386,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["unique",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["uniquefields[i",{"_index":1385,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["unit",{"_index":1989,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"classes/ChatGateway.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/RateRepository.html":{},"injectables/RateService.html":{},"injectables/UploadFilesService.html":{},"injectables/UserRepository.html":{},"classes/WebsocketsExceptionFilter.html":{}}}],["unlicensed",{"_index":2028,"title":{},"body":{"properties.html":{}}}],["unprocessableentityexception",{"_index":1361,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["unsubscribe",{"_index":1166,"title":{},"body":{"injectables/NotificationService.html":{}}}],["unsubscribe(user",{"_index":1188,"title":{},"body":{"injectables/NotificationService.html":{}}}],["unsubscribetoken",{"_index":1056,"title":{},"body":{"controllers/NotificationController.html":{}}}],["unsubscribetoken(undefined",{"_index":1075,"title":{},"body":{"controllers/NotificationController.html":{}}}],["unwanted",{"_index":1672,"title":{},"body":{"injectables/UserRepository.html":{}}}],["unwind",{"_index":1698,"title":{},"body":{"injectables/UserRepository.html":{}}}],["update",{"_index":1795,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(filter",{"_index":1806,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateallvoid",{"_index":402,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["updateallvoid(filterquery",{"_index":427,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["updatedat",{"_index":541,"title":{},"body":{"classes/BaseModel.html":{}}}],["updatenotificationdto",{"_index":1534,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updateone",{"_index":403,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["updateone(filterquery",{"_index":430,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["updateonevoid",{"_index":404,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["updateonevoid(filterquery",{"_index":432,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["updateprofile",{"_index":1710,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofile(files",{"_index":1728,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatequery",{"_index":428,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["updateratedto",{"_index":1538,"title":{"classes/UpdateRateDto.html":{}},"body":{"classes/UpdateRateDto.html":{},"coverage.html":{}}}],["updateuserdata",{"_index":1729,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserdata.enabled",{"_index":1771,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdata.photo",{"_index":1769,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":277,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upload",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{}}}],["uploadcloudinary",{"_index":1552,"title":{"injectables/UploadCloudinary.html":{}},"body":{"injectables/UploadCloudinary.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["uploaddigitaloceanspace",{"_index":1570,"title":{"injectables/UploadDigitalOceanSpace.html":{}},"body":{"injectables/UploadDigitalOceanSpace.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadedfiles",{"_index":1732,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadfilescontroller",{"_index":1596,"title":{"controllers/UploadFilesController.html":{}},"body":{"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"coverage.html":{}}}],["uploadfilesmodule",{"_index":170,"title":{"modules/UploadFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadFilesModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadfilesservice",{"_index":1603,"title":{"injectables/UploadFilesService.html":{}},"body":{"controllers/UploadFilesController.html":{},"modules/UploadFilesModule.html":{},"injectables/UploadFilesService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadfilestodo",{"_index":1600,"title":{},"body":{"controllers/UploadFilesController.html":{},"injectables/UploadFilesService.html":{}}}],["uploadfilestodo(filepath",{"_index":1623,"title":{},"body":{"injectables/UploadFilesService.html":{}}}],["uploadlocal",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadlocal(@uploadedfile",{"_index":142,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadlocal(file",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["usage",{"_index":1667,"title":{},"body":{"injectables/UserRepository.html":{}}}],["useclass",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{}}}],["used",{"_index":1675,"title":{},"body":{"injectables/UserRepository.html":{}}}],["usefactory",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/PhoneConfirmationModule.html":{}}}],["usefilters",{"_index":666,"title":{},"body":{"classes/ChatGateway.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usefilters(new",{"_index":708,"title":{},"body":{"classes/ChatGateway.html":{}}}],["useguards",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChatGateway.html":{}}}],["useguards(googleoauthguard",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(wsjwtguard",{"_index":707,"title":{},"body":{"classes/ChatGateway.html":{}}}],["useguards(wsjwtguard)@usefilters(new",{"_index":662,"title":{},"body":{"classes/ChatGateway.html":{}}}],["useinterceptors",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(filefieldsinterceptor",{"_index":1764,"title":{},"body":{"controllers/UsersController.html":{}}}],["usepipes",{"_index":1734,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":270,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LoginResponse.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"injectables/RateService.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"classes/Student.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":1157,"title":{},"body":{"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{}}}],["user.dto",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":1541,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":1549,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:16",{"_index":1545,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:7",{"_index":1543,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.enabled",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["user.id",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":1412,"title":{},"body":{"classes/Rate.html":{},"modules/UsersModule.html":{}}}],["user.pushtokens",{"_index":1234,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.pushtokens.push",{"_index":1238,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.pushtokens.splice(parseint(index",{"_index":1236,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.role",{"_index":1519,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.save",{"_index":1237,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user?.[data",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user['pushtokens'].length",{"_index":1394,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["user['pushtokens'].splice(len",{"_index":1398,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["user['pushtokens'][len].devicetoken",{"_index":1395,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["usercounts",{"_index":1213,"title":{},"body":{"injectables/NotificationService.html":{}}}],["userdocument",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"interfaces/LoginResponse.html":{},"interfaces/MessageBody.html":{},"classes/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"interfaces/PushToken.html":{},"classes/Rate.html":{},"interfaces/SendNotificationMethod.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/typealiases.html":{}}}],["userdocument).password",{"_index":1387,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["userid",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RateService.html":{},"interfaces/TokenPayload.html":{},"classes/UserNotFoundException.html":{}}}],["usermodel",{"_index":1658,"title":{},"body":{"injectables/UserRepository.html":{}}}],["username",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"injectables/GoogleOauthStrategy.html":{},"interfaces/PushToken.html":{},"classes/RegisterDto.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["username.touppercase",{"_index":1371,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["username.trim",{"_index":1373,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["usernotfoundexception",{"_index":356,"title":{"classes/UserNotFoundException.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["userrepository",{"_index":107,"title":{"injectables/UserRepository.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChangeStreamsService.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"injectables/RateService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":1081,"title":{},"body":{"controllers/NotificationController.html":{},"interfaces/PushToken.html":{},"classes/Student.html":{},"classes/Teacher.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["userrole.student",{"_index":1790,"title":{},"body":{"modules/UsersModule.html":{}}}],["userrole.teacher",{"_index":1791,"title":{},"body":{"modules/UsersModule.html":{}}}],["users",{"_index":1034,"title":{},"body":{"classes/Notification.html":{},"classes/Rate.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1785,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":1749,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":1740,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/_user.model",{"_index":1507,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":1376,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.methods.isvalidpassword",{"_index":1400,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["userschema.methods.sendnotification",{"_index":1391,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["userschema.pre('save",{"_index":1381,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["userschema.virtual('nameandemail').get(function",{"_index":1378,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{}}}],["userscontroller",{"_index":1702,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscount",{"_index":1689,"title":{},"body":{"injectables/UserRepository.html":{}}}],["userservice",{"_index":765,"title":{},"body":{"injectables/ConsumerService.html":{},"guards/JwtAuthGuard.html":{}}}],["userservice.findone",{"_index":799,"title":{},"body":{"injectables/ConsumerService.html":{}}}],["usersids",{"_index":1222,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/UserRepository.html":{}}}],["usersmodule",{"_index":171,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepositary",{"_index":1456,"title":{},"body":{"injectables/RateService.html":{}}}],["usersservice",{"_index":275,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConsumerService.html":{},"injectables/GoogleOauthStrategy.html":{},"guards/JwtAuthGuard.html":{},"injectables/NotificationService.html":{},"controllers/PhoneConfirmationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utf",{"_index":1003,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["utils/constants",{"_index":772,"title":{},"body":{"injectables/ConsumerService.html":{},"classes/LoginDto.html":{},"injectables/MessageQueueService.html":{},"interfaces/PushToken.html":{},"classes/RegisterDto.html":{},"classes/User.html":{}}}],["utils/responses.model",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["utils/services/upload",{"_index":110,"title":{},"body":{"controllers/AppController.html":{}}}],["v2",{"_index":831,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["v4",{"_index":1588,"title":{},"body":{"injectables/UploadDigitalOceanSpace.html":{},"injectables/UploadFilesService.html":{}}}],["valid",{"_index":132,"title":{},"body":{"controllers/AppController.html":{}}}],["validate",{"_index":851,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["validate(req",{"_index":854,"title":{},"body":{"injectables/GoogleOauthStrategy.html":{}}}],["validationpipe",{"_index":1733,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["validator",{"_index":591,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CheckCodeToResetDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreatePhoneConfirmationDto.html":{},"classes/CreateRateDto.html":{},"classes/FilterQueryOptionsUser.html":{},"classes/FilterQueryUser.html":{},"classes/LoginDto.html":{},"classes/LoginFacebookDto.html":{},"classes/LoginGoogleDto.html":{},"classes/PaginationParams.html":{},"classes/ParamsWithId.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyPhoneDto.html":{},"dependencies.html":{},"classes/subscribeNotificationDto.html":{}}}],["value",{"_index":421,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"classes/Constants.html":{},"injectables/ConsumerService.html":{},"injectables/NotificationRepository.html":{},"classes/PaginationParams.html":{},"interfaces/PushToken.html":{},"injectables/RateRepository.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"miscellaneous/enumerations.html":{},"classes/subscribeNotificationDto.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":1812,"title":{},"body":{"injectables/UsersService.html":{}}}],["variable",{"_index":1863,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2042,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verificationchecks.create",{"_index":1352,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["verificationcode",{"_index":1304,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["verificationcode(verifydata",{"_index":1308,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["verificationinstance",{"_index":1317,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["verificationresult",{"_index":1351,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["verificationresult.status",{"_index":1354,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["verifications.create",{"_index":1347,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["verifydata",{"_index":1312,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["verifydata.code",{"_index":1353,"title":{},"body":{"injectables/PhoneConfirmationService.html":{}}}],["verifydata.phone",{"_index":1323,"title":{},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{}}}],["verifyphonedto",{"_index":1309,"title":{"classes/VerifyPhoneDto.html":{}},"body":{"controllers/PhoneConfirmationController.html":{},"injectables/PhoneConfirmationService.html":{},"classes/VerifyPhoneDto.html":{},"coverage.html":{}}}],["verifyuserbytokenfromsocket",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyuserbytokenfromsocket(token",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":2026,"title":{},"body":{"properties.html":{}}}],["virtuals",{"_index":553,"title":{},"body":{"classes/BaseModel.html":{},"interfaces/PushToken.html":{},"classes/User.html":{}}}],["void",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"classes/ChatGateway.html":{},"interfaces/MessageBody.html":{},"injectables/NotificationService.html":{},"interfaces/SendNotificationMethod.html":{},"classes/WebsocketsExceptionFilter.html":{},"interfaces/queryParamsWithId.html":{}}}],["wait",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["wait(ms",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["want",{"_index":1284,"title":{},"body":{"classes/Password.html":{}}}],["watch",{"_index":405,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{},"index.html":{}}}],["watch(pipeline",{"_index":434,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/NotificationRepository.html":{},"injectables/RateRepository.html":{},"injectables/UserRepository.html":{}}}],["web",{"_index":1365,"title":{},"body":{"interfaces/PushToken.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["webpush",{"_index":478,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["webpushconfig",{"_index":482,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{}}}],["website",{"_index":2010,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":669,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":654,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketsexceptionfilter",{"_index":679,"title":{"classes/WebsocketsExceptionFilter.html":{}},"body":{"classes/ChatGateway.html":{},"classes/WebsocketsExceptionFilter.html":{},"coverage.html":{}}}],["websocketsexceptionfilter())@subscribemessage('test",{"_index":663,"title":{},"body":{"classes/ChatGateway.html":{}}}],["world",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["wow",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["wsexception",{"_index":670,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["wsexception('test",{"_index":713,"title":{},"body":{"classes/ChatGateway.html":{}}}],["wsjwtguard",{"_index":676,"title":{"guards/WsJwtGuard.html":{}},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["www.google.com",{"_index":528,"title":{},"body":{"interfaces/BaseMessageWithToken.html":{},"interfaces/BaseMessageWithTokenTesting.html":{},"interfaces/MessageBody.html":{},"controllers/NotificationController.html":{},"interfaces/SendNotificationMethod.html":{},"interfaces/queryParamsWithId.html":{},"miscellaneous/variables.html":{}}}],["x1b[31m%s\\x1b[0m",{"_index":998,"title":{},"body":{"injectables/MessageQueueService.html":{}}}],["x1b[32m%s\\x1b[0m",{"_index":789,"title":{},"body":{"injectables/ConsumerService.html":{},"injectables/MessageQueueService.html":{}}}],["yes",{"_index":439,"title":{},"body":{"classes/BaseAbstractRepository.html":{},"injectables/MessageQueueService.html":{},"injectables/NotificationRepository.html":{},"injectables/NotificationService.html":{},"injectables/RateRepository.html":{},"classes/RedisIoAdapter.html":{},"classes/UserNotFoundException.html":{},"injectables/UserRepository.html":{}}}],["you'd",{"_index":2002,"title":{},"body":{"index.html":{}}}],["z",{"_index":749,"title":{},"body":{"classes/Constants.html":{}}}],["z]{2",{"_index":751,"title":{},"body":{"classes/Constants.html":{}}}],["za",{"_index":748,"title":{},"body":{"classes/Constants.html":{}}}],["zoom",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChangeStreamsModule.html":{},"modules/ChatModule.html":{},"modules/MessageQueueModule.html":{},"modules/NotificationModule.html":{},"modules/PhoneConfirmationModule.html":{},"modules/RateModule.html":{},"modules/UploadFilesModule.html":{},"modules/UsersModule.html":{},"modules/cacheOperationsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/filters/http-exception.filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { MongoError } from 'mongodb';\nimport * as MongooseError from 'mongoose/lib/error';\n@Catch()\nexport class AllExceptionsFilter\n  implements ExceptionFilter\n{\n  catch(exception: T, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    /**\n     * @description Exception json response\n     * @param message\n     */\n    const responseMessage = (type, message, statusCode, errorObject = null) => {\n      response.status(statusCode).json({\n        remah:'remah',\n        statusCode,\n        path: request.url,\n        errorType: type,\n        errorMessage: message,\n        errorObject,\n      });\n    };\n\n    // Throw an exceptions for either\n    if (exception instanceof MongooseError || exception instanceof MongoError) {\n      responseMessage(\n        'MONGO_ERROR ' + exception.name,\n        exception.message,\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    } else {\n      // console.log(exception);\n      responseMessage(\n        'Error',\n        exception.message,\n        exception instanceof HttpException\n          ? exception.getStatus()\n          : HttpStatus.INTERNAL_SERVER_ERROR,\n        exception,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getHello\n                            \n                            \n                                    \n                                    \n                                health\n                            \n                            \n                                    \n                                    \n                                    \n                                uploadLocal\n                            \n                            \n                                wait\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        health\n                        \n                    \n                \n            \n            \n                \n                    \n                    health()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('health')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { healthStatus: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        uploadLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadLocal(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('upload-local')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Express.Multer.File\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms)\n                \n            \n\n\n            \n                \n                    Defined in src/app.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Controller, Get, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public } from './auth/decorators/public.decorator';\nimport { MessageQueueService } from './message-queue/message-queue.service';\nimport * as os from 'os';\nimport { UserRepository } from 'src/users/users.repository';\nimport LocalFilesInterceptor from './utils/services/upload-local';\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService, // private readonly messageQueueService: MessageQueueService,\n    private readonly UserRepository: UserRepository\n  ) { }\n\n  @Public()\n  @Get()\n  async getHello() {\n    // await this.wait(10000)\n    // let test = await this.UserRepository.findOne({})\n    // console.log(test)\n    return { host: os.hostname(), wow: 'successfully LoOoTaA' };\n  }\n\n  wait(ms) {\n    let start = new Date().getTime();\n    let end = start;\n    while (end  {\n      if (!file.mimetype.includes('image')) {\n        return callback(new BadRequestException('Provide a valid image'), false);\n      }\n      callback(null, true);\n    },\n    limits: {\n      fileSize: Math.pow(1024, 2) // 1MB\n    }\n  }))\n  uploadLocal(@UploadedFile() file: Express.Multer.File) {\n    return file\n  }\n\n  // @Public()\n  // @Get('publisher')\n  // async publish() {\n  //   await this.messageQueueService.publishToChannel({\n  //     routingKey: 'test1',\n  //     exchangeName: '',\n  //     data: 'q',\n  //   });\n  //   return 'OK';\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPhoneConfirmationModule\n\nPhoneConfirmationModule\n\nAppModule -->\n\nPhoneConfirmationModule->AppModule\n\n\n\n\n\nRateModule\n\nRateModule\n\nAppModule -->\n\nRateModule->AppModule\n\n\n\n\n\nUploadFilesModule\n\nUploadFilesModule\n\nAppModule -->\n\nUploadFilesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            PhoneConfirmationModule\n                        \n                        \n                            RateModule\n                        \n                        \n                            UploadFilesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module, UseInterceptors } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { PhoneConfirmationModule } from './phone-confirmation/phone-confirmation.module';\nimport { DatabaseModule } from './database.module';\nimport { ChatModule } from './chat/chat.module';\nimport { MessageQueueModule } from './message-queue/message-queue-publisher.module';\nimport { CacheConfigService } from './cache/cacheConfigService';\nimport { cacheOperationsModule } from './cache/cache.module';\nimport { NotificationModule } from './notification/notification.module';\nimport { ChangeStreamsModule } from './change-streams/change-streams.module';\nimport { RateModule } from './rate/rate.module';\nimport { UploadFilesModule } from './upload-files/upload-files.module';\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    DatabaseModule,\n    UsersModule,\n    AuthModule,\n    PhoneConfirmationModule,\n    ChatModule,\n    NotificationModule,\n    RateModule,\n    UploadFilesModule,\n    // ChangeStreamsModule,\n    // MessageQueueModule,\n    // cacheOperationsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                checkCodeToReset\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginFacebook\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                loginGoogle\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        checkCodeToReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkCodeToReset(undefined: CheckCodeToResetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('/check-code-to-reset')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CheckCodeToResetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(LoginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    LoginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        loginFacebook\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginFacebook(undefined: LoginFacebookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('/login-facebook')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginFacebookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        loginGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginGoogle(_loginGoogleData: LoginGoogleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseGuards(GoogleOauthGuard)@Post('/login-googel')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _loginGoogleData\n                                    \n                                                LoginGoogleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(RegisterDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    RegisterDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(undefined: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpStatus,\n  HttpCode,\n  UseGuards,\n  Inject,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { Public } from './decorators/public.decorator';\nimport { PhoneConfirmationService } from 'src/phone-confirmation/phone-confirmation.service';\nimport { LoginGoogleDto } from './dto/login-google.dto';\nimport { LoginFacebookDto } from './dto/login-facebook.dto';\nimport { GoogleOauthGuard } from './guards/googleToken.guard';\nimport { REQUEST } from '@nestjs/core';\nimport { User, UserDocument } from 'src/users/models/_user.model';\nimport { CheckCodeToResetDto } from './dto/check-code-to-reset.dto';\nimport { UsersService } from 'src/users/users.service';\nimport { UpdateUserDto } from 'src/users/dto/update-user.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { StudentDocument } from 'src/users/models/student.model';\nimport { FilterQuery } from 'mongoose';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { UserRepository } from 'src/users/users.repository';\nimport { LoginResponse } from './utils/Responses.model';\n\n@ApiTags('AUTH')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userRepository: UserRepository,\n    private readonly phoneConfirmationService: PhoneConfirmationService,\n    @Inject(REQUEST) private readonly req: Record,\n  ) {}\n\n  @Public()\n  @Post('/signup')\n  async register(@Body() RegisterDto: RegisterDto): Promise {\n    let user = await this.authService.register(RegisterDto);\n    await this.phoneConfirmationService.sendSMS({\n      phone: RegisterDto.phone,\n    });\n    return user;\n  }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('/login')\n  async login(@Body() LoginDto: LoginDto): Promise {\n    return await this.authService.login(LoginDto);\n  }\n\n  @Public()\n  @UseGuards(GoogleOauthGuard)\n  @Post('/login-googel')\n  async loginGoogle(\n    @Body() _loginGoogleData: LoginGoogleDto,\n  ): Promise {\n    return await this.authService.loginGoogle(this.req.me as UserDocument);\n  }\n\n  @Public()\n  @Post('/login-facebook')\n  async loginFacebook(\n    @Body() { accessToken }: LoginFacebookDto,\n  ): Promise {\n    return await this.authService.loginFacebook({ accessToken });\n  }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('/check-code-to-reset')\n  async checkCodeToReset(\n    @Body() { phone, code }: CheckCodeToResetDto,\n  ): Promise {\n    return await this.phoneConfirmationService.verificationCode({\n      phone,\n      code,\n    });\n  }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('reset-password')\n  async resetPassword(\n    @Body() { phone, code, password }: ResetPasswordDto,\n  ): Promise {\n    await this.phoneConfirmationService.verificationCode({ phone, code });\n    return await this.userRepository.updateOne(\n      { phone } as FilterQuery,\n      { password } as UpdateUserDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nPhoneConfirmationModule\n\nPhoneConfirmationModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPhoneConfirmationModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleOauthStrategy\n\nGoogleOauthStrategy\n\nAuthModule -->\n\nGoogleOauthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleOauthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PhoneConfirmationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { PhoneConfirmationModule } from 'src/phone-confirmation/phone-confirmation.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtAuthGuard } from './guards/jwtAuth.guard';\nimport { RolesGuard } from './guards/roles.guard';\nimport { GoogleOauthStrategy } from './strategies/googleStrategy.passport';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    UsersModule,\n    PhoneConfirmationModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    GoogleOauthStrategy,\n    { provide: APP_GUARD, useClass: JwtAuthGuard },\n    { provide: APP_GUARD, useClass: RolesGuard },\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginFacebook\n                            \n                            \n                                    Async\n                                loginGoogle\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                verifyUserByTokenFromSocket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginFacebook\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginFacebook(undefined: LoginFacebookDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginFacebookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginGoogle(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyUserByTokenFromSocket\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyUserByTokenFromSocket(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  HttpException,\n  HttpStatus,\n  BadRequestException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/users.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport * as jwt from 'jsonwebtoken';\nimport TokenPayload from './interfaces/tokenPayload.interface';\nimport { LoginGoogleDto } from './dto/login-google.dto';\nimport { User, UserDocument } from 'src/users/models/_user.model';\nimport { LoginFacebookDto } from './dto/login-facebook.dto';\nimport axios from 'axios';\nimport { ConfigService } from '@nestjs/config';\nimport { UserNotFoundException } from 'src/users/exceptions/userNotFound.exception';\nimport { JwtService } from '@nestjs/jwt';\nimport { StudentDocument } from 'src/users/models/student.model';\nimport { CreateQuery, FilterQuery } from 'mongoose';\nimport { UserRepository } from 'src/users/users.repository';\nimport { LoginResponse } from './utils/Responses.model';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register(registerationData: RegisterDto): Promise {\n    let user = await this.userRepository.findOne({\n      phone: registerationData.phone,\n    } as FilterQuery);\n    if (user) throw new BadRequestException('phone should be unique');\n    // user = await this.userRepository.create({\n    //   ...registerationData,\n    //   role: 'student',\n    // } as CreateQuery);\n    user = await this.userRepository.createDoc({\n      ...registerationData,\n      role: 'student',\n    } as User);\n    return user;\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const { phone } = loginDto;\n    let user = await this.userRepository.findOne({\n      phone,\n    } as FilterQuery);\n    if (!user) throw new UserNotFoundException();\n    if (!(await (user as any).isValidPassword(loginDto.password)))\n      throw new UnauthorizedException('invalid credentials');\n\n    if (user.enabled === false)\n      throw new UnauthorizedException('your account is deactivated');\n    const payload: TokenPayload = {\n      userId: user.id,\n    };\n    const options = {};\n    const token = jwt.sign(payload, process.env.JWT_SECRET, options);\n    return { user, token };\n  }\n\n  async loginGoogle(user: UserDocument): Promise {\n    const options = {};\n    const payload: TokenPayload = {\n      userId: user.id,\n    };\n    const token = jwt.sign(payload, process.env.JWT_SECRET, options);\n\n    return { user, token };\n  }\n\n  async loginFacebook({\n    accessToken,\n  }: LoginFacebookDto): Promise {\n    const { data } = await axios(\n      `${this.configService.get(\n        'facebookUrl',\n      )}&access_token=${accessToken}`,\n    );\n    const { id, name, email } = data;\n    let user = await this.userRepository.findOne({\n      facebookId: id,\n    } as FilterQuery);\n    if (!user) {\n      user = await this.userRepository.create({\n        username: name,\n        email,\n        facebookId: id,\n        role: 'student',\n      } as CreateQuery);\n    }\n    return user;\n  }\n\n  async verifyUserByTokenFromSocket(\n    token: string,\n  ): Promise {\n    try {\n      const decoded: TokenPayload = await this.jwtService.verify(token);\n      if (decoded.userId === undefined) {\n        return false;\n      }\n\n      const user = await this.userRepository.findOne({\n        _id: decoded.userId,\n      } as FilterQuery);\n\n      if (!user || user.enabled === false) {\n        return false;\n      }\n      return user;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAbstractRepository.html":{"url":"classes/BaseAbstractRepository.html","title":"class - BaseAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/base.abstract.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                createDoc\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                findAllWithPaginationOption\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateAllVoid\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOneVoid\n                            \n                            \n                                    Public\n                                watch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(model: Model>)\n                    \n                \n                        \n                            \n                                Defined in src/utils/base.abstract.repository.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Model>\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/base.abstract.repository.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateQuery>)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createDoc\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDoc(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(filterQuery: FilterQuery>)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllWithPaginationOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithPaginationOption(queryFiltersAndOptions: any, arrayOfFilters: string[], extraOptions: PaginateOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryFiltersAndOptions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    arrayOfFilters\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    extraOptions\n                                    \n                                            PaginateOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filterQuery: FilterQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateAllVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOneVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOneVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(pipeline?: Array>, options?: ChangeStreamOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/base.abstract.repository.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pipeline\n                                    \n                                            Array>\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ChangeStreamOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ChangeStream\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport * as _ from 'lodash';\nimport {\n  CreateQuery,\n  FilterQuery,\n  UpdateQuery,\n  Model,\n  Document,\n  PaginateOptions,\n  PaginateModel,\n  PaginateResult,\n  QueryOptions,\n} from 'mongoose';\nimport { ChangeStreamOptions, ChangeStream } from 'mongodb';\n\ntype TDocument = T & Document;\nexport abstract class BaseAbstractRepository {\n  private model: Model>;\n\n  protected constructor(model: Model>) {\n    this.model = model;\n  }\n\n  public async create(data: CreateQuery>): Promise> {\n    const newDocument = new this.model(data).save();\n    return newDocument;\n  }\n\n  public async createDoc(data: T): Promise> {\n    const newDocument = new this.model(data).save();\n    return newDocument;\n  }\n\n  public async findOne(\n    filterQuery: FilterQuery>,\n    options: QueryOptions = {},\n    projection: any = {},\n  ): Promise> {\n    const doc = await this.model\n      .findOne(filterQuery, projection)\n      .setOptions(options);\n    return doc;\n  }\n\n  public async findAllWithPaginationOption(\n    queryFiltersAndOptions: any,\n    arrayOfFilters: string[],\n    extraOptions: PaginateOptions = {},\n  ): Promise> | TDocument[]> {\n    const filters: FilterQuery> = _.pick(\n      queryFiltersAndOptions,\n      arrayOfFilters,\n    );\n    const options: PaginateOptions = _.pick(queryFiltersAndOptions, [\n      'page',\n      'limit',\n    ]);\n    let docs;\n    if (queryFiltersAndOptions.allowPagination) {\n      docs = await (this.model as PaginateModel>).paginate(\n        filters,\n        { ...options, ...extraOptions },\n      );\n    } else {\n      docs = await this.model.find(filters).setOptions(options);\n    }\n    return docs;\n  }\n\n  public async deleteOne(\n    filterQuery: FilterQuery>,\n  ): Promise {\n    await this.model.deleteOne(filterQuery);\n  }\n\n  public async updateOne(\n    filterQuery: FilterQuery>,\n    updateQuery: UpdateQuery>,\n    options: QueryOptions = {},\n    projection: any = {},\n  ): Promise> {\n    const doc = await this.model\n      .findOne(filterQuery, projection)\n      .setOptions(options);\n    if (!doc) throw new NotFoundException(`${this.model.modelName} not found`);\n    await doc.set(updateQuery).save();\n    return doc;\n  }\n\n  public async updateOneVoid(\n    filterQuery: FilterQuery>,\n    updateQuery: UpdateQuery>,\n    options: QueryOptions = {},\n  ): Promise {\n    await this.model.updateOne(filterQuery, updateQuery);\n  }\n  public async updateAllVoid(\n    filterQuery: FilterQuery>,\n    updateQuery: UpdateQuery>,\n    options: QueryOptions = {},\n  ): Promise {\n    await this.model.updateMany(filterQuery, updateQuery);\n  }\n\n  public watch(\n    pipeline?: Array>,\n    options?: ChangeStreamOptions,\n  ): ChangeStream {\n    return this.model.watch(pipeline, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseMessageWithToken.html":{"url":"interfaces/BaseMessageWithToken.html","title":"interface - BaseMessageWithToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseMessageWithToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/Types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            android\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apns\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fcmOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            notification\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webpush\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        android\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        android:     AndroidConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AndroidConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apns:     ApnsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ApnsConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fcmOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fcmOptions:     FcmOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FcmOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notification:         Notification\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Notification\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webpush\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webpush:     WebpushConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     WebpushConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  AndroidConfig,\n  ApnsConfig,\n  FcmOptions,\n  Notification,\n  WebpushConfig,\n} from 'firebase-admin/lib/messaging/messaging-api';\nimport { UserDocument } from 'src/users/models/_user.model';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\n\nexport interface MessageBody {\n  title: string;\n  body: string;\n  imageUrl?: string;\n  icon?: string;\n  requireInteraction?: boolean;\n  link?: string;\n  data?: {\n    [key: string]: string;\n  };\n  mobileLink?: string;\n  actions?: {\n    title: string;\n    action: string;\n    icon?: string;\n  }[];\n}\nexport interface BaseMessageWithToken {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token?: string;\n}\n\nexport interface BaseMessageWithTokenTesting {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token: string;\n}\n\n//  For More Info to custumize\n//  https://firebase.google.com/docs/cloud-messaging/send-message\nexport const encodingDataForAllDevices = (\n  messageData: MessageBody,\n): BaseMessageWithToken => {\n  const notificationWeb = {\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    /*     requireInteraction: msg.requireInteraction ?? false, */\n    image: messageData.imageUrl,\n    actions: messageData.actions,\n    data: messageData.data,\n  };\n  const notificationMobile = {\n    imageUrl: messageData.imageUrl,\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    color: '#00ff00', //testing MUSSSSSSST BE HEXA\n    notificationCount: 5,\n    clickAction: messageData.mobileLink,\n    channelId: '', ////DEPLOY\n  };\n  return {\n    webpush: {\n      /*    headers: {\n        image: messageData.imageUrl,\n      }, */\n      notification: notificationWeb,\n      data: messageData.data,\n\n      fcmOptions: {\n        link: messageData.link ? messageData.link : 'www.google.com',\n      },\n    },\n    android: {\n      data: messageData.data,\n      notification: notificationMobile,\n    },\n    notification: {\n      body: messageData.body,\n      imageUrl: messageData.imageUrl,\n      title: messageData.title,\n    },\n    apns: {\n      payload: {\n        aps: {\n          'mutable-content': 1,\n        },\n      },\n      fcmOptions: {\n        imageUrl: messageData.imageUrl,\n      },\n    },\n  };\n};\n\nexport interface SendNotificationMethod extends UserDocument {\n  sendNotification: (message: BaseMessageWithToken) => void;\n}\nexport interface queryParamsWithId extends PaginationParams {\n  targetUsers: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseMessageWithTokenTesting.html":{"url":"interfaces/BaseMessageWithTokenTesting.html","title":"interface - BaseMessageWithTokenTesting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseMessageWithTokenTesting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/Types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            android\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apns\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fcmOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            notification\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webpush\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        android\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        android:     AndroidConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AndroidConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apns:     ApnsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ApnsConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fcmOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fcmOptions:     FcmOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FcmOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notification:         Notification\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Notification\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webpush\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webpush:     WebpushConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     WebpushConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  AndroidConfig,\n  ApnsConfig,\n  FcmOptions,\n  Notification,\n  WebpushConfig,\n} from 'firebase-admin/lib/messaging/messaging-api';\nimport { UserDocument } from 'src/users/models/_user.model';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\n\nexport interface MessageBody {\n  title: string;\n  body: string;\n  imageUrl?: string;\n  icon?: string;\n  requireInteraction?: boolean;\n  link?: string;\n  data?: {\n    [key: string]: string;\n  };\n  mobileLink?: string;\n  actions?: {\n    title: string;\n    action: string;\n    icon?: string;\n  }[];\n}\nexport interface BaseMessageWithToken {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token?: string;\n}\n\nexport interface BaseMessageWithTokenTesting {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token: string;\n}\n\n//  For More Info to custumize\n//  https://firebase.google.com/docs/cloud-messaging/send-message\nexport const encodingDataForAllDevices = (\n  messageData: MessageBody,\n): BaseMessageWithToken => {\n  const notificationWeb = {\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    /*     requireInteraction: msg.requireInteraction ?? false, */\n    image: messageData.imageUrl,\n    actions: messageData.actions,\n    data: messageData.data,\n  };\n  const notificationMobile = {\n    imageUrl: messageData.imageUrl,\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    color: '#00ff00', //testing MUSSSSSSST BE HEXA\n    notificationCount: 5,\n    clickAction: messageData.mobileLink,\n    channelId: '', ////DEPLOY\n  };\n  return {\n    webpush: {\n      /*    headers: {\n        image: messageData.imageUrl,\n      }, */\n      notification: notificationWeb,\n      data: messageData.data,\n\n      fcmOptions: {\n        link: messageData.link ? messageData.link : 'www.google.com',\n      },\n    },\n    android: {\n      data: messageData.data,\n      notification: notificationMobile,\n    },\n    notification: {\n      body: messageData.body,\n      imageUrl: messageData.imageUrl,\n      title: messageData.title,\n    },\n    apns: {\n      payload: {\n        aps: {\n          'mutable-content': 1,\n        },\n      },\n      fcmOptions: {\n        imageUrl: messageData.imageUrl,\n      },\n    },\n  };\n};\n\nexport interface SendNotificationMethod extends UserDocument {\n  sendNotification: (message: BaseMessageWithToken) => void;\n}\nexport interface queryParamsWithId extends PaginationParams {\n  targetUsers: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseModel.html":{"url":"classes/BaseModel.html","title":"class - BaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/base.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/base.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/base.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/base.model.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    getters: true,\n    virtuals: true,\n    transform: (_, doc: Record) => {\n      delete doc.__v;\n      delete doc._id;\n      return {\n        ...doc,\n      };\n    },\n  },\n})\nexport abstract class BaseModel {\n  id: string; // _id getter as string\n  createdAt: Date; // provided by schemaOptions.timestamps\n  updatedAt: Date; // provided by schemaOptions.timestamps\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheConfigService.html":{"url":"injectables/CacheConfigService.html","title":"injectable - CacheConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cache/cacheConfigService.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCacheOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/cache/cacheConfigService.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCacheOptions\n                        \n                    \n                \n            \n            \n                \ncreateCacheOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/cache/cacheConfigService.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     CacheModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CacheModuleOptions,\n  CacheOptionsFactory,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n\n@Injectable()\nexport class CacheConfigService implements CacheOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n  createCacheOptions(): CacheModuleOptions {\n    return {\n      store: redisStore,\n      host: this.configService.get('REDIS_HOST'),\n      port: this.configService.get('REDIS_PORT'),\n      ttl: 0,\n      // auth_pass: this.configService.get('REDIS_PASS'),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/change-password.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nexport class ChangePasswordDto {\n  @IsString()\n  @IsNotEmpty()\n  oldPassword: string;\n\n  @IsString()\n  @IsNotEmpty()\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChangeStreamsModule.html":{"url":"modules/ChangeStreamsModule.html","title":"module - ChangeStreamsModule","body":"\n                   \n\n\n\n\n    Modules\n    ChangeStreamsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChangeStreamsModule\n\n\n\ncluster_ChangeStreamsModule_imports\n\n\n\ncluster_ChangeStreamsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nChangeStreamsModule\n\nChangeStreamsModule\n\nChangeStreamsModule -->\n\nDatabaseModule->ChangeStreamsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nChangeStreamsModule -->\n\nUsersModule->ChangeStreamsModule\n\n\n\n\n\nChangeStreamsService\n\nChangeStreamsService\n\nChangeStreamsModule -->\n\nChangeStreamsService->ChangeStreamsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/change-streams/change-streams.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChangeStreamsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { DatabaseModule } from 'src/database.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { ChangeStreamsService } from './change-streams.service';\n\n@Module({\n  providers: [ChangeStreamsService],\n  imports: [ConfigModule.forRoot(), DatabaseModule, UsersModule],\n})\nexport class ChangeStreamsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChangeStreamsService.html":{"url":"injectables/ChangeStreamsService.html","title":"injectable - ChangeStreamsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChangeStreamsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/change-streams/change-streams.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeStreams\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/change-streams/change-streams.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeStreams\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeStreams()\n                \n            \n\n\n            \n                \n                    Defined in src/change-streams/change-streams.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/change-streams/change-streams.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ChangeStream } from 'mongodb';\nimport * as storage from 'node-persist';\nimport * as EJSON from 'mongodb-extjson';\nimport { UserRepository } from 'src/users/users.repository';\n\n@Injectable()\nexport class ChangeStreamsService implements OnApplicationBootstrap {\n  async onApplicationBootstrap(): Promise {\n    this.changeStreams();\n  }\n\n  constructor(private readonly userRepository: UserRepository) {}\n\n  async changeStreams(): Promise {\n    console.log('From Change Streams Service');\n    const matchStages = [\n      {\n        $match: {\n          $or: [\n            { 'fullDocument.name': 'remah' }, // necessary to capture inserts\n          ],\n        },\n      },\n    ];\n\n    const CS_TOKEN_KEY = 'changeStreamResumeToken';\n    try {\n      let changeStream: ChangeStream;\n      await storage.init({ dir: 'storageForResumeToken' });\n      const token = await storage.getItem(CS_TOKEN_KEY);\n      if (token !== undefined) {\n        console.log(`using resume token: ${token}`);\n        changeStream = this.userRepository.watch(matchStages, {\n          resumeAfter: EJSON.parse(token),\n        });\n      } else {\n        changeStream = this.userRepository.watch(matchStages);\n      }\n      console.log('polling change stream...');\n      changeStream.on('change', (change, err) => {\n        if (err) {\n          console.log('########## ', err);\n        }\n        console.log(change);\n        let resumeToken = EJSON.stringify(change._id);\n        storage.setItem(CS_TOKEN_KEY, resumeToken);\n      });\n    } catch (err) {\n      console.log('error from catch section');\n      console.log(err);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                testListen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        testListen\n                        \n                    \n                \n            \n            \n                \n                    \n                    testListen(data: any, me: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(WsJwtGuard)@UseFilters(new WebsocketsExceptionFilter())@SubscribeMessage('test-listen')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    me\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseFilters, UseGuards } from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  WsException,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { AuthService } from 'src/auth/auth.service';\nimport { AuthUser } from 'src/auth/decorators/me.decorator';\nimport { User, UserDocument } from 'src/users/models/_user.model';\nimport { WsJwtGuard } from './guards/ws-jwt.guard';\nimport { WebsocketsExceptionFilter } from './filters/WebsocketsException.filter';\nimport * as os from 'os';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*',\n  },\n  namespace: 'chat',\n})\nexport class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer()\n  server: Server;\n\n  constructor(private readonly authService: AuthService) {}\n  async handleConnection(@ConnectedSocket() client: Socket) {\n    console.log(\n      'connected from : ',\n      os.hostname(),\n      ` as ${client.handshake.headers.authorization}`,\n    );\n    if (!client.handshake.headers.authorization) {\n      console.log('no token provided');\n      client.disconnect();\n      return;\n    }\n    client.join(`${client.handshake.headers.authorization}`);\n    // if (!client.handshake.headers.authorization) {\n    //   console.log('no token provided');\n    //   client.disconnect();\n    //   return;\n    // }\n\n    // const user: UserDocument | false =\n    //   await this.authService.verifyUserByTokenFromSocket(\n    //     client.handshake.headers.authorization.split(' ')[1],\n    //   );\n    // // console.log(user);\n    // if (user) {\n    // client.join(`user_${user._id}`);\n    // client.data.user = user;// try here to save data at client object , instead of call every time wsJwtGuard 'but make sure about security'\n    // } else client.disconnect();\n  }\n\n  handleDisconnect(@ConnectedSocket() client: Socket) {\n    console.log('disconnected');\n  }\n\n  @UseGuards(WsJwtGuard)\n  @UseFilters(new WebsocketsExceptionFilter())\n  @SubscribeMessage('test-listen')\n  async testListen(@MessageBody() data: any, @AuthUser() me: any) {\n    // console.log(data, me.role);\n    // throw new WsException('test exception event'); // Nest will handle the thrown exception and emit the exception message\n    this.server\n      .to(`${data.to}`)\n      .emit('test-emit', {\n        msg: data,\n        host: os.hostname(),\n        sender: me,\n      });\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthModule->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { ChatGateway } from './chat.gateway';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    AuthModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [ChatGateway],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckCodeToResetDto.html":{"url":"classes/CheckCodeToResetDto.html","title":"class - CheckCodeToResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckCodeToResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/check-code-to-reset.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/check-code-to-reset.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(Constants.PHONE_REGX, {message: 'phone is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/check-code-to-reset.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, Matches } from 'class-validator';\nimport { Constants } from 'src/utils/constants';\nexport class CheckCodeToResetDto {\n  @IsString()\n  @Matches(Constants.PHONE_REGX, { message: 'phone is invalid' })\n  phone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Constants.html":{"url":"classes/Constants.html","title":"class - Constants","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Constants\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/constants.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                EMAIL_REGX\n                            \n                            \n                                    Static\n                                    Readonly\n                                GET_POSTS_CACHE_KEY\n                            \n                            \n                                    Static\n                                    Readonly\n                                MessageQueues\n                            \n                            \n                                    Static\n                                    Readonly\n                                PHONE_REGX\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        EMAIL_REGX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                    \n                \n                    \n                        \n                                Defined in src/utils/constants.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        GET_POSTS_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_POSTS_CACHE'\n                    \n                \n                    \n                        \n                                Defined in src/utils/constants.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        MessageQueues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    TEST: 'test',\n    TEST1: 'test1',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/utils/constants.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        PHONE_REGX\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\d{1,14}$/\n                    \n                \n                    \n                        \n                                Defined in src/utils/constants.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Constants {\n  public static readonly EMAIL_REGX =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  public static readonly PHONE_REGX =\n    /\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\d{1,14}$/;\n  public static readonly MessageQueues = {\n    TEST: 'test',\n    TEST1: 'test1',\n  };\n\n  public static readonly GET_POSTS_CACHE_KEY = 'GET_POSTS_CACHE';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsumerService.html":{"url":"injectables/ConsumerService.html","title":"injectable - ConsumerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConsumerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message-queue/test1-consumer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test1\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                testConsumer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/message-queue/test1-consumer.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/message-queue/test1-consumer.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        testConsumer\n                        \n                    \n                \n            \n            \n                \n                    \n                    testConsumer()\n                \n            \n\n\n            \n                \n                    Defined in src/message-queue/test1-consumer.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        test1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'test'\n                    \n                \n                    \n                        \n                                Defined in src/message-queue/test1-consumer.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport * as amqp from 'amqp-connection-manager';\nimport { Channel } from 'amqplib';\nimport { UsersService } from 'src/users/users.service';\nimport { Constants } from '../utils/constants';\n// import { RecieverOperationMessage } from './IMessageQueueService';\n\n@Injectable()\nexport class ConsumerService implements OnApplicationBootstrap {\n  async onApplicationBootstrap(): Promise {\n    this.testConsumer();\n  }\n\n  public test1 = 'test';\n\n  constructor(private readonly userService: UsersService) {}\n\n  // consume messages from RabbitMQ\n  async testConsumer(): Promise {\n    console.log('here')\n    let connection: amqp.AmqpConnectionManager = await amqp.connect(\n      process.env.AMQP_URL,\n    );\n    let channel: amqp.ChannelWrapper = await connection.createChannel({\n      setup: function (channel: Channel) {\n        return Promise.all([channel.prefetch(2)]);\n      },\n    });\n    connection.on('connect', function () {\n      console.log(\n        '\\x1b[32m%s\\x1b[0m',\n        '[!] AMQP Connected from test consumer: ',\n        process.env.AMQP_URL,\n      );\n    });\n    return new Promise((resolve, reject) => {\n      let userService = this.userService;\n      channel.consume(Constants.MessageQueues.TEST1, async function (msg) {\n        // parse message\n        let msgBody = msg.content.toString();\n        // let data = JSON.parse(msgBody);\n        try {\n          let test = await userService.findOne({});\n          console.log(test);\n          console.log(msgBody);\n          await channel.ack(msg);\n        } catch (err) {\n          console.log(err);\n          await channel.ack(msg);\n        }\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/create-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/create-notification.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/create-notification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateNotificationDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  body: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePhoneConfirmationDto.html":{"url":"classes/CreatePhoneConfirmationDto.html","title":"class - CreatePhoneConfirmationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePhoneConfirmationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/phone-confirmation/dto/create-phone-confirmation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(Constants.PHONE_REGX, {message: 'phone is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/phone-confirmation/dto/create-phone-confirmation.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString, Matches } from 'class-validator';\nimport { Constants } from 'src/utils/constants';\n\nexport class CreatePhoneConfirmationDto {\n  @IsString()\n  @Matches(Constants.PHONE_REGX, { message: 'phone is invalid' })\n  phone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRateDto.html":{"url":"classes/CreateRateDto.html","title":"class - CreateRateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rate/dto/create-rate.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                feedback\n                            \n                            \n                                    \n                                    \n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        feedback\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rate/dto/create-rate.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rate/dto/create-rate.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class CreateRateDto {\n  @IsNumber()\n  @IsNotEmpty()\n  rating: number;\n\n  @IsOptional()\n  @IsString()\n  feedback?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    MongooseModule.forRoot(process.env.MONGODB_URI, {\n      connectionFactory: (connection) => {\n        connection.plugin(require('mongoose-autopopulate'));\n        connection.plugin(require('mongoose-paginate-v2'));\n        return connection;\n      },\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterQueryOptionsUser.html":{"url":"classes/FilterQueryOptionsUser.html","title":"class - FilterQueryOptionsUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterQueryOptionsUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/filterQueryOptions.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsOptional } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { escapeRegExp } from 'lodash';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class FilterQueryUser {\n  @IsOptional()\n  @Transform(({ obj }) => {\n    return new RegExp(escapeRegExp(obj.username), 'i');\n  })\n  username?: string;\n}\n\nexport class FilterQueryOptionsUser extends IntersectionType(\n  FilterQueryUser,\n  PaginationParams,\n) {}\n\n/* export class FilterQueryNotification {\n  @IsMongoId()\n  receiver: string;\n}\n\nexport class FilterQueryOptionsNotification extends IntersectionType(\n  FilterQueryUser,\n  PaginationParams,\n) {} */\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterQueryUser.html":{"url":"classes/FilterQueryUser.html","title":"class - FilterQueryUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterQueryUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/filterQueryOptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/filterQueryOptions.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsOptional } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { escapeRegExp } from 'lodash';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class FilterQueryUser {\n  @IsOptional()\n  @Transform(({ obj }) => {\n    return new RegExp(escapeRegExp(obj.username), 'i');\n  })\n  username?: string;\n}\n\nexport class FilterQueryOptionsUser extends IntersectionType(\n  FilterQueryUser,\n  PaginationParams,\n) {}\n\n/* export class FilterQueryNotification {\n  @IsMongoId()\n  receiver: string;\n}\n\nexport class FilterQueryOptionsNotification extends IntersectionType(\n  FilterQueryUser,\n  PaginationParams,\n) {} */\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleOauthGuard.html":{"url":"injectables/GoogleOauthGuard.html","title":"injectable - GoogleOauthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleOauthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/googleToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GoogleOauthGuard extends AuthGuard('google') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleOauthStrategy.html":{"url":"injectables/GoogleOauthStrategy.html","title":"injectable - GoogleOauthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleOauthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/googleStrategy.passport.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/googleStrategy.passport.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: RequestWithUser, _accessToken, _refreshToken, profile, done)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/googleStrategy.passport.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _accessToken\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _refreshToken\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-google-token';\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/users.service';\nimport RequestWithUser from '../interfaces/requestWithIUser.interface';\nimport { CreateQuery, FilterQuery } from 'mongoose';\nimport { User, UserDocument } from 'src/users/models/_user.model';\n\n@Injectable()\nexport class GoogleOauthStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(private readonly usersService: UsersService) {\n    super({\n      clientID: process.env.clientID,\n      clientSecret: process.env.clientSecret,\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(\n    req: RequestWithUser,\n    _accessToken,\n    _refreshToken,\n    profile,\n    done,\n  ) {\n    const { id, displayName, emails, _json } = profile;\n    let user = await this.usersService.findOne({\n      googleId: id,\n    } as FilterQuery);\n    if (!user) {\n      user = await this.usersService.createUser({\n        username: displayName,\n        email: emails[0].value,\n        photo: _json.picture,\n        googleId: id,\n        role: 'student',\n        enabled: true,\n      } as CreateQuery);\n    }\n    req.me = user;\n    done(null, req.me);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/jwtAuth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwtAuth.guard.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwtAuth.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable, throwError } from 'rxjs';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\nimport { UsersService } from 'src/users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport RequestWithUser from '../interfaces/requestWithIUser.interface';\nimport TokenPayload from '../interfaces/tokenPayload.interface';\nimport { FilterQuery } from 'mongoose';\nimport { User, UserDocument } from 'src/users/models/_user.model';\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly userService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    let token = null;\n    const isPublic = this.reflector.get(IS_PUBLIC_KEY, context.getHandler());\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n    request.header('authorization') &&\n      (token = request.header('authorization').split(' ')[1]);\n    if (isPublic) {\n      if (!request.header('authorization')) return true;\n    } else {\n      if (!request.header('authorization'))\n        throw new UnauthorizedException('access token is required .');\n    }\n    try {\n      const decoded: TokenPayload = await this.jwtService.verify(token);\n      if (decoded.userId === undefined) {\n        throw new HttpException(\n          'Invalid access token.',\n          HttpStatus.UNAUTHORIZED,\n        );\n      }\n\n      const user = await this.userService.findOne({\n        _id: decoded.userId,\n      } as FilterQuery);\n      if (!user)\n        throw new HttpException(\n          'Invalid access token...',\n          HttpStatus.UNAUTHORIZED,\n        );\n\n      if (\n        request.path.split('/')[3] === 'change-profile-unauthorized' ||\n        request.path.split('/')[3] === 'merge-accounts'\n      ) {\n        request.me = user;\n        return true;\n      }\n\n      if (user && user.enabled === false) {\n        throw new HttpException(\n          'Your account is disabled',\n          HttpStatus.UNAUTHORIZED,\n        );\n      }\n\n      request.me = user;\n      return true;\n    } catch (err) {\n      throw new UnauthorizedException(err);\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalFilesInterceptorOptions.html":{"url":"interfaces/LocalFilesInterceptorOptions.html","title":"interface - LocalFilesInterceptorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LocalFilesInterceptorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/services/upload-local.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fileFilter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileFilter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileFilter:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limits:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FileInterceptor } from '@nestjs/platform-express';\nimport { Injectable, mixin, NestInterceptor, Type } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { diskStorage } from 'multer';\n\ninterface LocalFilesInterceptorOptions {\n  fieldName: string;\n  path?: string;\n  fileFilter?: MulterOptions['fileFilter'];\n  limits?: MulterOptions['limits'];\n}\n\nfunction LocalFilesInterceptor(options: LocalFilesInterceptorOptions): Type {\n  @Injectable()\n  class Interceptor implements NestInterceptor {\n    fileInterceptor: NestInterceptor;\n    constructor(configService: ConfigService) {\n      const filesDestination = configService.get('UPLOADED_FILES_DESTINATION');\n\n      const destination = `${filesDestination}${options.path}`\n\n      const multerOptions: MulterOptions = {\n        storage: diskStorage({\n          destination,\n          filename: function (_req, file, cb) {\n            console.log(file)\n            cb(null, Date.now() + file.originalname)\n          }\n        }),\n        fileFilter: options.fileFilter,\n        limits: options.limits\n      }\n\n      this.fileInterceptor = new (FileInterceptor(options.fieldName, multerOptions));\n    }\n\n    intercept(...args: Parameters) {\n      return this.fileInterceptor.intercept(...args);\n    }\n  }\n  return mixin(Interceptor);\n}\n\nexport default LocalFilesInterceptor;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(Constants.PHONE_REGX, {message: 'phone is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, Matches } from 'class-validator';\nimport { Constants } from '../../utils/constants';\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @IsString()\n  @Matches(Constants.PHONE_REGX, { message: 'phone is invalid' })\n  phone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginFacebookDto.html":{"url":"classes/LoginFacebookDto.html","title":"class - LoginFacebookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginFacebookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-facebook.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-facebook.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nexport class LoginFacebookDto {\n  @IsString()\n  @IsNotEmpty()\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginGoogleDto.html":{"url":"classes/LoginGoogleDto.html","title":"class - LoginGoogleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginGoogleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-google.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                access_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-google.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nexport class LoginGoogleDto {\n  @IsString()\n  @IsNotEmpty()\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/utils/Responses.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserDocument } from 'src/users/models/_user.model';\n\nexport interface LoginResponse {\n  user: UserDocument;\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MessageBody.html":{"url":"interfaces/MessageBody.html","title":"interface - MessageBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MessageBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/Types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            imageUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mobileLink\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            requireInteraction\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mobileLink\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mobileLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requireInteraction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requireInteraction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  AndroidConfig,\n  ApnsConfig,\n  FcmOptions,\n  Notification,\n  WebpushConfig,\n} from 'firebase-admin/lib/messaging/messaging-api';\nimport { UserDocument } from 'src/users/models/_user.model';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\n\nexport interface MessageBody {\n  title: string;\n  body: string;\n  imageUrl?: string;\n  icon?: string;\n  requireInteraction?: boolean;\n  link?: string;\n  data?: {\n    [key: string]: string;\n  };\n  mobileLink?: string;\n  actions?: {\n    title: string;\n    action: string;\n    icon?: string;\n  }[];\n}\nexport interface BaseMessageWithToken {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token?: string;\n}\n\nexport interface BaseMessageWithTokenTesting {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token: string;\n}\n\n//  For More Info to custumize\n//  https://firebase.google.com/docs/cloud-messaging/send-message\nexport const encodingDataForAllDevices = (\n  messageData: MessageBody,\n): BaseMessageWithToken => {\n  const notificationWeb = {\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    /*     requireInteraction: msg.requireInteraction ?? false, */\n    image: messageData.imageUrl,\n    actions: messageData.actions,\n    data: messageData.data,\n  };\n  const notificationMobile = {\n    imageUrl: messageData.imageUrl,\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    color: '#00ff00', //testing MUSSSSSSST BE HEXA\n    notificationCount: 5,\n    clickAction: messageData.mobileLink,\n    channelId: '', ////DEPLOY\n  };\n  return {\n    webpush: {\n      /*    headers: {\n        image: messageData.imageUrl,\n      }, */\n      notification: notificationWeb,\n      data: messageData.data,\n\n      fcmOptions: {\n        link: messageData.link ? messageData.link : 'www.google.com',\n      },\n    },\n    android: {\n      data: messageData.data,\n      notification: notificationMobile,\n    },\n    notification: {\n      body: messageData.body,\n      imageUrl: messageData.imageUrl,\n      title: messageData.title,\n    },\n    apns: {\n      payload: {\n        aps: {\n          'mutable-content': 1,\n        },\n      },\n      fcmOptions: {\n        imageUrl: messageData.imageUrl,\n      },\n    },\n  };\n};\n\nexport interface SendNotificationMethod extends UserDocument {\n  sendNotification: (message: BaseMessageWithToken) => void;\n}\nexport interface queryParamsWithId extends PaginationParams {\n  targetUsers: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageQueueModule.html":{"url":"modules/MessageQueueModule.html","title":"module - MessageQueueModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageQueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessageQueueModule\n\n\n\ncluster_MessageQueueModule_exports\n\n\n\ncluster_MessageQueueModule_providers\n\n\n\n\nMessageQueueService \n\nMessageQueueService \n\n\n\nMessageQueueModule\n\nMessageQueueModule\n\nMessageQueueService  -->\n\nMessageQueueModule->MessageQueueService \n\n\n\n\n\nMessageQueueService\n\nMessageQueueService\n\nMessageQueueModule -->\n\nMessageQueueService->MessageQueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/message-queue/message-queue-publisher.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessageQueueService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageQueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {  Module } from '@nestjs/common';\nimport { MessageQueueService } from './message-queue.service';\n\n@Module({\n  providers: [MessageQueueService],\n  exports: [MessageQueueService],\n})\nexport class MessageQueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageQueueService.html":{"url":"injectables/MessageQueueService.html","title":"injectable - MessageQueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageQueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message-queue/message-queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _connection\n                            \n                            \n                                    Private\n                                _operationsChannelWrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onApplicationShutdown\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                publishToChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onApplicationShutdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationShutdown(signal?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/message-queue/message-queue.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signal\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/message-queue/message-queue.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        publishToChannel\n                        \n                    \n                \n            \n            \n                \n                    \n                    publishToChannel(undefined)\n                \n            \n\n\n            \n                \n                    Defined in src/message-queue/message-queue.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _connection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     amqp.AmqpConnectionManager\n\n                    \n                \n                    \n                        \n                                Defined in src/message-queue/message-queue.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _operationsChannelWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :     amqp.ChannelWrapper\n\n                    \n                \n                    \n                        \n                                Defined in src/message-queue/message-queue.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationShutdown,\n    OnModuleInit,\n  } from '@nestjs/common';\n  import * as amqp from 'amqp-connection-manager';\n  import { Channel } from 'amqplib';\n  import { Constants } from '../utils/constants';\n  // import { RecieverOperationMessage } from './IMessageQueueService';\n  \n  @Injectable()\n  export class MessageQueueService\n    implements OnModuleInit, OnApplicationShutdown\n  {\n    private _connection: amqp.AmqpConnectionManager;\n    private _operationsChannelWrapper: amqp.ChannelWrapper;\n  \n    async onModuleInit(): Promise {\n      const connectionUrl: string = process.env.AMQP_URL;\n      await new Promise(async (resolve, _reject) => {\n        // Create a connection manager\n        this._connection = await amqp.connect(connectionUrl);\n  \n        this._operationsChannelWrapper = await this._connection.createChannel({\n          setup: function (channel: Channel) {\n            return Promise.all([\n              channel.assertQueue(Constants.MessageQueues.TEST1, {\n                durable: true,\n              }),\n            ]);\n          },\n        });\n  \n        this._connection.on('connect', function () {\n          console.log('\\x1b[32m%s\\x1b[0m', '[!] AMQP Connected: ', connectionUrl);\n          resolve();\n        });\n  \n        this._connection.on('disconnect', function (params) {\n          console.log(\n            '\\x1b[31m%s\\x1b[0m',\n            '[!] AMQP Disconnected: ',\n            params.err.stack,\n          );\n        });\n      });\n    }\n  \n    // publishToChannel\n    async publishToChannel({ routingKey, exchangeName, data }): Promise {\n      return new Promise((resolve, reject) => {\n        this._operationsChannelWrapper.publish(\n          exchangeName,\n          routingKey,\n          Buffer.from(JSON.stringify(data), 'utf-8'),\n          { persistent: true } as any,\n          function (err, ok) {\n            if (err) {\n              return reject(err);\n            }\n            resolve();\n          },\n        );\n      });\n    }\n  \n    async onApplicationShutdown(signal?: string): Promise {\n      await this._connection.close();\n      console.log(\n        '\\x1b[32m%s\\x1b[0m',\n        '[!]: Message Queue Service Is Now Closed',\n      );\n    }\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                icon\n                            \n                            \n                                    \n                                    Optional\n                                initiator\n                            \n                            \n                                    \n                                    Optional\n                                readBy\n                            \n                            \n                                    \n                                    Optional\n                                subject\n                            \n                            \n                                    \n                                    Optional\n                                subjectType\n                            \n                            \n                                    \n                                    Optional\n                                targetUsers\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: 'https://res.cloudinary.com/derossy-backup/image/upload/v1555206853/deross-samples/notifications/bell.png'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        initiator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(Number)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        readBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (string | UserDocument)[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, refPath: 'subjectType'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        subjectType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        targetUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         (string | UserDocument)[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.model.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { UserDocument } from 'src/users/models/_user.model';\n\nexport type NotificationDocument = Notification & Document;\n\n@Schema({ timestamps: true })\nexport class Notification {\n  @Prop({ type: String, required: true })\n  title: string;\n  \n  @Prop({ type: String, required: true })\n  body: string;\n\n /*  @Prop({ type: Types.ObjectId, required: true, ref: 'users' })\n  receiver: string; */\n\n  @Prop({\n    type: String,\n    default:\n      'https://res.cloudinary.com/derossy-backup/image/upload/v1555206853/deross-samples/notifications/bell.png',\n  })\n  icon?: string;\n\n  @Prop(Number)\n  initiator?: number;\n\n  /*   @Prop({ type: Boolean, default: false })\n  read?: boolean; */\n\n  @Prop({\n    type: [\n      {\n        type: Types.ObjectId,\n        ref: 'users',\n      },\n    ],\n  })\n  targetUsers?: (string | UserDocument)[];\n\n  @Prop({\n    type: [\n      {\n        type: Types.ObjectId,\n        ref: 'users',\n      },\n    ],\n  })\n  readBy?: (string | UserDocument)[];\n\n  @Prop({\n    type: String,\n    enum: [\n      'post',\n      'comment',\n      'solution',\n      'materila',\n      'lesson',\n      'exam',\n      'session',\n      'admin',\n    ],\n  })\n  subjectType?: string;\n\n  @Prop({ type: Types.ObjectId, refPath: 'subjectType' })\n  subject?: string;\n}\n\nexport const NotificationSchema = SchemaFactory.createForClass(Notification);\n/* \nNotificationSchema.methods.toFirebaseNotification = function () {\n  return {\n    notification: {\n      title: this.title,\n      body: this.body,\n    },\n  };\n};\n */\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                Notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                countNotification\n                            \n                            \n                                    \n                                    Async\n                                fetchAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                sendTestFcmWithEncodeing\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setnManyDocs\n                            \n                            \n                                    \n                                    Async\n                                subscribeToken\n                            \n                            \n                                    \n                                    Async\n                                unSubscribeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        countNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    countNotification(me: UserDocument)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/count-notifications')\n                \n            \n\n            \n                \n                    Defined in src/notification/notifications.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(queryParams: PaginationParams, me: UserDocument)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/fetchAll')\n                \n            \n\n            \n                \n                    Defined in src/notification/notifications.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        sendTestFcmWithEncodeing\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTestFcmWithEncodeing(notificationBody: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('/sendTestFcmWithEncodeing')\n                \n            \n\n            \n                \n                    Defined in src/notification/notifications.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationBody\n                                    \n                                                CreateNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        setnManyDocs\n                        \n                    \n                \n            \n            \n                \n                    \n                    setnManyDocs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/send-many-docs')\n                \n            \n\n            \n                \n                    Defined in src/notification/notifications.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        subscribeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribeToken(undefined: subscribeNotificationDto, me: UserDocument)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/subscribe')\n                \n            \n\n            \n                \n                    Defined in src/notification/notifications.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                subscribeNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        unSubscribeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unSubscribeToken(undefined: subscribeNotificationDto, me: UserDocument)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/unsubscribe')\n                \n            \n\n            \n                \n                    Defined in src/notification/notifications.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                subscribeNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Query } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { AuthUser } from 'src/auth/decorators/me.decorator';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\nimport { UserDocument, UserRole } from 'src/users/models/_user.model';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { subscribeNotificationDto } from './dto/subscribe-notification.dto';\nimport {\n  BaseMessageWithTokenTesting,\n  encodingDataForAllDevices,\n} from './Types';\nimport { NotificationService } from './notification.service';\nimport { Public } from 'src/auth/decorators/public.decorator';\nimport { ObjectId } from 'mongoose';\n@ApiBearerAuth()\n@ApiTags('Notifications')\n@Controller('Notifications')\nexport class NotificationController {\n  constructor(private readonly NotificationService: NotificationService) {}\n\n  @Public()\n  @Get('/send-many-docs')\n  async setnManyDocs() {\n    return await this.NotificationService.sendManyNotificationsWithUserFilter(\n      {},\n      {\n        body: 'R',\n        link: 'www.google.com',\n        requireInteraction: true,\n        title: 'jnnjn',\n        imageUrl:\n          'https://media.istockphoto.com/photos/picturesque-morning-in-plitvice-national-park-colorful-spring-scene-picture-id1093110112?k=20&m=1093110112&s=612x612&w=0&h=3OhKOpvzOSJgwThQmGhshfOnZTvMExZX2R91jNNStBY=',\n        icon: 'https://media.istockphoto.com/photos/picturesque-morning-in-plitvice-national-park-colorful-spring-scene-picture-id1093110112?k=20&m=1093110112&s=612x612&w=0&h=3OhKOpvzOSJgwThQmGhshfOnZTvMExZX2R91jNNStBY=',\n        actions: [\n          {\n            title: 'Hi',\n            action: 'open',\n            icon: 'https://media.istockphoto.com/photos/picturesque-morning-in-plitvice-national-park-colorful-spring-scene-picture-id1093110112?k=20&m=1093110112&s=612x612&w=0&h=3OhKOpvzOSJgwThQmGhshfOnZTvMExZX2R91jNNStBY=',\n          },\n          {\n            title: 'Hi2',\n            action: 'https://www.google.com/?hl=ar',\n            icon: 'https://media.istockphoto.com/photos/picturesque-morning-in-plitvice-national-park-colorful-spring-scene-picture-id1093110112?k=20&m=1093110112&s=612x612&w=0&h=3OhKOpvzOSJgwThQmGhshfOnZTvMExZX2R91jNNStBY=',\n          },\n        ],\n      },\n    );\n  }\n\n  @Get('/fetchAll')\n  async fetchAll(\n    @Query() queryParams: PaginationParams,\n    @AuthUser() me: UserDocument,\n  ) {\n    return await this.NotificationService.fetchAll(me, queryParams);\n  }\n\n  @Post('/subscribe')\n  async subscribeToken(\n    @Body() { token, type }: subscribeNotificationDto,\n    @AuthUser() me: UserDocument,\n  ) {\n    await this.NotificationService.subscribe(me, type, token);\n    return 'Done';\n  }\n\n  @Get('/count-notifications')\n  async countNotification(@AuthUser() me: UserDocument) {\n    return await this.NotificationService.fetchCount(me);\n  }\n\n  @Post('/unsubscribe')\n  async unSubscribeToken(\n    @Body() { token }: subscribeNotificationDto,\n    @AuthUser() me: UserDocument,\n  ) {\n    await this.NotificationService.unSubscribe(me, token);\n    return 'Done';\n  }\n\n  @Public()\n  @Post('/sendTestFcmWithEncodeing')\n  async sendTestFcmWithEncodeing(\n    @Body() notificationBody: CreateNotificationDto,\n  ) {\n    const notificationData = encodingDataForAllDevices({\n      body: notificationBody.body,\n      data: {\n        title: 'Come',\n      },\n      title: notificationBody.title,\n      actions: [{ action: 'Done', title: 'Hii' }],\n      imageUrl: notificationBody.image,\n      icon: 'https://media.istockphoto.com/photos/picturesque-morning-in-plitvice-national-park-colorful-spring-scene-picture-id1093110112?k=20&m=1093110112&s=612x612&w=0&h=3OhKOpvzOSJgwThQmGhshfOnZTvMExZX2R91jNNStBY=',\n    });\n\n    await this.NotificationService.sendTest({\n      ...notificationData,\n      token:\n        'de8bjN9LhL6AU0zubVnjZn:APA91bHDogD00By4nlFT7Lkm5XjkJDoPj2wEIck82z9MOUx0Mcr81Hbe4CEShAE4i2ZhpcAApHk816lOrVFE6oRqWdl27ngsmvsTdu5gv6Lf0ziEBFF7QsCS5WMgTn_e9rY0db35ht2n',\n    });\n    return 'Done';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_imports\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationModule -->\n\nUsersModule->NotificationModule\n\n\n\n\n\nNotificationRepository \n\nNotificationRepository \n\nNotificationRepository  -->\n\nNotificationModule->NotificationRepository \n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nNotificationRepository\n\nNotificationRepository\n\nNotificationModule -->\n\nNotificationRepository->NotificationModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationRepository\n                        \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationRepository\n                        \n                        \n                            NotificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from 'src/users/users.module';\nimport {\n  Notification,\n  NotificationSchema,\n} from './notification.model';\nimport { NotificationService } from './notification.service';\nimport { NotificationController } from './notifications.controller';\nimport { NotificationRepository } from './notifications.repository';\n\n@Module({\n  exports: [NotificationService, NotificationRepository],\n  providers: [NotificationService, NotificationRepository],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Notification.name,\n        schema: NotificationSchema,\n      },\n    ]),\n    ConfigModule.forRoot(),\n    UsersModule,\n  ],\n  controllers: [NotificationController],\n})\nexport class NotificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationRepository.html":{"url":"injectables/NotificationRepository.html","title":"injectable - NotificationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notifications.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseAbstractRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                countNotifications\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                createDoc\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                findAllWithPaginationOption\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateAllVoid\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOneVoid\n                            \n                            \n                                    Public\n                                watch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/notification/notifications.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        countNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    countNotifications(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notifications.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateQuery>)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createDoc\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDoc(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(filterQuery: FilterQuery>)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllWithPaginationOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithPaginationOption(queryFiltersAndOptions: any, arrayOfFilters: string[], extraOptions: PaginateOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryFiltersAndOptions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    arrayOfFilters\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    extraOptions\n                                    \n                                            PaginateOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filterQuery: FilterQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateAllVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:97\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:76\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOneVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOneVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:90\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(pipeline?: Array>, options?: ChangeStreamOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pipeline\n                                    \n                                            Array>\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ChangeStreamOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ChangeStream\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Model>\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseAbstractRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAbstractRepository:18\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UserDocument } from 'src/users/models/_user.model';\nimport { BaseAbstractRepository } from 'src/utils/base.abstract.repository';\nimport {\n  Notification,\n  NotificationDocument,\n} from './notification.model';\n\n@Injectable()\nexport class NotificationRepository extends BaseAbstractRepository {\n  constructor(\n    @InjectModel(Notification.name)\n    private notificationModel: Model,\n  ) {\n    super(notificationModel);\n  }\n  async countNotifications(user: UserDocument): Promise {\n    return await this.notificationModel.countDocuments({\n      targetUsers: user._id,\n      readBy: { $ne: user._id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configurationHandler\n                            \n                            \n                                    Async\n                                fetchAll\n                            \n                            \n                                    Async\n                                fetchCount\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                sendMany\n                            \n                            \n                                    Async\n                                sendManyNotificationsWithUserFilter\n                            \n                            \n                                    Async\n                                sendTest\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unSubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(NotificationRepositary: NotificationRepository, UserRepository: UserRepository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/notification/notification.service.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        NotificationRepositary\n                                                  \n                                                        \n                                                                        NotificationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UserRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configurationHandler\n                        \n                    \n                \n            \n            \n                \nconfigurationHandler()\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(user: UserDocument, queryParams: PaginationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchCount\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchCount(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMany(message: MessageBody, devices: literal type[])\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                MessageBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    devices\n                                    \n                                            literal type[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendManyNotificationsWithUserFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendManyNotificationsWithUserFilter(filter: FilterQuery, message: MessageBody)\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                MessageBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendTest\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTest(message: BaseMessageWithTokenTesting)\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                BaseMessageWithTokenTesting\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(user: UserDocument, deviceType: DeviceType, token: string, oldToken?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deviceType\n                                    \n                                                DeviceType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    oldToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unSubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unSubscribe(user: UserDocument, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/notification/notification.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  OnApplicationBootstrap,\n} from '@nestjs/common';\nimport * as admin from 'firebase-admin';\nimport { findKey, matchesProperty } from 'lodash';\nimport {\n  DeviceType,\n  UserDocument,\n  PushToken,\n} from 'src/users/models/_user.model';\nimport { UsersService } from 'src/users/users.service';\nimport { NotificationDocument } from './notification.model';\nimport {\n  BaseMessageWithToken,\n  BaseMessageWithTokenTesting,\n  encodingDataForAllDevices,\n  MessageBody,\n  queryParamsWithId,\n  SendNotificationMethod,\n} from './Types';\nimport { NotificationRepository } from './notifications.repository';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\nimport {\n  AnyObject,\n  FilterQuery,\n  OnlyFieldsOfType,\n  _UpdateQueryDef,\n} from 'mongoose';\nimport { UserRepository } from 'src/users/users.repository';\nimport { ServiceAccount } from 'firebase-admin';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class NotificationService implements OnApplicationBootstrap {\n  onApplicationBootstrap(): void {\n    this.configurationHandler();\n  }\n\n  constructor(\n    private readonly NotificationRepositary: NotificationRepository,\n    private readonly UserRepository: UserRepository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  configurationHandler() {\n    const adminConfig: ServiceAccount = {\n      projectId: this.configService.get('projectId'),\n      privateKey: this.configService.get('privateKey').replace(/\\\\n/g, '\\n'),\n      clientEmail: this.configService.get('clientEmail'),\n    };\n    // Initialize the firebase admin app\n    admin.initializeApp({\n      credential: admin.credential.cert(adminConfig),\n      databaseURL: 'https://xxxxx.firebaseio.com',\n    });\n  }\n  async sendManyNotificationsWithUserFilter(\n    filter: FilterQuery,\n    message: MessageBody,\n  ) {\n    const userCounts = await this.UserRepository.fetchCounts(filter);\n\n    let chunkCount = Math.ceil(userCounts / 1000);\n\n    for (let i = 0; i  user._id);\n      let prmoises = [];\n      await this.NotificationRepositary.create({\n        title: message.title,\n        body: message.body,\n        targetUsers: usersIds,\n      });\n\n      for (let i = 0; i  {\n    let messagesWithTokens = devices.map((deviceData) => {\n      return {\n        ...encodingDataForAllDevices(message),\n        token: deviceData.deviceToken,\n      };\n    });\n\n    const chunckLength = 300;\n    let slicesNumber = Math.ceil(messagesWithTokens.length / chunckLength); ///SLICES NUMBER\n    let promises = [];\n\n    for (let i = 0; i  {\n    await admin.messaging().send(message);\n  }\n\n  async unSubscribe(user: UserDocument, token: string) {\n    if (token) {\n      const index = findKey(\n        user.pushTokens,\n        matchesProperty('deviceToken', token),\n      );\n\n      if (index !== undefined) {\n        user.pushTokens.splice(parseInt(index), 1);\n        return await user.save();\n      }\n    }\n  }\n  async subscribe(\n    user: UserDocument,\n    deviceType: DeviceType,\n    token: string,\n    oldToken?: string,\n  ) {\n    if (oldToken) {\n      const index = findKey(\n        user.pushTokens,\n        matchesProperty('deviceToken', oldToken),\n      );\n      if (index !== undefined) {\n        user.pushTokens.splice(parseInt(index), 1);\n      }\n    }\n\n    if (token) {\n      const index = findKey(\n        user.pushTokens,\n        matchesProperty('deviceToken', token),\n      );\n      if (index === undefined) {\n        user.pushTokens.push({\n          deviceType: deviceType,\n          deviceToken: token,\n        } as PushToken);\n      }\n    }\n\n    return await user.save();\n  }\n\n  async fetchAll(user: UserDocument, queryParams: PaginationParams) {\n    (queryParams as queryParamsWithId).targetUsers = user._id;\n\n    const notifications =\n      await this.NotificationRepositary.findAllWithPaginationOption(\n        queryParams,\n        ['targetUsers'],\n        { sort: '-createdAt', projection: { targetUsers: 0, readBy: 0 } },\n      );\n\n    await this.NotificationRepositary.updateAllVoid(\n      { targetUsers: user._id },\n      {\n        $addToSet: { readBy: user._id } as OnlyFieldsOfType,\n          any[],\n          any\n        > &\n          AnyObject,\n      },\n    );\n    return notifications;\n  }\n\n  async fetchCount(user: UserDocument): Promise {\n    const count = await this.NotificationRepositary.countNotifications(user);\n    return { count: count };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedDto.html":{"url":"classes/PaginatedDto.html","title":"class - PaginatedDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination/paginated.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hasNextPage\n                            \n                            \n                                hasPrevPage\n                            \n                            \n                                limit\n                            \n                            \n                                nextPage\n                            \n                            \n                                page\n                            \n                            \n                                pagingCounter\n                            \n                            \n                                prevPage\n                            \n                            \n                                totalDocs\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasPrevPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pagingCounter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prevPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalDocs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginated.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PaginatedDto {\n    totalDocs: number;\n  \n    limit: number;\n  \n    totalPages: number;\n  \n    page: number;\n  \n    pagingCounter: number;\n  \n    hasPrevPage: boolean;\n  \n    hasNextPage: boolean;\n  \n    prevPage: number | null;\n  \n    nextPage: number | null;\n  }\n  export default PaginatedDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination/paginationParams.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                allowPagination\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        allowPagination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginationParams.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 8\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginationParams.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination/paginationParams.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type, Transform } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 8;\n\n  @IsOptional()\n  @Transform(({ obj }) => {\n    return [true, 'true'].indexOf(obj.allowPagination) > -1;\n  })\n  allowPagination?: boolean = true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamsWithId.html":{"url":"classes/ParamsWithId.html","title":"class - ParamsWithId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamsWithId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/paramsWithId.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/paramsWithId.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsOptional } from 'class-validator';\n\nclass ParamsWithId {\n  @IsOptional()\n  @IsMongoId()\n  id: string;\n}\n\nexport default ParamsWithId;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Password.html":{"url":"classes/Password.html","title":"class - Password","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Password\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/utils/Password.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hash\n                            \n                            \n                                    Static\n                                isCorrectPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/utils/Password.ts:8\n                \n            \n\n\n            \n                \n                    hashes a password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password you want to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isCorrectPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCorrectPassword(password: string, hashed_password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/utils/Password.ts:20\n                \n            \n\n\n            \n                \n                    true, if the plain-text password is the same as\nthe hashed one\nfalse, otherwise\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password in plain text\n\n                                    \n                                \n                                \n                                    hashed_password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the hashed password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { compare, hash } from 'bcryptjs';\n\nexport class Password {\n  /**\n   * hashes a password\n   * @param password the password you want to hash\n   */\n  static hash(password: string): Promise {\n    return hash(password.toString(), 10);\n  }\n\n  /**\n   * true, if the plain-text password is the same as\n   * the hashed one\n   *\n   * false, otherwise\n   * @param password the password in plain text\n   * @param hashed_password the hashed password\n   */\n  static isCorrectPassword(\n    password: string,\n    hashed_password: string,\n  ): Promise {\n    return compare(password.toString(), hashed_password.toString());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PhoneConfirmationController.html":{"url":"controllers/PhoneConfirmationController.html","title":"controller - PhoneConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PhoneConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/phone-confirmation/phone-confirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                phone-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                sendSMS\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                verificationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        sendSMS\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSMS(createPhoneConfirmationDto: CreatePhoneConfirmationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post()\n                \n            \n\n            \n                \n                    Defined in src/phone-confirmation/phone-confirmation.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPhoneConfirmationDto\n                                    \n                                                CreatePhoneConfirmationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        verificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    verificationCode(verifyData: VerifyPhoneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('verify')\n                \n            \n\n            \n                \n                    Defined in src/phone-confirmation/phone-confirmation.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    verifyData\n                                    \n                                                VerifyPhoneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { PhoneConfirmationService } from './phone-confirmation.service';\nimport { CreatePhoneConfirmationDto } from './dto/create-phone-confirmation.dto';\nimport { VerifyPhoneDto } from './dto/verify-phone.dto';\nimport { Public } from 'src/auth/decorators/public.decorator';\nimport { UsersService } from 'src/users/users.service';\nimport { UpdateUserDto } from 'src/users/dto/update-user.dto';\nimport { VerificationInstance } from 'twilio/lib/rest/verify/v2/service/verification';\nimport { User, UserDocument } from 'src/users/models/_user.model';\nimport { FilterQuery } from 'mongoose';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { UserRepository } from 'src/users/users.repository';\n\n@ApiBearerAuth()\n@ApiTags('PHONE-CONFIRMATION')\n@Controller('phone-confirmation')\nexport class PhoneConfirmationController {\n  constructor(\n    private readonly phoneConfirmationService: PhoneConfirmationService,\n    private readonly userRepository: UserRepository,\n  ) {}\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post()\n  async sendSMS(\n    @Body() createPhoneConfirmationDto: CreatePhoneConfirmationDto,\n  ): Promise {\n    return await this.phoneConfirmationService.sendSMS(\n      createPhoneConfirmationDto,\n    );\n  }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('verify')\n  async verificationCode(\n    @Body() verifyData: VerifyPhoneDto,\n  ): Promise {\n    await this.phoneConfirmationService.verificationCode(verifyData);\n    return await this.userRepository.updateOne(\n      { phone: verifyData.phone } as FilterQuery,\n      { enabled: true } as UpdateUserDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PhoneConfirmationModule.html":{"url":"modules/PhoneConfirmationModule.html","title":"module - PhoneConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    PhoneConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PhoneConfirmationModule\n\n\n\ncluster_PhoneConfirmationModule_imports\n\n\n\ncluster_PhoneConfirmationModule_exports\n\n\n\ncluster_PhoneConfirmationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPhoneConfirmationModule\n\nPhoneConfirmationModule\n\nPhoneConfirmationModule -->\n\nUsersModule->PhoneConfirmationModule\n\n\n\n\n\nPhoneConfirmationService \n\nPhoneConfirmationService \n\nPhoneConfirmationService  -->\n\nPhoneConfirmationModule->PhoneConfirmationService \n\n\n\n\n\nPhoneConfirmationService\n\nPhoneConfirmationService\n\nPhoneConfirmationModule -->\n\nPhoneConfirmationService->PhoneConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/phone-confirmation/phone-confirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PhoneConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PhoneConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PhoneConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PhoneConfirmationService } from './phone-confirmation.service';\nimport { PhoneConfirmationController } from './phone-confirmation.controller';\nimport { TwilioModule } from 'nestjs-twilio';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    TwilioModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        accountSid: configService.get('TWILIO_ACCOUNT_SID'),\n        authToken: configService.get('TWILIO_AUTH_TOKEN'),\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule\n  ],\n  controllers: [PhoneConfirmationController],\n  providers: [PhoneConfirmationService],\n  exports: [PhoneConfirmationService],\n})\nexport class PhoneConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PhoneConfirmationService.html":{"url":"injectables/PhoneConfirmationService.html","title":"injectable - PhoneConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PhoneConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/phone-confirmation/phone-confirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendSMS\n                            \n                            \n                                    Async\n                                verificationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(twilioClient: TwilioClient)\n                    \n                \n                        \n                            \n                                Defined in src/phone-confirmation/phone-confirmation.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        twilioClient\n                                                  \n                                                        \n                                                                    TwilioClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendSMS\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSMS(createPhoneConfirmationDto: CreatePhoneConfirmationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/phone-confirmation/phone-confirmation.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPhoneConfirmationDto\n                                    \n                                                CreatePhoneConfirmationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    verificationCode(verifyData: VerifyPhoneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/phone-confirmation/phone-confirmation.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    verifyData\n                                    \n                                                VerifyPhoneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreatePhoneConfirmationDto } from './dto/create-phone-confirmation.dto';\nimport { InjectTwilio, TwilioClient } from 'nestjs-twilio';\nimport { VerifyPhoneDto } from './dto/verify-phone.dto';\nimport { VerificationInstance } from 'twilio/lib/rest/verify/v2/service/verification';\n\n@Injectable()\nexport class PhoneConfirmationService {\n  constructor(\n    @InjectTwilio()\n    private twilioClient: TwilioClient,\n  ) {}\n\n  async sendSMS(\n    createPhoneConfirmationDto: CreatePhoneConfirmationDto,\n  ): Promise {\n    try {\n      return await this.twilioClient.verify\n        .services(process.env.TWILIO_ACCOUNT_VERIFY_SID)\n        .verifications.create({\n          to: createPhoneConfirmationDto.phone,\n          channel: 'sms',\n        });\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  async verificationCode(verifyData: VerifyPhoneDto): Promise {\n    try {\n      let verificationResult = await this.twilioClient.verify\n        .services(process.env.TWILIO_ACCOUNT_VERIFY_SID)\n        .verificationChecks.create({\n          code: verifyData.code,\n          to: verifyData.phone,\n        });\n      if (verificationResult.status !== 'approved')\n        throw new BadRequestException('code is invalid');\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PushToken.html":{"url":"interfaces/PushToken.html","title":"interface - PushToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PushToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/_user.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            deviceToken\n                                        \n                                \n                                \n                                        \n                                            deviceType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deviceToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deviceToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deviceType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deviceType:         DeviceType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DeviceType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Prop,\n  Schema,\n  SchemaFactory,\n  DiscriminatorOptions,\n  raw,\n} from '@nestjs/mongoose';\nimport { Document, Model, ObjectId, AcceptsDiscriminator } from 'mongoose';\nimport { UnprocessableEntityException } from '@nestjs/common';\nimport { hash, compare } from 'bcryptjs';\nimport { Constants } from '../../utils/constants';\nimport { Password } from '../../auth/utils/Password';\nimport * as admin from 'firebase-admin';\n\nexport type UserDocument = User & Document;\n\nexport enum UserRole {\n  ADMIN = 'admin',\n  STUDENT = 'student',\n  TEACHER = 'teacher',\n}\n\nexport enum DeviceType {\n  android = 'android',\n  ios = 'ios',\n  web = 'web',\n}\n\nexport interface PushToken {\n  deviceType: DeviceType;\n  deviceToken: string;\n}\n\n@Schema({\n  discriminatorKey: 'role',\n  timestamps: true,\n  toJSON: {\n    getters: true,\n    virtuals: true,\n    transform: (_, doc: Record) => {\n      delete doc.__v;\n      delete doc._id;\n      delete doc.password;\n      return {\n        ...doc,\n      };\n    },\n  },\n})\nexport class User {\n  id?: string;\n  @Prop({\n    index: true,\n    unique: true,\n    sparse: true,\n    match: Constants.EMAIL_REGX,\n  })\n  email: string;\n\n  @Prop({\n    index: true,\n    unique: true,\n    sparse: true,\n    match: Constants.PHONE_REGX,\n  })\n  phone: string;\n\n  @Prop({\n    get: (username: string) => {\n      return username.toUpperCase();\n    },\n    set: (username: string) => {\n      return username.trim();\n    },\n    required: true,\n    index: true,\n  })\n  username: string;\n\n  @Prop({ type: String })\n  password: string;\n\n  @Prop({ default: false, type: Boolean })\n  enabled: boolean;\n\n  @Prop({ type: String })\n  photo: string;\n\n  @Prop({ index: true, unique: true, sparse: true, type: String })\n  facebookId: string;\n\n  @Prop({ index: true, unique: true, sparse: true, type: String })\n  googleId: string;\n\n  @Prop({ required: true, type: String, enum: Object.values(UserRole) })\n  role: UserRole;\n\n  @Prop({ type: Number, default: 5 })\n  rating?: number;\n\n  @Prop(\n    raw([\n      {\n        _id: false,\n        deviceType: {\n          type: String,\n          enum: ['android', 'ios', 'web'],\n          required: true,\n        },\n        deviceToken: {\n          type: String,\n          required: true,\n        },\n      },\n    ]),\n  )\n  pushTokens: PushToken[];\n}\n\nconst UserSchema = SchemaFactory.createForClass(User);\n\n// UserSchema.virtual('NameAndEmail').get(function (this: UserDocument) {\n//   return `${this.email} + ${this.username}`;\n// });\n\nUserSchema.pre('save', async function () {\n  const user = this;\n\n  let nullableFields = ['phone', 'email', 'googleId', 'facebookId'];\n  for (let i = 0; i >this.constructor;\n      let count = await model.countDocuments(filter);\n      if (count) {\n        throw new UnprocessableEntityException(\n          `${uniqueFields[i]} : ${value} is not a uniqu value`,\n        );\n      }\n    }\n  }\n  if ((this as UserDocument).password && this.isModified('password')) {\n    // (this as UserDocument).password = await hash(\n    //   (this as UserDocument).password,\n    //   10,\n    // );\n    (this as UserDocument).password = await Password.hash(\n      (this as UserDocument).password,\n    );\n  }\n});\n\n//Notificiation\n\nUserSchema.methods.sendNotification = async function (message) {\n  const user = this;\n  let changed = false;\n  let len = user['pushTokens'].length;\n\n  while (len--) {\n    const deviceToken = user['pushTokens'][len].deviceToken;\n\n    message.token = deviceToken;\n    try {\n      await admin.messaging().send(message);\n      console.log('successfully');\n    } catch (error) {\n      user['pushTokens'].splice(len, 1);\n      changed = true;\n    }\n  }\n  if (changed) await this.save();\n};\n\nUserSchema.methods.isValidPassword = async function (password) {\n  // return compare(password, (this as UserDocument).password);\n  return Password.isCorrectPassword(password, (this as UserDocument).password);\n};\n\nexport { UserSchema };\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rate.html":{"url":"classes/Rate.html","title":"class - Rate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rate/rate.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                feedback\n                            \n                            \n                                    \n                                    Optional\n                                rating\n                            \n                            \n                                    \n                                subject\n                            \n                            \n                                    \n                                subjectType\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        feedback\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(String)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rate/rate.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rate/rate.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, refPath: 'subjectType', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rate/rate.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subjectType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rate/rate.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | UserDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, autopopulate: true, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rate/rate.model.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { User, UserDocument } from 'src/users/models/_user.model';\n\nexport type RateDocument = Rate & Document;\n\n@Schema({\n  timestamps: true,\n})\nexport class Rate {\n  @Prop({ type: Types.ObjectId, refPath: 'subjectType', required: true })\n  subject: string | Types.ObjectId;\n\n  @Prop({ type: String, enum: ['users'], required: true })\n  subjectType: string;\n\n  @Prop({\n    type: Types.ObjectId,\n    autopopulate: true,\n    ref: User.name,\n    required: true,\n  })\n  user: string | UserDocument;\n\n  @Prop({ type: Number, required: true })\n  rating?: number;\n\n  @Prop(String)\n  feedback?: string;\n}\n\nexport const RateSchema = SchemaFactory.createForClass(Rate);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RateController.html":{"url":"controllers/RateController.html","title":"controller - RateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rate/rate.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rate\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { RateService } from './rate.service';\n\n@Controller('rate')\nexport class RateController {\n  constructor(private readonly rateService: RateService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RateModule.html":{"url":"modules/RateModule.html","title":"module - RateModule","body":"\n                   \n\n\n\n\n    Modules\n    RateModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RateModule\n\n\n\ncluster_RateModule_providers\n\n\n\ncluster_RateModule_exports\n\n\n\n\nRateRepository \n\nRateRepository \n\n\n\nRateService \n\nRateService \n\n\n\nRateModule\n\nRateModule\n\nRateRepository  -->\n\nRateModule->RateRepository \n\n\n\nRateService  -->\n\nRateModule->RateService \n\n\n\n\n\nRateRepository\n\nRateRepository\n\nRateModule -->\n\nRateRepository->RateModule\n\n\n\n\n\nRateService\n\nRateService\n\nRateModule -->\n\nRateService->RateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/rate/rate.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RateRepository\n                        \n                        \n                            RateService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RateController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RateRepository\n                        \n                        \n                            RateService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { RateService } from './rate.service';\nimport { RateController } from './rate.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from 'src/users/users.module';\nimport { RateRepository } from './rate.repository';\nimport { Rate, RateSchema } from './rate.model';\n\n@Module({\n  controllers: [RateController],\n  providers: [RateService, RateRepository],\n  exports: [RateService, RateRepository],\n  imports: [\n    MongooseModule.forFeature([{ schema: RateSchema, name: Rate.name }]),\n    forwardRef(() => UsersModule),\n  ],\n})\nexport class RateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RateRepository.html":{"url":"injectables/RateRepository.html","title":"injectable - RateRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RateRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rate/rate.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseAbstractRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchRates\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                createDoc\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                findAllWithPaginationOption\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateAllVoid\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOneVoid\n                            \n                            \n                                    Public\n                                watch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rateModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/rate/rate.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rateModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchRates\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchRates(ratedObjectId: string, subjectType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/rate/rate.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ratedObjectId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subjectType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateQuery>)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createDoc\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDoc(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(filterQuery: FilterQuery>)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllWithPaginationOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithPaginationOption(queryFiltersAndOptions: any, arrayOfFilters: string[], extraOptions: PaginateOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryFiltersAndOptions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    arrayOfFilters\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    extraOptions\n                                    \n                                            PaginateOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filterQuery: FilterQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateAllVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:97\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:76\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOneVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOneVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:90\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(pipeline?: Array>, options?: ChangeStreamOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pipeline\n                                    \n                                            Array>\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ChangeStreamOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ChangeStream\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Model>\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseAbstractRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAbstractRepository:18\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { BaseAbstractRepository } from 'src/utils/base.abstract.repository';\nimport { Rate, RateDocument } from './rate.model';\n\n@Injectable()\nexport class RateRepository extends BaseAbstractRepository {\n  constructor(\n    @InjectModel(Rate.name)\n    private rateModel: Model,\n  ) {\n    super(rateModel);\n  }\n  async fetchRates(ratedObjectId: string, subjectType: string) {\n    let rates = await this.rateModel.aggregate([\n      {\n        $match: {\n          subject: new Types.ObjectId(ratedObjectId),\n          subjectType,\n        },\n      },\n      {\n        $group: {\n          _id: '$rating',\n          count: { $sum: 1 },\n        },\n      },\n      {\n        $addFields: {\n          multiplication: { $multiply: ['$count', '$_id'] },\n        },\n      },\n      {\n        $group: {\n          _id: null,\n          numerator: { $sum: '$multiplication' },\n          denominator: { $sum: '$count' },\n        },\n      },\n      {\n        $addFields: {\n          final: { $divide: ['$numerator', '$denominator'] },\n        },\n      },\n    ]);\n    console.log('Fetch Rates', rates);\n    return rates;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RateService.html":{"url":"injectables/RateService.html","title":"injectable - RateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rate/rate.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                fetchAllRates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rateRepository: RateRepository, usersRepositary: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/rate/rate.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rateRepository\n                                                  \n                                                        \n                                                                        RateRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepositary\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRateDto: CreateRateDto, subjectType: string, id: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/rate/rate.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRateDto\n                                    \n                                                CreateRateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subjectType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchAllRates\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAllRates(paginationParams: PaginationParams, subjectType: string, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/rate/rate.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subjectType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Types } from 'mongoose';\nimport { UserRepository } from 'src/users/users.repository';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\nimport { CreateRateDto } from './dto/create-rate.dto';\nimport { RateRepository } from './rate.repository';\n\n@Injectable()\nexport class RateService {\n  constructor(\n    private readonly rateRepository: RateRepository,\n    private readonly usersRepositary: UserRepository,\n  ) {}\n\n  async create(\n    createRateDto: CreateRateDto,\n    subjectType: string,\n    id: string,\n    userId: string,\n  ) {\n    let ratedRepository = this.usersRepositary;\n\n    let ratedOne = await ratedRepository.findOne({ _id: id });\n    if (!ratedOne) throw new NotFoundException();\n\n    let newRate;\n    let prevRate = await this.rateRepository.findOne({\n      user: userId,\n      subjectType,\n      subject: ratedOne._id,\n    });\n\n    if (prevRate) {\n      await prevRate.set(createRateDto).save();\n    } else {\n      newRate = await this.rateRepository.create({\n        ...createRateDto,\n        user: userId,\n        subject: new Types.ObjectId(ratedOne.id),\n        subjectType,\n      });\n    }\n\n    let rates = await this.rateRepository.fetchRates(ratedOne.id, subjectType);\n    ratedOne['rating'] = rates[0]['final'];\n    await ratedOne.save();\n    let response = prevRate ? prevRate : newRate;\n\n    return response;\n  }\n\n  async fetchAllRates(\n    paginationParams: PaginationParams,\n    subjectType: string,\n    id: string,\n  ) {\n    paginationParams['subjectType'] = subjectType;\n    paginationParams['subject'] = new Types.ObjectId(id);\n    return await this.rateRepository.findAllWithPaginationOption(\n      paginationParams,\n      ['subjectType', 'subject'],\n      { sort: '-createdAt' },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisIoAdapter.html":{"url":"classes/RedisIoAdapter.html","title":"class - RedisIoAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisIoAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/redisIoAdapter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    IoAdapter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createIOServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createIOServer\n                        \n                    \n                \n            \n            \n                \ncreateIOServer(port: number, options?: ServerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/redisIoAdapter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ServerOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IoAdapter } from '@nestjs/platform-socket.io';\nimport { RedisClient } from 'redis';\nimport { ServerOptions } from 'socket.io';\nimport { createAdapter } from 'socket.io-redis';\n\nconst pubClient = new RedisClient({\n  host: process.env.REDIS_HOST,\n  port: process.env.REDIS_PORT,\n  no_ready_check: true,\n  auth_pass: process.env.REDIS_PASS,\n});\nconst subClient = pubClient.duplicate();\nconst redisAdapter = createAdapter({ pubClient, subClient });\n\nexport class RedisIoAdapter extends IoAdapter {\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server = super.createIOServer(port, options);\n    server.adapter(redisAdapter);\n    return server;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(Constants.PHONE_REGX, {message: 'phone is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n} from 'class-validator';\nimport { Constants } from '../../utils/constants';\nexport class RegisterDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @IsString()\n  @Matches(Constants.PHONE_REGX, { message: 'phone is invalid' })\n  phone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/requestWithIUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            me\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        me\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        me:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '../../users/models/_user.model';\n\ninterface RequestWithUser extends Request {\n  me: User;\n}\n\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(Constants.PHONE_REGX, {message: 'phone is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, Matches } from 'class-validator';\nimport { Constants } from 'src/utils/constants';\nexport class ResetPasswordDto {\n  @IsString()\n  @Matches(Constants.PHONE_REGX, { message: 'phone is invalid' })\n  phone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const roles = this.reflector.get('roles', context.getHandler());\n\n    if (!roles || !roles.length) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.me;\n\n    return !!roles.find((item) => item === user.role);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendNotificationMethod.html":{"url":"interfaces/SendNotificationMethod.html","title":"interface - SendNotificationMethod","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendNotificationMethod\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/Types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        UserDocument\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sendNotification\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sendNotification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sendNotification:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  AndroidConfig,\n  ApnsConfig,\n  FcmOptions,\n  Notification,\n  WebpushConfig,\n} from 'firebase-admin/lib/messaging/messaging-api';\nimport { UserDocument } from 'src/users/models/_user.model';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\n\nexport interface MessageBody {\n  title: string;\n  body: string;\n  imageUrl?: string;\n  icon?: string;\n  requireInteraction?: boolean;\n  link?: string;\n  data?: {\n    [key: string]: string;\n  };\n  mobileLink?: string;\n  actions?: {\n    title: string;\n    action: string;\n    icon?: string;\n  }[];\n}\nexport interface BaseMessageWithToken {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token?: string;\n}\n\nexport interface BaseMessageWithTokenTesting {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token: string;\n}\n\n//  For More Info to custumize\n//  https://firebase.google.com/docs/cloud-messaging/send-message\nexport const encodingDataForAllDevices = (\n  messageData: MessageBody,\n): BaseMessageWithToken => {\n  const notificationWeb = {\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    /*     requireInteraction: msg.requireInteraction ?? false, */\n    image: messageData.imageUrl,\n    actions: messageData.actions,\n    data: messageData.data,\n  };\n  const notificationMobile = {\n    imageUrl: messageData.imageUrl,\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    color: '#00ff00', //testing MUSSSSSSST BE HEXA\n    notificationCount: 5,\n    clickAction: messageData.mobileLink,\n    channelId: '', ////DEPLOY\n  };\n  return {\n    webpush: {\n      /*    headers: {\n        image: messageData.imageUrl,\n      }, */\n      notification: notificationWeb,\n      data: messageData.data,\n\n      fcmOptions: {\n        link: messageData.link ? messageData.link : 'www.google.com',\n      },\n    },\n    android: {\n      data: messageData.data,\n      notification: notificationMobile,\n    },\n    notification: {\n      body: messageData.body,\n      imageUrl: messageData.imageUrl,\n      title: messageData.title,\n    },\n    apns: {\n      payload: {\n        aps: {\n          'mutable-content': 1,\n        },\n      },\n      fcmOptions: {\n        imageUrl: messageData.imageUrl,\n      },\n    },\n  };\n};\n\nexport interface SendNotificationMethod extends UserDocument {\n  sendNotification: (message: BaseMessageWithToken) => void;\n}\nexport interface queryParamsWithId extends PaginationParams {\n  targetUsers: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/student.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/student.model.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { User, UserRole } from './_user.model';\n\nexport type StudentDocument = Student & Document;\n\n@Schema()\nexport class Student {\n  role: UserRole;\n}\n\nconst StudentSchema = SchemaFactory.createForClass(Student);\n\nexport { StudentSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Teacher.html":{"url":"classes/Teacher.html","title":"class - Teacher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Teacher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/teacher.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bio\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/teacher.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/teacher.model.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { UserRole } from './_user.model';\n\nexport type TeacherDocument = Teacher & Document;\n\n@Schema()\nexport class Teacher {\n  role: UserRole;\n\n  @Prop({ required: true })\n  bio: number;\n}\n\nconst TeacherSchema = SchemaFactory.createForClass(Teacher);\n\nexport { TeacherSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n  userId: string;\n}\n\nexport default TokenPayload;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/update-notification.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateNotificationDto } from './create-notification.dto';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRateDto.html":{"url":"classes/UpdateRateDto.html","title":"class - UpdateRateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rate/dto/update-rate.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRateDto } from './create-rate.dto';\n\nexport class UpdateRateDto extends PartialType(CreateRateDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                enabled\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                photo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        photo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsMongoId, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto {\n  @IsBoolean()\n  @IsOptional()\n  enabled?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({ type: 'string', format: 'binary' })\n  photo?: string;\n\n  @IsString()\n  @IsOptional()\n  password?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadCloudinary.html":{"url":"injectables/UploadCloudinary.html","title":"injectable - UploadCloudinary","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadCloudinary\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/services/upload-cloudinary.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMulterOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/services/upload-cloudinary.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMulterOptions\n                        \n                    \n                \n            \n            \n                \ncreateMulterOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/utils/services/upload-cloudinary.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     MulterModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  MulterModuleOptions,\n  MulterOptionsFactory,\n} from '@nestjs/platform-express';\nimport { ConfigService } from '@nestjs/config';\nimport * as cloudinaryStorage from 'multer-storage-cloudinary';\nimport * as cloudinary from 'cloudinary';\n\n@Injectable()\nexport class UploadCloudinary implements MulterOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n  createMulterOptions(): MulterModuleOptions {\n    (cloudinary as any).config({\n      cloud_name: this.configService.get('cloud_name'),\n      api_key: this.configService.get('api_key'),\n      api_secret: this.configService.get('api_secret'),\n    });\n    return {\n      storage: cloudinaryStorage({\n        cloudinary: cloudinary,\n        params: {\n          resource_type: 'auto',\n        },\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadDigitalOceanSpace.html":{"url":"injectables/UploadDigitalOceanSpace.html","title":"injectable - UploadDigitalOceanSpace","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadDigitalOceanSpace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/services/upload-dospace.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMulterOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/services/upload-dospace.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMulterOptions\n                        \n                    \n                \n            \n            \n                \ncreateMulterOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/utils/services/upload-dospace.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     MulterModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  MulterModuleOptions,\n  MulterOptionsFactory,\n} from '@nestjs/platform-express';\nimport * as crypto from 'crypto';\nimport * as mime from 'mime';\nimport { ConfigService } from '@nestjs/config';\nimport * as aws from 'aws-sdk';\nimport * as multerS3 from 'multer-s3';\nimport { Injectable } from '@nestjs/common';\n@Injectable()\nexport class UploadDigitalOceanSpace implements MulterOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n  createMulterOptions(): MulterModuleOptions {\n    return {\n      storage: multerS3({\n        s3: new aws.S3({\n          accessKeyId: this.configService.get('DO_SPACE_ACCESS_KEY'),\n          secretAccessKey: this.configService.get('DO_SPACE_SECRET_KEY'),\n          endpoint: this.configService.get('DO_SPACE_END_POINT'),\n          signatureVersion: 'v4',\n        }),\n        bucket: this.configService.get('DO_SPACE_BUCKET_NAME'),\n        contentType: multerS3.AUTO_CONTENT_TYPE,\n        acl: 'public-read',\n        key: (req, file, cb) => {\n          const raw = crypto.pseudoRandomBytes(8);\n          cb(\n            null,\n            `${raw.toString('hex')}_${Date.now().toString()}/${\n              file.originalname\n            }`,\n          );\n        },\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadFilesController.html":{"url":"controllers/UploadFilesController.html","title":"controller - UploadFilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadFilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload-files/upload-files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload-files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                uploadFilesToDO\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        uploadFilesToDO\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFilesToDO()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/upload-files/upload-files.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UploadFilesService } from './upload-files.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/auth/decorators/public.decorator';\nimport * as path from 'path'\nimport { ConfigService } from '@nestjs/config';\n\n@ApiTags('upload-files')\n@Controller('upload-files')\nexport class UploadFilesController {\n  constructor(private readonly uploadFilesService: UploadFilesService, private readonly configService: ConfigService) { }\n\n  @Public()\n  @Post()\n  uploadFilesToDO() {\n    const filePath = __dirname.replace('dist', 'src') + '/remah.png';\n    const folderName = 'HSE'\n    const bucketName = this.configService.get('DO_SPACE_BUCKET_NAME');\n    const fileName = Date.now() + path.extname(filePath);\n    return this.uploadFilesService.uploadFilesToDO(filePath, bucketName, folderName, fileName);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadFilesModule.html":{"url":"modules/UploadFilesModule.html","title":"module - UploadFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadFilesModule\n\n\n\ncluster_UploadFilesModule_providers\n\n\n\n\nUploadFilesService\n\nUploadFilesService\n\n\n\nUploadFilesModule\n\nUploadFilesModule\n\nUploadFilesModule -->\n\nUploadFilesService->UploadFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/upload-files/upload-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadFilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadFilesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadFilesService } from './upload-files.service';\nimport { UploadFilesController } from './upload-files.controller';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports:[ConfigModule],\n  controllers: [UploadFilesController],\n  providers: [UploadFilesService]\n})\nexport class UploadFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadFilesService.html":{"url":"injectables/UploadFilesService.html","title":"injectable - UploadFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload-files/upload-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                s3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadFilesToDO\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/upload-files/upload-files.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFilesToDO\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFilesToDO(filePath: string, bucketName: string, folderName: string, fileName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/upload-files/upload-files.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bucketName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    folderName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AWS.S3\n\n                    \n                \n                    \n                        \n                                Defined in src/upload-files/upload-files.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as AWS from 'aws-sdk';\nimport * as fs from 'fs'\n@Injectable()\nexport class UploadFilesService {\n  private readonly s3: AWS.S3;\n\n  constructor(private readonly configService: ConfigService) {\n    this.s3 = new AWS.S3({\n      accessKeyId: this.configService.get('DO_SPACE_ACCESS_KEY'),\n      secretAccessKey: this.configService.get('DO_SPACE_SECRET_KEY'),\n      endpoint: this.configService.get('DO_SPACE_END_POINT'),\n      signatureVersion: 'v4'\n    }); \n  }\n\n  async uploadFilesToDO(filePath: string, bucketName: string, folderName: string, fileName: string) {\n    const file = fs.readFileSync(filePath);\n    const data = await this.s3.putObject({ Bucket: bucketName + '/' + folderName, Key: fileName, ACL: \"public-read\", Body: file, }).promise()\n    return `https://${bucketName}.fra1.digitaloceanspaces.com/${folderName}/${fileName}`\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/_user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                enabled\n                            \n                            \n                                    \n                                facebookId\n                            \n                            \n                                    \n                                googleId\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                photo\n                            \n                            \n                                    \n                                pushTokens\n                            \n                            \n                                    \n                                    Optional\n                                rating\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({index: true, unique: true, sparse: true, match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false, type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        facebookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({index: true, unique: true, sparse: true, type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({index: true, unique: true, sparse: true, type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({index: true, unique: true, sparse: true, match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pushTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PushToken[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, default: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String, enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({get: username => , set: username => , required: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/_user.model.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Prop,\n  Schema,\n  SchemaFactory,\n  DiscriminatorOptions,\n  raw,\n} from '@nestjs/mongoose';\nimport { Document, Model, ObjectId, AcceptsDiscriminator } from 'mongoose';\nimport { UnprocessableEntityException } from '@nestjs/common';\nimport { hash, compare } from 'bcryptjs';\nimport { Constants } from '../../utils/constants';\nimport { Password } from '../../auth/utils/Password';\nimport * as admin from 'firebase-admin';\n\nexport type UserDocument = User & Document;\n\nexport enum UserRole {\n  ADMIN = 'admin',\n  STUDENT = 'student',\n  TEACHER = 'teacher',\n}\n\nexport enum DeviceType {\n  android = 'android',\n  ios = 'ios',\n  web = 'web',\n}\n\nexport interface PushToken {\n  deviceType: DeviceType;\n  deviceToken: string;\n}\n\n@Schema({\n  discriminatorKey: 'role',\n  timestamps: true,\n  toJSON: {\n    getters: true,\n    virtuals: true,\n    transform: (_, doc: Record) => {\n      delete doc.__v;\n      delete doc._id;\n      delete doc.password;\n      return {\n        ...doc,\n      };\n    },\n  },\n})\nexport class User {\n  id?: string;\n  @Prop({\n    index: true,\n    unique: true,\n    sparse: true,\n    match: Constants.EMAIL_REGX,\n  })\n  email: string;\n\n  @Prop({\n    index: true,\n    unique: true,\n    sparse: true,\n    match: Constants.PHONE_REGX,\n  })\n  phone: string;\n\n  @Prop({\n    get: (username: string) => {\n      return username.toUpperCase();\n    },\n    set: (username: string) => {\n      return username.trim();\n    },\n    required: true,\n    index: true,\n  })\n  username: string;\n\n  @Prop({ type: String })\n  password: string;\n\n  @Prop({ default: false, type: Boolean })\n  enabled: boolean;\n\n  @Prop({ type: String })\n  photo: string;\n\n  @Prop({ index: true, unique: true, sparse: true, type: String })\n  facebookId: string;\n\n  @Prop({ index: true, unique: true, sparse: true, type: String })\n  googleId: string;\n\n  @Prop({ required: true, type: String, enum: Object.values(UserRole) })\n  role: UserRole;\n\n  @Prop({ type: Number, default: 5 })\n  rating?: number;\n\n  @Prop(\n    raw([\n      {\n        _id: false,\n        deviceType: {\n          type: String,\n          enum: ['android', 'ios', 'web'],\n          required: true,\n        },\n        deviceToken: {\n          type: String,\n          required: true,\n        },\n      },\n    ]),\n  )\n  pushTokens: PushToken[];\n}\n\nconst UserSchema = SchemaFactory.createForClass(User);\n\n// UserSchema.virtual('NameAndEmail').get(function (this: UserDocument) {\n//   return `${this.email} + ${this.username}`;\n// });\n\nUserSchema.pre('save', async function () {\n  const user = this;\n\n  let nullableFields = ['phone', 'email', 'googleId', 'facebookId'];\n  for (let i = 0; i >this.constructor;\n      let count = await model.countDocuments(filter);\n      if (count) {\n        throw new UnprocessableEntityException(\n          `${uniqueFields[i]} : ${value} is not a uniqu value`,\n        );\n      }\n    }\n  }\n  if ((this as UserDocument).password && this.isModified('password')) {\n    // (this as UserDocument).password = await hash(\n    //   (this as UserDocument).password,\n    //   10,\n    // );\n    (this as UserDocument).password = await Password.hash(\n      (this as UserDocument).password,\n    );\n  }\n});\n\n//Notificiation\n\nUserSchema.methods.sendNotification = async function (message) {\n  const user = this;\n  let changed = false;\n  let len = user['pushTokens'].length;\n\n  while (len--) {\n    const deviceToken = user['pushTokens'][len].deviceToken;\n\n    message.token = deviceToken;\n    try {\n      await admin.messaging().send(message);\n      console.log('successfully');\n    } catch (error) {\n      user['pushTokens'].splice(len, 1);\n      changed = true;\n    }\n  }\n  if (changed) await this.save();\n};\n\nUserSchema.methods.isValidPassword = async function (password) {\n  // return compare(password, (this as UserDocument).password);\n  return Password.isCorrectPassword(password, (this as UserDocument).password);\n};\n\nexport { UserSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/exceptions/userNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId?: number)\n                    \n                \n                        \n                            \n                                Defined in src/users/exceptions/userNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class UserNotFoundException extends NotFoundException {\n  constructor(userId?: number) {\n    super(`User with id ${userId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseAbstractRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchAllTokensChunks\n                            \n                            \n                                    Async\n                                fetchCounts\n                            \n                            \n                                    Async\n                                fetchShouldSend\n                            \n                            \n                                    Async\n                                fetchUsersByFilter\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                createDoc\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                findAllWithPaginationOption\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateAllVoid\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOneVoid\n                            \n                            \n                                    Public\n                                watch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchAllTokensChunks\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAllTokensChunks(filter: FilterQuery, stage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    stage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchCounts\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchCounts(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchShouldSend\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchShouldSend()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchUsersByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchUsersByFilter(filter: FilterQuery, stage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    stage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateQuery>)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createDoc\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDoc(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(filterQuery: FilterQuery>)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllWithPaginationOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithPaginationOption(queryFiltersAndOptions: any, arrayOfFilters: string[], extraOptions: PaginateOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryFiltersAndOptions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    arrayOfFilters\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    extraOptions\n                                    \n                                            PaginateOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filterQuery: FilterQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateAllVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:97\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions, projection: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:76\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    projection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOneVoid\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOneVoid(filterQuery: FilterQuery>, updateQuery: UpdateQuery>, options: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:90\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filterQuery\n                                    \n                                                FilterQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    updateQuery\n                                    \n                                                UpdateQuery>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(pipeline?: Array>, options?: ChangeStreamOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseAbstractRepository\n\n                \n            \n            \n                \n                        Defined in         BaseAbstractRepository:105\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pipeline\n                                    \n                                            Array>\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ChangeStreamOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ChangeStream\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Model>\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseAbstractRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAbstractRepository:18\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n    \n        USAGE : This is custom definition for this query \nAGGREGATION : $match stage enhance to filter unwanted docs \nCUSTOM FLAGS : 406 is used for .... , 409 is used for .....\n\n    \n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { BaseAbstractRepository } from 'src/utils/base.abstract.repository';\nimport { User, UserDocument } from './models/_user.model';\n\n@Injectable()\nexport class UserRepository extends BaseAbstractRepository {\n  constructor(@InjectModel(User.name) private userModel: Model) {\n    super(userModel);\n  }\n\n \n  async fetchUsersByFilter(\n    filter: FilterQuery,\n    stage = 0,\n  ): Promise {\n    return await this.userModel\n      .find(filter)\n      .skip(5000 * stage)\n      .limit(5000)\n      .select('_id pushTokens');\n  }\n\n  async fetchShouldSend() {\n    return await this.userModel.countDocuments({\n      'pushTokens.0': { $exists: true },\n    });\n  }\n\n  async fetchCounts(filter: FilterQuery): Promise {\n    const count = await this.userModel.aggregate([\n      { $match: filter },\n      { $count: 'usersCount' },\n    ]);\n    return count[0].usersCount as number;\n  }\n  async fetchAllTokensChunks(\n    filter: FilterQuery,\n    stage = 0,\n  ): Promise {\n    const chunk = await this.userModel.aggregate([\n      { $match: filter },\n      { $skip: stage * 1000 },\n      { $limit: 1000 },\n      { $project: { pushTokens: 1, _id: 1 /* , username: 1 */ } },\n      {\n        $facet: {\n          arrayOfUsersIds: [\n            { $project: { _id: 1 } },\n            { $group: { _id: null, usersIds: { $push: '$_id' } } },\n            { $project: { _id: 0 } },\n          ],\n          arrayOfObjects: [\n            { $unwind: { path: '$pushTokens' } },\n            { $project: { deviceToken: '$pushTokens.deviceToken' } },\n          ],\n        },\n      },\n      {\n        $project: {\n          arrayOfUsersIds: '$arrayOfUsersIds.usersIds',\n          arrayOfObjects: 1,\n        },\n      },\n      { $unwind: '$arrayOfUsersIds' },\n    ]);\n    return chunk[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addRate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                fetchUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                getAllRates\n                            \n                            \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        addRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRate(createRateDto: CreateRateDto, undefined: ParamsWithId, me: UserDocument)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/rate/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRateDto\n                                    \n                                                CreateRateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                ParamsWithId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(undefined: ChangePasswordDto, me: UserDocument)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('/change-password')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        fetchUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchUserById(undefined: ParamsWithId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ParamsWithId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(queryFiltersAndOptions: FilterQueryOptionsUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiOkResponseGeneral(User)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryFiltersAndOptions\n                                    \n                                                FilterQueryOptionsUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getAllRates\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllRates(undefined: ParamsWithId, PaginationParams: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/rates/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ParamsWithId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    PaginationParams\n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(files, updateUserData: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserData\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  Inject,\n  UseFilters,\n  UploadedFiles,\n  ValidationPipe,\n  UsePipes,\n  HttpStatus,\n  HttpCode,\n  Query,\n  CacheInterceptor,\n  CacheKey,\n} from '@nestjs/common';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { request } from 'http';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User, UserDocument, UserRole } from './models/_user.model';\nimport { UsersService } from './users.service';\nimport { REQUEST } from '@nestjs/core';\nimport { AuthUser } from 'src/auth/decorators/me.decorator';\nimport { ChangePasswordDto } from 'src/users/dto/change-password.dto';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\nimport ParamsWithId from 'src/utils/paramsWithId.dto';\nimport { Public } from 'src/auth/decorators/public.decorator';\nimport { FilterQuery, PaginateResult } from 'mongoose';\nimport { ApiBearerAuth, ApiBody, ApiConsumes, ApiTags } from '@nestjs/swagger';\nimport { ApiOkResponseGeneral } from 'src/utils/pagination/apiOkResponseGeneral';\nimport { Student } from './models/student.model';\nimport { Teacher } from './models/teacher.model';\nimport { FilterQueryOptionsUser } from './dto/filterQueryOptions.dto';\nimport { UserRepository } from './users.repository';\nimport { Constants } from 'src/utils/constants';\nimport { CreateRateDto } from 'src/rate/dto/create-rate.dto';\nimport { RateService } from 'src/rate/rate.service';\nimport { RateDocument } from 'src/rate/rate.model';\nimport { ApiMultiFile } from 'src/utils/upload-multi-files.decorator';\n\n@ApiBearerAuth()\n@ApiTags('USERS')\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly rateService: RateService,\n\n    private readonly UserRepository: UserRepository,\n    @Inject(REQUEST) private readonly req: Record,\n  ) { }\n\n  // @Roles(UserRole.STUDENT)\n  // @CacheKey(Constants.GET_POSTS_CACHE_KEY)\n  @Public()\n  @ApiOkResponseGeneral(User)\n  @Get()\n  async findAll(\n    @Query() queryFiltersAndOptions: FilterQueryOptionsUser,\n  ): Promise | UserDocument[]> {\n    return await this.usersService.findAll(\n      queryFiltersAndOptions as FilterQueryOptionsUser,\n    );\n  }\n\n  @Get('profile')\n  async getProfile(): Promise {\n    return await this.usersService.getProfile(this.req.me as UserDocument);\n  }\n\n\n  @Patch('profile')\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'photo', maxCount: 1 }]))\n  @ApiConsumes('multipart/form-data')\n  // @ApiMultiFile('photo')\n  async updateProfile(\n    @UploadedFiles()\n    files,\n    @Body() updateUserData: UpdateUserDto,\n  ): Promise {\n    if (files && files.photo) updateUserData.photo = files.photo[0].secure_url;\n\n    delete updateUserData.enabled;\n\n    return await this.usersService.update(\n      { _id: this.req.me } as FilterQuery,\n      updateUserData,\n    );\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('/change-password')\n  async changePassword(\n    @Body() { oldPassword, newPassword }: ChangePasswordDto,\n    @AuthUser() me: UserDocument,\n  ): Promise {\n    return await this.usersService.changePassword(\n      { oldPassword, newPassword },\n      me,\n    );\n  }\n\n  @Public()\n  @Get(':id')\n  async fetchUserById(@Param() { id }: ParamsWithId): Promise {\n    return await this.usersService.findOne({\n      _id: id,\n    } as FilterQuery);\n  }\n\n  @Post('/rate/:id')\n  async addRate(\n    @Body() createRateDto: CreateRateDto,\n    @Param() { id }: ParamsWithId,\n    @AuthUser() me: UserDocument,\n  ): Promise {\n    return await this.rateService.create(createRateDto, 'users', id, me._id);\n  }\n\n  @Get('/rates/:id')\n  async getAllRates(\n    @Param() { id }: ParamsWithId,\n    @Query() PaginationParams: PaginationParams,\n  ): Promise | RateDocument[]> {\n    return await this.rateService.fetchAllRates(PaginationParams, 'users', id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserRepository \n\nUserRepository \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUserRepository  -->\n\nUsersModule->UserRepository \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUsersModule -->\n\nUserRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  CacheModule,\n  Module,\n  UnprocessableEntityException,\n  forwardRef,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserRole, UserSchema } from './models/_user.model';\nimport { Student, StudentSchema } from './models/student.model';\nimport { Teacher, TeacherSchema } from './models/teacher.model';\nimport * as mongoose from 'mongoose';\nimport { Model } from 'mongoose';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { UploadCloudinary } from 'src/utils/services/upload-cloudinary';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UserRepository } from './users.repository';\nimport { cacheOperationsModule } from 'src/cache/cache.module';\nimport { RateModule } from 'src/rate/rate.module';\n\n@Module({\n  imports: [\n    forwardRef(() => RateModule),\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n        discriminators: [\n          { name: UserRole.STUDENT, schema: StudentSchema },\n          { name: UserRole.TEACHER, schema: TeacherSchema },\n        ],\n      },\n    ]),\n    MulterModule.registerAsync({\n      imports: [ConfigModule],\n      useClass: UploadCloudinary,\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService, UserRepository],\n  exports: [UsersService, UserRepository],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(undefined: ChangePasswordDto, me: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserData: CreateQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserData\n                                    \n                                                CreateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(queryFiltersAndOptions: FilterQueryOptionsUser)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryFiltersAndOptions\n                                    \n                                                FilterQueryOptionsUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(me: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    me\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(filter: FilterQuery, updateUserData: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserData\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n  UseFilters,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport {\n  CreateQuery,\n  FilterQuery,\n  Model,\n  PaginateModel,\n  PaginateOptions,\n  PaginateResult,\n  UpdateQuery,\n} from 'mongoose';\nimport { ChangePasswordDto } from 'src/users/dto/change-password.dto';\nimport { FilterQueryOptionsUser } from './dto/filterQueryOptions.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User, UserDocument, UserRole, UserSchema } from './models/_user.model';\nimport * as _ from 'lodash';\nimport { UserRepository } from './users.repository';\nimport { cacheOperationsService } from 'src/cache/cache-operations.service';\n\nfunction randomInRange(from: number, to: number) {\n  var r = Math.random();\n  return Math.floor(r * (to - from) + from);\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly userRepository: UserRepository) {}\n\n  async findAll(\n    queryFiltersAndOptions: FilterQueryOptionsUser,\n  ): Promise | UserDocument[]> {\n    const users = await this.userRepository.findAllWithPaginationOption(\n      queryFiltersAndOptions,\n      ['username'],\n    );\n    return users;\n  }\n\n  async findOne(filter: FilterQuery): Promise {\n    const user = await this.userRepository.findOne(filter);\n    return user;\n  }\n\n  async update(\n    filter: FilterQuery,\n    updateUserData: UpdateUserDto,\n  ): Promise {\n    const user = await this.userRepository.updateOne(filter, updateUserData);\n    return user;\n  }\n\n  async getProfile(me: UserDocument): Promise {\n    return me;\n  }\n\n  async createUser(\n    createUserData: CreateQuery,\n  ): Promise {\n    return await this.userRepository.create(createUserData);\n  }\n\n  async changePassword(\n    { oldPassword, newPassword }: ChangePasswordDto,\n    me: UserDocument,\n  ): Promise {\n    if (!(await (me as any).isValidPassword(oldPassword)))\n      throw new UnauthorizedException('password not match');\n\n    return await this.userRepository.updateOne(\n      { _id: me._id } as FilterQuery,\n      { password: newPassword } as UpdateQuery,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyPhoneDto.html":{"url":"classes/VerifyPhoneDto.html","title":"class - VerifyPhoneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyPhoneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/phone-confirmation/dto/verify-phone.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/phone-confirmation/dto/verify-phone.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(Constants.PHONE_REGX, {message: 'phone is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/phone-confirmation/dto/verify-phone.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, Matches } from 'class-validator';\nimport { Constants } from 'src/utils/constants';\n\nexport class VerifyPhoneDto {\n  @IsString()\n  @Matches(Constants.PHONE_REGX, { message: 'phone is invalid' })\n  phone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebsocketsExceptionFilter.html":{"url":"classes/WebsocketsExceptionFilter.html","title":"class - WebsocketsExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebsocketsExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/filters/WebsocketsException.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseWsExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/filters/WebsocketsException.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ArgumentsHost } from '@nestjs/common';\nimport { BaseWsExceptionFilter } from '@nestjs/websockets';\n\n@Catch()\nexport class WebsocketsExceptionFilter extends BaseWsExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    // console.log('exception')\n    super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/WsJwtGuard.html":{"url":"guards/WsJwtGuard.html","title":"guard - WsJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    WsJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/chat/guards/ws-jwt.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/guards/ws-jwt.guard.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/guards/ws-jwt.guard.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { WsException } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\nimport RequestWithUser from 'src/auth/interfaces/requestWithIUser.interface';\nimport { UserDocument } from 'src/users/models/_user.model';\nimport { AuthService } from '../../auth/auth.service';\n\n@Injectable()\nexport class WsJwtGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // console.log('from gurad');\n    const client: Socket = context.switchToWs().getClient();\n    const authToken: string = client.handshake.headers.authorization;\n    (context.switchToHttp().getRequest() as any).me =\n      client.handshake.headers.authorization;\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/cacheOperationsModule.html":{"url":"modules/cacheOperationsModule.html","title":"module - cacheOperationsModule","body":"\n                   \n\n\n\n\n    Modules\n    cacheOperationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_cacheOperationsModule\n\n\n\ncluster_cacheOperationsModule_providers\n\n\n\ncluster_cacheOperationsModule_exports\n\n\n\n\ncacheOperationsService \n\ncacheOperationsService \n\n\n\ncacheOperationsModule\n\ncacheOperationsModule\n\ncacheOperationsService  -->\n\ncacheOperationsModule->cacheOperationsService \n\n\n\n\n\ncacheOperationsService\n\ncacheOperationsService\n\ncacheOperationsModule -->\n\ncacheOperationsService->cacheOperationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cache/cache.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            cacheOperationsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            cacheOperationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { cacheOperationsService } from './cache-operations.service';\nimport { CacheConfigService } from './cacheConfigService';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      isGlobal: true,\n      useClass: CacheConfigService,\n    }),\n  ],\n  providers: [cacheOperationsService],\n  exports: [cacheOperationsService],\n})\nexport class cacheOperationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/cacheOperationsService.html":{"url":"injectables/cacheOperationsService.html","title":"injectable - cacheOperationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  cacheOperationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cache/cache-operations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCache\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/cache/cache-operations.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cache/cache-operations.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n@Injectable()\nexport class cacheOperationsService {\n  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n\n  async clearCache(key: string) {\n    await this.cacheManager.del(key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/decorators/me.decorator.ts\n            \n            variable\n            AuthUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/check-code-to-reset.dto.ts\n            \n            class\n            CheckCodeToResetDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-facebook.dto.ts\n            \n            class\n            LoginFacebookDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/login-google.dto.ts\n            \n            class\n            LoginGoogleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/googleToken.guard.ts\n            \n            injectable\n            GoogleOauthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwtAuth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/requestWithIUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/googleStrategy.passport.ts\n            \n            injectable\n            GoogleOauthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/utils/Password.ts\n            \n            class\n            Password\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/utils/Responses.model.ts\n            \n            interface\n            LoginResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cache/cache-operations.service.ts\n            \n            injectable\n            cacheOperationsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cache/cacheConfigService.ts\n            \n            injectable\n            CacheConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/change-streams/change-streams.service.ts\n            \n            injectable\n            ChangeStreamsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/change-streams/worker.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/filters/WebsocketsException.filter.ts\n            \n            class\n            WebsocketsExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chat/guards/ws-jwt.guard.ts\n            \n            guard\n            WsJwtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/chat/redisIoAdapter.ts\n            \n            class\n            RedisIoAdapter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chat/redisIoAdapter.ts\n            \n            variable\n            pubClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat/redisIoAdapter.ts\n            \n            variable\n            redisAdapter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat/redisIoAdapter.ts\n            \n            variable\n            subClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/message-queue/message-queue.service.ts\n            \n            injectable\n            MessageQueueService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/message-queue/test1-consumer.service.ts\n            \n            injectable\n            ConsumerService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/message-queue/worker.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/Types.ts\n            \n            interface\n            BaseMessageWithToken\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/notification/Types.ts\n            \n            interface\n            BaseMessageWithTokenTesting\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/notification/Types.ts\n            \n            interface\n            MessageBody\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/notification/Types.ts\n            \n            interface\n            queryParamsWithId\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/notification/Types.ts\n            \n            interface\n            SendNotificationMethod\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/notification/Types.ts\n            \n            variable\n            encodingDataForAllDevices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/notification/dto/subscribe-notification.dto.ts\n            \n            class\n            subscribeNotificationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/notification/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/notification.model.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/notification/notification.model.ts\n            \n            variable\n            NotificationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/notification/notifications.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/notification/notifications.repository.ts\n            \n            injectable\n            NotificationRepository\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/phone-confirmation/dto/create-phone-confirmation.dto.ts\n            \n            class\n            CreatePhoneConfirmationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/phone-confirmation/dto/verify-phone.dto.ts\n            \n            class\n            VerifyPhoneDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/phone-confirmation/phone-confirmation.controller.ts\n            \n            controller\n            PhoneConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/phone-confirmation/phone-confirmation.service.ts\n            \n            injectable\n            PhoneConfirmationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/rate/dto/create-rate.dto.ts\n            \n            class\n            CreateRateDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/rate/dto/update-rate.dto.ts\n            \n            class\n            UpdateRateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rate/rate.controller.ts\n            \n            controller\n            RateController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rate/rate.model.ts\n            \n            class\n            Rate\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/rate/rate.model.ts\n            \n            variable\n            RateSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rate/rate.repository.ts\n            \n            injectable\n            RateRepository\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/rate/rate.service.ts\n            \n            injectable\n            RateService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/upload-files/upload-files.controller.ts\n            \n            controller\n            UploadFilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/upload-files/upload-files.service.ts\n            \n            injectable\n            UploadFilesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/filterQueryOptions.dto.ts\n            \n            class\n            FilterQueryOptionsUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/filterQueryOptions.dto.ts\n            \n            class\n            FilterQueryUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/exceptions/userNotFound.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/models/_user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/models/_user.model.ts\n            \n            interface\n            PushToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/models/_user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/models/student.model.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/models/student.model.ts\n            \n            variable\n            StudentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/models/teacher.model.ts\n            \n            class\n            Teacher\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/models/teacher.model.ts\n            \n            variable\n            TeacherSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            function\n            randomInRange\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/base.abstract.repository.ts\n            \n            class\n            BaseAbstractRepository\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/utils/base.model.ts\n            \n            class\n            BaseModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/constants.ts\n            \n            class\n            Constants\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/filters/http-exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/mongooseClassSerializer.interceptor.ts\n            \n            function\n            MongooseClassSerializerInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/pagination/apiOkResponseGeneral.ts\n            \n            variable\n            ApiOkResponseGeneral\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/pagination/paginated.dto.ts\n            \n            class\n            PaginatedDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/utils/pagination/paginationParams.dto.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/paramsWithId.dto.ts\n            \n            class\n            ParamsWithId\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/services/upload-cloudinary.ts\n            \n            injectable\n            UploadCloudinary\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/services/upload-dospace.ts\n            \n            injectable\n            UploadDigitalOceanSpace\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/services/upload-local.ts\n            \n            interface\n            LocalFilesInterceptorOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/services/upload-local.ts\n            \n            function\n            LocalFilesInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/upload-multi-files.decorator.ts\n            \n            variable\n            ApiMultiFile\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.0.1\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/platform-socket.io : ^8.2.5\n        \n            @nestjs/swagger : ^5.1.5\n        \n            @nestjs/websockets : ^8.2.5\n        \n            amqp-connection-manager : ^4.1.1\n        \n            amqplib : ^0.8.0\n        \n            aws-sdk : ^2.1415.0\n        \n            axios : ^0.24.0\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^3.6.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            cloudinary : ^1.27.1\n        \n            firebase-admin : ^10.0.2\n        \n            graphql : ^16.3.0\n        \n            helmet : ^4.6.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            kafkajs : ^1.16.0\n        \n            lodash : ^4.17.21\n        \n            mongodb-extjson : ^2.1.5\n        \n            mongoose : ^6.0.13\n        \n            mongoose-aggregate-paginate-v2 : ^1.0.5\n        \n            mongoose-auto-increment : ^5.0.1\n        \n            mongoose-autopopulate : ^0.16.0\n        \n            mongoose-paginate-v2 : ^1.4.2\n        \n            morgan : ^1.10.0\n        \n            multer : ^1.4.3\n        \n            multer-minio-storage : ^1.0.0\n        \n            multer-s3 : ^2.10.0\n        \n            multer-storage-cloudinary : ^2.2.1\n        \n            mutexify : ^1.4.0\n        \n            nestjs-twilio : ^2.1.0\n        \n            node-persist : ^2.1.0\n        \n            passport : ^0.5.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-google-token : ^0.1.2\n        \n            passport-local : ^1.0.0\n        \n            qiniu-js : ^3.4.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io-redis : ^6.1.1\n        \n            swagger-ui-express : ^4.2.0\n        \n            tape : ^5.5.2\n        \n            twilio : ^3.71.2\n        \n            uninstall : 0.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DeviceType   (src/.../_user.model.ts)\n                        \n                        \n                            UserRole   (src/.../_user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/models/_user.model.ts\n    \n        \n            \n                \n                    \n                        \n                        DeviceType\n                    \n                \n                        \n                            \n                                 android\n                            \n                        \n                        \n                            \n                                Value : android\n                            \n                        \n                        \n                            \n                                 ios\n                            \n                        \n                        \n                            \n                                Value : ios\n                            \n                        \n                        \n                            \n                                 web\n                            \n                        \n                        \n                            \n                                Value : web\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : student\n                            \n                        \n                        \n                            \n                                 TEACHER\n                            \n                        \n                        \n                            \n                                Value : teacher\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../worker.ts)\n                        \n                        \n                            bootstrap   (src/.../worker.ts)\n                        \n                        \n                            LocalFilesInterceptor   (src/.../upload-local.ts)\n                        \n                        \n                            MongooseClassSerializerInterceptor   (src/.../mongooseClassSerializer.interceptor.ts)\n                        \n                        \n                            randomInRange   (src/.../users.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/change-streams/worker.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/message-queue/worker.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/services/upload-local.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LocalFilesInterceptor\n                        \n                    \n                \n            \n            \n                \nLocalFilesInterceptor(options: LocalFilesInterceptorOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                LocalFilesInterceptorOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/mongooseClassSerializer.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MongooseClassSerializerInterceptor\n                        \n                    \n                \n            \n            \n                \nMongooseClassSerializerInterceptor(classToIntercept: Type)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classToIntercept\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/users/users.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInRange\n                        \n                    \n                \n            \n            \n                \nrandomInRange(from: number, to: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        cacheOperationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChangeStreamsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageQueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageQueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PhoneConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RateModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_cacheOperationsModule\n\n\n\ncluster_cacheOperationsModule_exports\n\n\n\ncluster_cacheOperationsModule_providers\n\n\n\ncluster_ChangeStreamsModule\n\n\n\ncluster_ChangeStreamsModule_providers\n\n\n\ncluster_MessageQueueModule\n\n\n\ncluster_MessageQueueModule_exports\n\n\n\ncluster_MessageQueueModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_PhoneConfirmationModule\n\n\n\ncluster_PhoneConfirmationModule_exports\n\n\n\ncluster_PhoneConfirmationModule_providers\n\n\n\ncluster_RateModule\n\n\n\ncluster_RateModule_exports\n\n\n\ncluster_RateModule_providers\n\n\n\ncluster_UploadFilesModule\n\n\n\ncluster_UploadFilesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthModule->ChatModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nChangeStreamsModule\n\nChangeStreamsModule\n\nChangeStreamsModule -->\n\nDatabaseModule->ChangeStreamsModule\n\n\n\n\n\nMessageQueueModule\n\nMessageQueueModule\n\nMessageQueueModule -->\n\nDatabaseModule->MessageQueueModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nNotificationRepository \n\nNotificationRepository \n\nNotificationRepository  -->\n\nNotificationModule->NotificationRepository \n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nPhoneConfirmationModule\n\nPhoneConfirmationModule\n\nAuthModule -->\n\nPhoneConfirmationModule->AuthModule\n\n\n\nAppModule -->\n\nPhoneConfirmationModule->AppModule\n\n\n\n\n\nPhoneConfirmationService \n\nPhoneConfirmationService \n\nPhoneConfirmationService  -->\n\nPhoneConfirmationModule->PhoneConfirmationService \n\n\n\n\n\nRateModule\n\nRateModule\n\nAppModule -->\n\nRateModule->AppModule\n\n\n\n\n\nRateRepository \n\nRateRepository \n\nRateRepository  -->\n\nRateModule->RateRepository \n\n\n\n\n\nRateService \n\nRateService \n\nRateService  -->\n\nRateModule->RateService \n\n\n\n\n\nUploadFilesModule\n\nUploadFilesModule\n\nAppModule -->\n\nUploadFilesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nNotificationModule -->\n\nUsersModule->NotificationModule\n\n\n\nPhoneConfirmationModule -->\n\nUsersModule->PhoneConfirmationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nChangeStreamsModule -->\n\nUsersModule->ChangeStreamsModule\n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUsersModule->UserRepository \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleOauthStrategy\n\nGoogleOauthStrategy\n\nAuthModule -->\n\nGoogleOauthStrategy->AuthModule\n\n\n\n\n\ncacheOperationsService \n\ncacheOperationsService \n\n\n\ncacheOperationsModule\n\ncacheOperationsModule\n\ncacheOperationsService  -->\n\ncacheOperationsModule->cacheOperationsService \n\n\n\n\n\ncacheOperationsService\n\ncacheOperationsService\n\ncacheOperationsModule -->\n\ncacheOperationsService->cacheOperationsModule\n\n\n\n\n\nChangeStreamsService\n\nChangeStreamsService\n\nChangeStreamsModule -->\n\nChangeStreamsService->ChangeStreamsModule\n\n\n\n\n\nMessageQueueService \n\nMessageQueueService \n\nMessageQueueService  -->\n\nMessageQueueModule->MessageQueueService \n\n\n\n\n\nMessageQueueService\n\nMessageQueueService\n\nMessageQueueModule -->\n\nMessageQueueService->MessageQueueModule\n\n\n\n\n\nConsumerService\n\nConsumerService\n\nMessageQueueModule -->\n\nConsumerService->MessageQueueModule\n\n\n\n\n\nNotificationRepository\n\nNotificationRepository\n\nNotificationModule -->\n\nNotificationRepository->NotificationModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nPhoneConfirmationService\n\nPhoneConfirmationService\n\nPhoneConfirmationModule -->\n\nPhoneConfirmationService->PhoneConfirmationModule\n\n\n\n\n\nRateRepository\n\nRateRepository\n\nRateModule -->\n\nRateRepository->RateModule\n\n\n\n\n\nRateService\n\nRateService\n\nRateModule -->\n\nRateService->RateModule\n\n\n\n\n\nUploadFilesService\n\nUploadFilesService\n\nUploadFilesModule -->\n\nUploadFilesService->UploadFilesModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUsersModule -->\n\nUserRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    34 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    10 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/queryParamsWithId.html":{"url":"interfaces/queryParamsWithId.html","title":"interface - queryParamsWithId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  queryParamsWithId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/Types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PaginationParams\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            targetUsers\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targetUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetUsers:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  AndroidConfig,\n  ApnsConfig,\n  FcmOptions,\n  Notification,\n  WebpushConfig,\n} from 'firebase-admin/lib/messaging/messaging-api';\nimport { UserDocument } from 'src/users/models/_user.model';\nimport { PaginationParams } from 'src/utils/pagination/paginationParams.dto';\n\nexport interface MessageBody {\n  title: string;\n  body: string;\n  imageUrl?: string;\n  icon?: string;\n  requireInteraction?: boolean;\n  link?: string;\n  data?: {\n    [key: string]: string;\n  };\n  mobileLink?: string;\n  actions?: {\n    title: string;\n    action: string;\n    icon?: string;\n  }[];\n}\nexport interface BaseMessageWithToken {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token?: string;\n}\n\nexport interface BaseMessageWithTokenTesting {\n  data?: {\n    [key: string]: string;\n  };\n  notification?: Notification;\n  android?: AndroidConfig;\n  webpush?: WebpushConfig;\n  apns?: ApnsConfig;\n  fcmOptions?: FcmOptions;\n  token: string;\n}\n\n//  For More Info to custumize\n//  https://firebase.google.com/docs/cloud-messaging/send-message\nexport const encodingDataForAllDevices = (\n  messageData: MessageBody,\n): BaseMessageWithToken => {\n  const notificationWeb = {\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    /*     requireInteraction: msg.requireInteraction ?? false, */\n    image: messageData.imageUrl,\n    actions: messageData.actions,\n    data: messageData.data,\n  };\n  const notificationMobile = {\n    imageUrl: messageData.imageUrl,\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    color: '#00ff00', //testing MUSSSSSSST BE HEXA\n    notificationCount: 5,\n    clickAction: messageData.mobileLink,\n    channelId: '', ////DEPLOY\n  };\n  return {\n    webpush: {\n      /*    headers: {\n        image: messageData.imageUrl,\n      }, */\n      notification: notificationWeb,\n      data: messageData.data,\n\n      fcmOptions: {\n        link: messageData.link ? messageData.link : 'www.google.com',\n      },\n    },\n    android: {\n      data: messageData.data,\n      notification: notificationMobile,\n    },\n    notification: {\n      body: messageData.body,\n      imageUrl: messageData.imageUrl,\n      title: messageData.title,\n    },\n    apns: {\n      payload: {\n        aps: {\n          'mutable-content': 1,\n        },\n      },\n      fcmOptions: {\n        imageUrl: messageData.imageUrl,\n      },\n    },\n  };\n};\n\nexport interface SendNotificationMethod extends UserDocument {\n  sendNotification: (message: BaseMessageWithToken) => void;\n}\nexport interface queryParamsWithId extends PaginationParams {\n  targetUsers: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/subscribeNotificationDto.html":{"url":"classes/subscribeNotificationDto.html","title":"class - subscribeNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  subscribeNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/subscribe-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/subscribe-notification.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DeviceType\n\n                    \n                \n                \n                    \n                        Default value : DeviceType.web\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsEnum(DeviceType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/subscribe-notification.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { DeviceType } from 'src/users/models/_user.model';\n\nexport class subscribeNotificationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  @IsOptional()\n  @IsString()\n  @IsEnum(DeviceType)\n  type: DeviceType = DeviceType.web;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NotificationDocument   (src/.../notification.model.ts)\n                        \n                        \n                            RateDocument   (src/.../rate.model.ts)\n                        \n                        \n                            StudentDocument   (src/.../student.model.ts)\n                        \n                        \n                            TDocument   (src/.../base.abstract.repository.ts)\n                        \n                        \n                            TeacherDocument   (src/.../teacher.model.ts)\n                        \n                        \n                            UserDocument   (src/.../_user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/notification/notification.model.ts\n    \n    \n        \n            \n                \n                    \n                    NotificationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/rate/rate.model.ts\n    \n    \n        \n            \n                \n                    \n                    RateDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/models/student.model.ts\n    \n    \n        \n            \n                \n                    \n                    StudentDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/utils/base.abstract.repository.ts\n    \n    \n        \n            \n                \n                    \n                    TDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/models/teacher.model.ts\n    \n    \n        \n            \n                \n                    \n                    TeacherDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/models/_user.model.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiMultiFile   (src/.../upload-multi-files.decorator.ts)\n                        \n                        \n                            ApiOkResponseGeneral   (src/.../apiOkResponseGeneral.ts)\n                        \n                        \n                            AuthUser   (src/.../me.decorator.ts)\n                        \n                        \n                            encodingDataForAllDevices   (src/.../Types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            NotificationSchema   (src/.../notification.model.ts)\n                        \n                        \n                            pubClient   (src/.../redisIoAdapter.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RateSchema   (src/.../rate.model.ts)\n                        \n                        \n                            redisAdapter   (src/.../redisIoAdapter.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            StudentSchema   (src/.../student.model.ts)\n                        \n                        \n                            subClient   (src/.../redisIoAdapter.ts)\n                        \n                        \n                            TeacherSchema   (src/.../teacher.model.ts)\n                        \n                        \n                            UserSchema   (src/.../_user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/upload-multi-files.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiMultiFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (fileName: string = 'files'): MethodDecorator => (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor,\n) => {\n    ApiBody({\n        type: 'multipart/form-data',\n        required: true,\n        schema: {\n            type: 'object',\n            properties: {\n                [fileName]: {\n                    type: 'array',\n                    items: {\n                        type: 'string',\n                        format: 'binary',\n                    },\n                },\n            },\n        },\n    })(target, propertyKey, descriptor);\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/pagination/apiOkResponseGeneral.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiOkResponseGeneral\n                        \n                    \n                \n            \n                \n                    \n                        Default value : >(\n  model: TModel,\n  extraModel: Type = null,\n  isPaginated: boolean = true,\n) => {\n  return applyDecorators(\n    ApiOkResponse({\n      schema: {\n        title: `ResponseOf${model.name}`,\n        ...(isPaginated && {\n          allOf: [\n            { $ref: getSchemaPath(PaginatedDto) },\n            {\n              properties: {\n                docs: {\n                  type: 'array',\n                  items: {\n                    allOf: [\n                      { $ref: getSchemaPath(model) },\n                      {\n                        ...(extraModel && { $ref: getSchemaPath(extraModel) }),\n                      },\n                    ],\n                  },\n                },\n              },\n            },\n          ],\n        }),\n        ...(isPaginated === false && {\n          type: 'array',\n          items: {\n            allOf: [\n              { $ref: getSchemaPath(model) },\n              {\n                ...(extraModel && { $ref: getSchemaPath(extraModel) }),\n              },\n            ],\n          },\n        }),\n      },\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/me.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user = (request as RequestWithUser).me;\n    return data ? user?.[data] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/notification/Types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        encodingDataForAllDevices\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  messageData: MessageBody,\n): BaseMessageWithToken => {\n  const notificationWeb = {\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    /*     requireInteraction: msg.requireInteraction ?? false, */\n    image: messageData.imageUrl,\n    actions: messageData.actions,\n    data: messageData.data,\n  };\n  const notificationMobile = {\n    imageUrl: messageData.imageUrl,\n    body: messageData.body,\n    title: messageData.title,\n    icon: messageData.icon,\n    color: '#00ff00', //testing MUSSSSSSST BE HEXA\n    notificationCount: 5,\n    clickAction: messageData.mobileLink,\n    channelId: '', ////DEPLOY\n  };\n  return {\n    webpush: {\n      /*    headers: {\n        image: messageData.imageUrl,\n      }, */\n      notification: notificationWeb,\n      data: messageData.data,\n\n      fcmOptions: {\n        link: messageData.link ? messageData.link : 'www.google.com',\n      },\n    },\n    android: {\n      data: messageData.data,\n      notification: notificationMobile,\n    },\n    notification: {\n      body: messageData.body,\n      imageUrl: messageData.imageUrl,\n      title: messageData.title,\n    },\n    apns: {\n      payload: {\n        aps: {\n          'mutable-content': 1,\n        },\n      },\n      fcmOptions: {\n        imageUrl: messageData.imageUrl,\n      },\n    },\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/notification/notification.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotificationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Notification)\n                    \n                \n\n\n        \n    \n\n    src/chat/redisIoAdapter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pubClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new RedisClient({\n  host: process.env.REDIS_HOST,\n  port: process.env.REDIS_PORT,\n  no_ready_check: true,\n  auth_pass: process.env.REDIS_PASS,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redisAdapter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAdapter({ pubClient, subClient })\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : pubClient.duplicate()\n                    \n                \n\n\n        \n    \n\n    src/rate/rate.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RateSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Rate)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: UserRole[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    src/users/models/student.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StudentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Student)\n                    \n                \n\n\n        \n    \n\n    src/users/models/teacher.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeacherSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Teacher)\n                    \n                \n\n\n        \n    \n\n    src/users/models/_user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
